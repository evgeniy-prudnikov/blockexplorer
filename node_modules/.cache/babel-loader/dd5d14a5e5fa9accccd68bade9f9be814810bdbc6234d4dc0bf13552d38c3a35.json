{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCurve = exports.getHash = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n  return {\n    hash,\n    hmac: function (key) {\n      for (var _len = arguments.length, msgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        msgs[_key - 1] = arguments[_key];\n      }\n      return (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs));\n    },\n    randomBytes: utils_1.randomBytes\n  };\n}\nexports.getHash = getHash;\nfunction createCurve(curveDef, defHash) {\n  const create = hash => (0, weierstrass_js_1.weierstrass)({\n    ...curveDef,\n    ...getHash(hash)\n  });\n  return Object.freeze({\n    ...create(defHash),\n    create\n  });\n}\nexports.createCurve = createCurve;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA,SAAgBA,OAAOA,CAACC,IAAW;EACjC,OAAO;IACLA,IAAI;IACJC,IAAI,EAAE,UAACC,GAAe;MAAA,kCAAKC,IAAkB;QAAlBA,IAAkB;MAAA;MAAA,OAAK,eAAI,EAACH,IAAI,EAAEE,GAAG,EAAE,uBAAW,EAAC,GAAGC,IAAI,CAAC,CAAC;IAAA;IACvFC,WAAW,EAAXC;GACD;AACH;AANAC;AASA,SAAgBC,WAAWA,CAACC,QAAkB,EAAEC,OAAc;EAC5D,MAAMC,MAAM,GAAIV,IAAW,IAAK,gCAAW,EAAC;IAAE,GAAGQ,QAAQ;IAAE,GAAGT,OAAO,CAACC,IAAI;EAAC,CAAE,CAAC;EAC9E,OAAOW,MAAM,CAACC,MAAM,CAAC;IAAE,GAAGF,MAAM,CAACD,OAAO,CAAC;IAAEC;EAAM,CAAE,CAAC;AACtD;AAHAJ","names":["getHash","hash","hmac","key","msgs","randomBytes","utils_1","exports","createCurve","curveDef","defHash","create","Object","freeze"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\@noble\\curves\\src\\_shortw_utils.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}