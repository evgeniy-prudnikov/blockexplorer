{"ast":null,"code":"import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n  /**\n   *  The Signer being managed.\n   */\n  signer;\n  #noncePromise;\n  #delta;\n  /**\n   *  Creates a new **NonceManager** to manage %%signer%%.\n   */\n  constructor(signer) {\n    super(signer.provider);\n    defineProperties(this, {\n      signer\n    });\n    this.#noncePromise = null;\n    this.#delta = 0;\n  }\n  async getAddress() {\n    return this.signer.getAddress();\n  }\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n  async getNonce(blockTag) {\n    if (blockTag === \"pending\") {\n      if (this.#noncePromise == null) {\n        this.#noncePromise = super.getNonce(\"pending\");\n      }\n      const delta = this.#delta;\n      return (await this.#noncePromise) + delta;\n    }\n    return super.getNonce(blockTag);\n  }\n  /**\n   *  Manually increment the nonce. This may be useful when managng\n   *  offline transactions.\n   */\n  increment() {\n    this.#delta++;\n  }\n  /**\n   *  Resets the nonce, causing the **NonceManager** to reload the current\n   *  nonce from the blockchain on the next transaction.\n   */\n  reset() {\n    this.#delta = 0;\n    this.#noncePromise = null;\n  }\n  async sendTransaction(tx) {\n    const noncePromise = this.getNonce(\"pending\");\n    this.increment();\n    tx = await this.signer.populateTransaction(tx);\n    tx.nonce = await noncePromise;\n    // @TODO: Maybe handle interesting/recoverable errors?\n    // Like don't increment if the tx was certainly not sent\n    return await this.signer.sendTransaction(tx);\n  }\n  signTransaction(tx) {\n    return this.signer.signTransaction(tx);\n  }\n  signMessage(message) {\n    return this.signer.signMessage(message);\n  }\n  signTypedData(domain, types, value) {\n    return this.signer.signTypedData(domain, types, value);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AAUrD;;;;;AAKA,OAAM,MAAOC,YAAa,SAAQD,cAAc;EAC5C;;;EAGAE,MAAM;EAEN,aAAa;EACb,MAAM;EAEN;;;EAGAC,YAAYD,MAAc;IACtB,KAAK,CAACA,MAAM,CAACE,QAAQ,CAAC;IACtBL,gBAAgB,CAAe,IAAI,EAAE;MAAEG;IAAM,CAAE,CAAC;IAEhD,IAAI,CAAC,aAAa,GAAG,IAAI;IACzB,IAAI,CAAC,MAAM,GAAG,CAAC;EACnB;EAEA,MAAMG,UAAUA;IACZ,OAAO,IAAI,CAACH,MAAM,CAACG,UAAU,EAAE;EACnC;EAEAC,OAAOA,CAACF,QAAyB;IAC7B,OAAO,IAAIH,YAAY,CAAC,IAAI,CAACC,MAAM,CAACI,OAAO,CAACF,QAAQ,CAAC,CAAC;EAC1D;EAEA,MAAMG,QAAQA,CAACC,QAAmB;IAC9B,IAAIA,QAAQ,KAAK,SAAS,EAAE;MACxB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;QAC5B,IAAI,CAAC,aAAa,GAAG,KAAK,CAACD,QAAQ,CAAC,SAAS,CAAC;;MAGlD,MAAME,KAAK,GAAG,IAAI,CAAC,MAAM;MACzB,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,IAAIA,KAAK;;IAG7C,OAAO,KAAK,CAACF,QAAQ,CAACC,QAAQ,CAAC;EACnC;EAEA;;;;EAIAE,SAASA;IACL,IAAI,CAAC,MAAM,EAAE;EACjB;EAEA;;;;EAIAC,KAAKA;IACD,IAAI,CAAC,MAAM,GAAG,CAAC;IACf,IAAI,CAAC,aAAa,GAAG,IAAI;EAC7B;EAEA,MAAMC,eAAeA,CAACC,EAAsB;IACxC,MAAMC,YAAY,GAAG,IAAI,CAACP,QAAQ,CAAC,SAAS,CAAC;IAC7C,IAAI,CAACG,SAAS,EAAE;IAEhBG,EAAE,GAAG,MAAM,IAAI,CAACX,MAAM,CAACa,mBAAmB,CAACF,EAAE,CAAC;IAC9CA,EAAE,CAACG,KAAK,GAAG,MAAMF,YAAY;IAE7B;IACA;IACA,OAAO,MAAM,IAAI,CAACZ,MAAM,CAACU,eAAe,CAACC,EAAE,CAAC;EAChD;EAEAI,eAAeA,CAACJ,EAAsB;IAClC,OAAO,IAAI,CAACX,MAAM,CAACe,eAAe,CAACJ,EAAE,CAAC;EAC1C;EAEAK,WAAWA,CAACC,OAA4B;IACpC,OAAO,IAAI,CAACjB,MAAM,CAACgB,WAAW,CAACC,OAAO,CAAC;EAC3C;EAEAC,aAAaA,CAACC,MAAuB,EAAEC,KAA4C,EAAEC,KAA0B;IAC3G,OAAO,IAAI,CAACrB,MAAM,CAACkB,aAAa,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,CAAC;EAC1D","names":["defineProperties","AbstractSigner","NonceManager","signer","constructor","provider","getAddress","connect","getNonce","blockTag","delta","increment","reset","sendTransaction","tx","noncePromise","populateTransaction","nonce","signTransaction","signMessage","message","signTypedData","domain","types","value"],"sourceRoot":"","sources":["../../src.ts/providers/signer-noncemanager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}