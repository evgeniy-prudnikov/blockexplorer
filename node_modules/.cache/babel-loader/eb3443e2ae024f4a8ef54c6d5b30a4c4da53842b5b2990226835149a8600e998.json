{"ast":null,"code":"import { formatUnits, isHexString, hexStripZeros, hexValue } from './api/utils';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport axios from 'axios';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { Wallet as Wallet$1 } from '@ethersproject/wallet';\nimport { Contract as Contract$1, ContractFactory as ContractFactory$1 } from '@ethersproject/contracts';\n\n/**\r\n * The supported networks by Alchemy. Note that some functions are not available\r\n * on all networks. Please refer to the Alchemy documentation for which APIs are\r\n * available on which networks\r\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\r\n *\r\n * @public\r\n */\nvar Network;\n(function (Network) {\n  Network[\"ETH_MAINNET\"] = \"eth-mainnet\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ETH_ROPSTEN\"] = \"eth-ropsten\";\n  Network[\"ETH_GOERLI\"] = \"eth-goerli\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ETH_KOVAN\"] = \"eth-kovan\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ETH_RINKEBY\"] = \"eth-rinkeby\";\n  Network[\"ETH_SEPOLIA\"] = \"eth-sepolia\";\n  Network[\"OPT_MAINNET\"] = \"opt-mainnet\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"OPT_KOVAN\"] = \"opt-kovan\";\n  Network[\"OPT_GOERLI\"] = \"opt-goerli\";\n  Network[\"OPT_SEPOLIA\"] = \"opt-sepolia\";\n  Network[\"ARB_MAINNET\"] = \"arb-mainnet\";\n  /** @deprecated - Will be removed in subsequent versions */\n  Network[\"ARB_RINKEBY\"] = \"arb-rinkeby\";\n  Network[\"ARB_GOERLI\"] = \"arb-goerli\";\n  Network[\"ARB_SEPOLIA\"] = \"arb-sepolia\";\n  Network[\"MATIC_MAINNET\"] = \"polygon-mainnet\";\n  Network[\"MATIC_MUMBAI\"] = \"polygon-mumbai\";\n  Network[\"ASTAR_MAINNET\"] = \"astar-mainnet\";\n  Network[\"POLYGONZKEVM_MAINNET\"] = \"polygonzkevm-mainnet\";\n  Network[\"POLYGONZKEVM_TESTNET\"] = \"polygonzkevm-testnet\";\n  Network[\"BASE_MAINNET\"] = \"base-mainnet\";\n  Network[\"BASE_GOERLI\"] = \"base-goerli\";\n  Network[\"BASE_SEPOLIA\"] = \"base-sepolia\";\n})(Network || (Network = {}));\n/** Token Types for the `getTokenBalances()` endpoint. */\nvar TokenBalanceType;\n(function (TokenBalanceType) {\n  /**\r\n   * Option to fetch the top 100 tokens by 24-hour volume. This option is only\r\n   * available on Mainnet in Ethereum, Polygon, and Arbitrum.\r\n   */\n  TokenBalanceType[\"DEFAULT_TOKENS\"] = \"DEFAULT_TOKENS\";\n  /**\r\n   * Option to fetch the set of ERC-20 tokens that the address as ever held. his\r\n   * list is produced by an address's historical transfer activity and includes\r\n   * all tokens that the address has ever received.\r\n   */\n  TokenBalanceType[\"ERC20\"] = \"erc20\";\n})(TokenBalanceType || (TokenBalanceType = {}));\n/**\r\n * Categories of transfers to use with the {@link AssetTransfersParams} request\r\n * object when using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @public\r\n */\nvar AssetTransfersCategory;\n(function (AssetTransfersCategory) {\n  /**\r\n   * Top level ETH transactions that occur where the `fromAddress` is an\r\n   * external user-created address. External addresses have private keys and are\r\n   * accessed by users.\r\n   */\n  AssetTransfersCategory[\"EXTERNAL\"] = \"external\";\n  /**\r\n   * Top level ETH transactions that occur where the `fromAddress` is an\r\n   * internal, smart contract address. For example, a smart contract calling\r\n   * another smart contract or sending\r\n   */\n  AssetTransfersCategory[\"INTERNAL\"] = \"internal\";\n  /** ERC20 transfers. */\n  AssetTransfersCategory[\"ERC20\"] = \"erc20\";\n  /** ERC721 transfers. */\n  AssetTransfersCategory[\"ERC721\"] = \"erc721\";\n  /** ERC1155 transfers. */\n  AssetTransfersCategory[\"ERC1155\"] = \"erc1155\";\n  /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */\n  AssetTransfersCategory[\"SPECIALNFT\"] = \"specialnft\";\n})(AssetTransfersCategory || (AssetTransfersCategory = {}));\n/**\r\n * Enum for the order of the {@link AssetTransfersParams} request object when\r\n * using {@link CoreNamespace.getAssetTransfers}.\r\n *\r\n * @deprecated Use {@link SortingOrder} instead. This enum will be removed in a\r\n *   future version.\r\n * @public\r\n */\nvar AssetTransfersOrder;\n(function (AssetTransfersOrder) {\n  AssetTransfersOrder[\"ASCENDING\"] = \"asc\";\n  AssetTransfersOrder[\"DESCENDING\"] = \"desc\";\n})(AssetTransfersOrder || (AssetTransfersOrder = {}));\n/**\r\n * An enum for specifying the token type on NFTs.\r\n *\r\n * @public\r\n */\nvar NftTokenType;\n(function (NftTokenType) {\n  NftTokenType[\"ERC721\"] = \"ERC721\";\n  NftTokenType[\"ERC1155\"] = \"ERC1155\";\n  NftTokenType[\"NO_SUPPORTED_NFT_STANDARD\"] = \"NO_SUPPORTED_NFT_STANDARD\";\n  NftTokenType[\"NOT_A_CONTRACT\"] = \"NOT_A_CONTRACT\";\n  NftTokenType[\"UNKNOWN\"] = \"UNKNOWN\";\n})(NftTokenType || (NftTokenType = {}));\n/** Potential reasons why an NFT contract was classified as spam. */\nvar NftSpamClassification;\n(function (NftSpamClassification) {\n  NftSpamClassification[\"Erc721TooManyOwners\"] = \"Erc721TooManyOwners\";\n  NftSpamClassification[\"Erc721TooManyTokens\"] = \"Erc721TooManyTokens\";\n  NftSpamClassification[\"Erc721DishonestTotalSupply\"] = \"Erc721DishonestTotalSupply\";\n  NftSpamClassification[\"MostlyHoneyPotOwners\"] = \"MostlyHoneyPotOwners\";\n  NftSpamClassification[\"OwnedByMostHoneyPots\"] = \"OwnedByMostHoneyPots\";\n})(NftSpamClassification || (NftSpamClassification = {}));\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} request.\r\n * NFTs that match one or more of these filters are excluded from the response.\r\n *\r\n * @deprecated Use {@link NftFilters} instead. This enum will be removed in a\r\n *   future version.\r\n *\r\n * @beta\r\n */\nvar NftExcludeFilters;\n(function (NftExcludeFilters) {\n  /** Exclude NFTs that have been classified as spam. */\n  NftExcludeFilters[\"SPAM\"] = \"SPAM\";\n  /** Exclude NFTs that have been airdropped to a user. */\n  NftExcludeFilters[\"AIRDROPS\"] = \"AIRDROPS\";\n})(NftExcludeFilters || (NftExcludeFilters = {}));\n/**\r\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} request.\r\n *\r\n * @beta\r\n */\nvar NftFilters;\n(function (NftFilters) {\n  /** NFTs that have been classified as spam. */\n  NftFilters[\"SPAM\"] = \"SPAM\";\n  /** NFTs that have been airdropped to a user. */\n  NftFilters[\"AIRDROPS\"] = \"AIRDROPS\";\n})(NftFilters || (NftFilters = {}));\n/**\r\n * Enum of ordering that can be applied to a {@link getNftsForOwner} or a\r\n * {@link getContractsForOwner} response.\r\n *\r\n * @beta\r\n */\nvar NftOrdering;\n(function (NftOrdering) {\n  NftOrdering[\"TRANSFERTIME\"] = \"TRANSFERTIME\";\n})(NftOrdering || (NftOrdering = {}));\n/**\r\n * The type of transfer for the request. Note that using `TO` will also include\r\n * NFTs that were minted by the owner.\r\n */\nvar GetTransfersForOwnerTransferType;\n(function (GetTransfersForOwnerTransferType) {\n  GetTransfersForOwnerTransferType[\"TO\"] = \"TO\";\n  GetTransfersForOwnerTransferType[\"FROM\"] = \"FROM\";\n})(GetTransfersForOwnerTransferType || (GetTransfersForOwnerTransferType = {}));\n/**\r\n * Enum for representing the supported sorting orders of the API.\r\n *\r\n * @public\r\n */\nvar SortingOrder;\n(function (SortingOrder) {\n  SortingOrder[\"ASCENDING\"] = \"asc\";\n  SortingOrder[\"DESCENDING\"] = \"desc\";\n})(SortingOrder || (SortingOrder = {}));\n/**\r\n * Enum representing the supported NFT marketplaces by the\r\n * {@link NftNamespace.getNftSales} method.\r\n *\r\n * @public\r\n */\nvar NftSaleMarketplace;\n(function (NftSaleMarketplace) {\n  NftSaleMarketplace[\"SEAPORT\"] = \"seaport\";\n  NftSaleMarketplace[\"LOOKSRARE\"] = \"looksrare\";\n  NftSaleMarketplace[\"X2Y2\"] = \"x2y2\";\n  NftSaleMarketplace[\"WYVERN\"] = \"wyvern\";\n  NftSaleMarketplace[\"CRYPTOPUNKS\"] = \"cryptopunks\";\n  NftSaleMarketplace[\"BLUR\"] = \"blur\";\n  NftSaleMarketplace[\"UNKNOWN\"] = \"unknown\";\n})(NftSaleMarketplace || (NftSaleMarketplace = {}));\n/**\r\n * Enum for specifying the taker type for the {@link NftNamespace.getNftSales}\r\n * method.\r\n *\r\n * @public\r\n */\nvar NftSaleTakerType;\n(function (NftSaleTakerType) {\n  NftSaleTakerType[\"BUYER\"] = \"buyer\";\n  NftSaleTakerType[\"SELLER\"] = \"seller\";\n})(NftSaleTakerType || (NftSaleTakerType = {}));\n/** The current state of the NFT contract refresh process. */\nvar RefreshState;\n(function (RefreshState) {\n  /** The provided contract is not an NFT or does not contain metadata. */\n  RefreshState[\"DOES_NOT_EXIST\"] = \"does_not_exist\";\n  /** The contract has already been queued for refresh. */\n  RefreshState[\"ALREADY_QUEUED\"] = \"already_queued\";\n  /** The contract is currently being refreshed. */\n  RefreshState[\"IN_PROGRESS\"] = \"in_progress\";\n  /** The contract refresh is complete. */\n  RefreshState[\"FINISHED\"] = \"finished\";\n  /** The contract refresh has been queued and await execution. */\n  RefreshState[\"QUEUED\"] = \"queued\";\n  /** The contract was unable to be queued due to an internal error. */\n  RefreshState[\"QUEUE_FAILED\"] = \"queue_failed\";\n})(RefreshState || (RefreshState = {}));\n/** An OpenSea collection's approval status. */\nvar OpenSeaSafelistRequestStatus;\n(function (OpenSeaSafelistRequestStatus) {\n  /** Verified collection. */\n  OpenSeaSafelistRequestStatus[\"VERIFIED\"] = \"verified\";\n  /** Collections that are approved on open sea and can be found in search results. */\n  OpenSeaSafelistRequestStatus[\"APPROVED\"] = \"approved\";\n  /** Collections that requested safelisting on OpenSea. */\n  OpenSeaSafelistRequestStatus[\"REQUESTED\"] = \"requested\";\n  /** Brand new collections. */\n  OpenSeaSafelistRequestStatus[\"NOT_REQUESTED\"] = \"not_requested\";\n})(OpenSeaSafelistRequestStatus || (OpenSeaSafelistRequestStatus = {}));\n/**\r\n * Method names for Alchemy's custom Subscription API endpoints.\r\n *\r\n * This value is provided in the `method` field when creating an event filter on\r\n * the Websocket Namespace.\r\n */\nvar AlchemySubscription;\n(function (AlchemySubscription) {\n  AlchemySubscription[\"PENDING_TRANSACTIONS\"] = \"alchemy_pendingTransactions\";\n  AlchemySubscription[\"MINED_TRANSACTIONS\"] = \"alchemy_minedTransactions\";\n})(AlchemySubscription || (AlchemySubscription = {}));\n/**\r\n * Asset type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n * Allows you to determine if the assets approved or / and transferred are\r\n * native, tokens or NFTs.\r\n */\nvar SimulateAssetType;\n(function (SimulateAssetType) {\n  /**\r\n   * Native transfers that involve the currency of the chain the simulation is\r\n   * run on (ex: ETH for Ethereum, MATIC for Polygon, ETH for Arbitrum).\r\n   */\n  SimulateAssetType[\"NATIVE\"] = \"NATIVE\";\n  /** ERC20 approval or transfers. */\n  SimulateAssetType[\"ERC20\"] = \"ERC20\";\n  /** ERC721 approval or transfers. */\n  SimulateAssetType[\"ERC721\"] = \"ERC721\";\n  /** ERC1155 approval or transfers. */\n  SimulateAssetType[\"ERC1155\"] = \"ERC1155\";\n  /**\r\n   * Special contracts that don't follow ERC 721/1155.Currently limited to\r\n   * CryptoKitties and CryptoPunks.\r\n   */\n  SimulateAssetType[\"SPECIAL_NFT\"] = \"SPECIAL_NFT\";\n})(SimulateAssetType || (SimulateAssetType = {}));\n/**\r\n * Change type returned when calling {@link TransactNamespace.simulateAssetChanges}.\r\n */\nvar SimulateChangeType;\n(function (SimulateChangeType) {\n  /**\r\n   * Represents a transaction that approved or disapproved permissions for a\r\n   * contract.\r\n   *\r\n   * APPROVE without token ID → approve all tokens\r\n   * APPROVE without amount → approve all amount\r\n   * APPROVE with zero amount → approval being cleared\r\n   */\n  SimulateChangeType[\"APPROVE\"] = \"APPROVE\";\n  /**\r\n   * Represents a transaction that transferred tokens from one address to another.\r\n   */\n  SimulateChangeType[\"TRANSFER\"] = \"TRANSFER\";\n})(SimulateChangeType || (SimulateChangeType = {}));\n/**\r\n * Authority used to decode calls and logs when using the\r\n * {@link TransactNamespace.simulateExecution} method.\r\n */\nvar DecodingAuthority;\n(function (DecodingAuthority) {\n  DecodingAuthority[\"ETHERSCAN\"] = \"ETHERSCAN\";\n})(DecodingAuthority || (DecodingAuthority = {}));\n/** The type of call in a debug call trace. */\nvar DebugCallType;\n(function (DebugCallType) {\n  DebugCallType[\"CREATE\"] = \"CREATE\";\n  DebugCallType[\"CALL\"] = \"CALL\";\n  DebugCallType[\"STATICCALL\"] = \"STATICCALL\";\n  DebugCallType[\"DELEGATECALL\"] = \"DELEGATECALL\";\n})(DebugCallType || (DebugCallType = {}));\n/**\r\n * Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\r\n *\r\n * @internal\r\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nvar GasOptimizedTransactionStatus;\n(function (GasOptimizedTransactionStatus) {\n  GasOptimizedTransactionStatus[\"UNSPECIFIED\"] = \"TRANSACTION_JOB_STATUS_UNSPECIFIED\";\n  GasOptimizedTransactionStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  GasOptimizedTransactionStatus[\"COMPLETE\"] = \"COMPLETE\";\n  GasOptimizedTransactionStatus[\"ABANDONED\"] = \"ABANDONED\";\n})(GasOptimizedTransactionStatus || (GasOptimizedTransactionStatus = {}));\n/** The version of the webhook. All newly created webhooks default to V2. */\nvar WebhookVersion;\n(function (WebhookVersion) {\n  WebhookVersion[\"V1\"] = \"V1\";\n  WebhookVersion[\"V2\"] = \"V2\";\n})(WebhookVersion || (WebhookVersion = {}));\n/** The type of {@link Webhook}. */\nvar WebhookType;\n(function (WebhookType) {\n  WebhookType[\"MINED_TRANSACTION\"] = \"MINED_TRANSACTION\";\n  WebhookType[\"DROPPED_TRANSACTION\"] = \"DROPPED_TRANSACTION\";\n  WebhookType[\"ADDRESS_ACTIVITY\"] = \"ADDRESS_ACTIVITY\";\n  WebhookType[\"NFT_ACTIVITY\"] = \"NFT_ACTIVITY\";\n  WebhookType[\"NFT_METADATA_UPDATE\"] = \"NFT_METADATA_UPDATE\";\n  WebhookType[\"GRAPHQL\"] = \"GRAPHQL\";\n})(WebhookType || (WebhookType = {}));\n/**\r\n * Commitment level of the target block with using methods in the\r\n * {@link DebugNamespace}\r\n */\nvar CommitmentLevel;\n(function (CommitmentLevel) {\n  /**\r\n   * Sample next block inferred by Alchemy built on top of the latest block.\r\n   * This contains the set of transactions taken from the local mempool and\r\n   * is a proxy for blocks that have not been mined yet.\r\n   */\n  CommitmentLevel[\"PENDING\"] = \"pending\";\n  /**\r\n   * The most recent block in the canonical chain observed by Alchemy. Note that\r\n   * this block may be re-orged out of the canonical chain.\r\n   */\n  CommitmentLevel[\"LATEST\"] = \"latest\";\n  /**\r\n   * The most recent crypto-economically secure block that cannot be re-orged\r\n   * outside of manual intervention driven by community coordination. This is\r\n   * only available on {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n   */\n  CommitmentLevel[\"SAFE\"] = \"safe\";\n  /**\r\n   * The most recent secure block that has been accepted by >2/3 of validators.\r\n   * This block is very unlikely to be re-orged. This is only available on\r\n   * {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\r\n   */\n  CommitmentLevel[\"FINALIZED\"] = \"finalized\";\n  /**\r\n   * The lowest numbered block available that is usually the first block created.\r\n   */\n  CommitmentLevel[\"EARLIEST\"] = \"earliest\";\n})(CommitmentLevel || (CommitmentLevel = {}));\n/**\r\n * The type of tracer to use when running debug methods in the\r\n * {@link DebugNamespace}.\r\n */\nvar DebugTracerType;\n(function (DebugTracerType) {\n  DebugTracerType[\"CALL_TRACER\"] = \"callTracer\";\n  DebugTracerType[\"PRESTATE_TRACER\"] = \"prestateTracer\";\n})(DebugTracerType || (DebugTracerType = {}));\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __awaiter$1(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n    i,\n    q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n    i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nconst DEFAULT_ALCHEMY_API_KEY = 'demo';\nconst DEFAULT_NETWORK = Network.ETH_MAINNET;\nconst DEFAULT_MAX_RETRIES = 5;\nconst DEFAULT_REQUEST_TIMEOUT = 0; // 0 = no timeout\n/**\r\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\r\n * endpoints only work with non eth json-rpc requests.\r\n *\r\n * @internal\r\n */\nfunction getAlchemyHttpUrl(network, apiKey) {\n  return `https://${network}.g.alchemy.com/v2/${apiKey}`;\n}\nfunction getAlchemyNftHttpUrl(network, apiKey) {\n  return `https://${network}.g.alchemy.com/nft/v2/${apiKey}`;\n}\nfunction getAlchemyWsUrl(network, apiKey) {\n  return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\n}\nfunction getAlchemyWebhookHttpUrl() {\n  return 'https://dashboard.alchemy.com/api';\n}\nvar AlchemyApiType;\n(function (AlchemyApiType) {\n  AlchemyApiType[AlchemyApiType[\"BASE\"] = 0] = \"BASE\";\n  AlchemyApiType[AlchemyApiType[\"NFT\"] = 1] = \"NFT\";\n  AlchemyApiType[AlchemyApiType[\"WEBHOOK\"] = 2] = \"WEBHOOK\";\n})(AlchemyApiType || (AlchemyApiType = {}));\n/**\r\n * Mapping of network names to their corresponding Network strings used to\r\n * create an Ethers.js Provider instance.\r\n */\nconst EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_ROPSTEN]: 'ropsten',\n  [Network.ETH_GOERLI]: 'goerli',\n  [Network.ETH_KOVAN]: 'kovan',\n  [Network.ETH_RINKEBY]: 'rinkeby',\n  [Network.ETH_SEPOLIA]: 'sepolia',\n  [Network.OPT_MAINNET]: 'optimism',\n  [Network.OPT_KOVAN]: 'optimism-kovan',\n  [Network.OPT_GOERLI]: 'optimism-goerli',\n  [Network.OPT_SEPOLIA]: 'optimism-sepolia',\n  [Network.ARB_MAINNET]: 'arbitrum',\n  [Network.ARB_RINKEBY]: 'arbitrum-rinkeby',\n  [Network.ARB_GOERLI]: 'arbitrum-goerli',\n  [Network.ARB_SEPOLIA]: 'arbitrum-sepolia',\n  [Network.MATIC_MAINNET]: 'matic',\n  [Network.MATIC_MUMBAI]: 'maticmum',\n  [Network.ASTAR_MAINNET]: 'astar-mainnet',\n  [Network.POLYGONZKEVM_MAINNET]: 'polygonzkevm-mainnet',\n  [Network.POLYGONZKEVM_TESTNET]: 'polygonzkevm-testnet',\n  [Network.BASE_MAINNET]: 'base-mainnet',\n  [Network.BASE_GOERLI]: 'base-goerli',\n  [Network.BASE_SEPOLIA]: 'base-sepolia'\n};\n/**\r\n * Mapping of network names to their corresponding Ethers Network objects. These\r\n * networks are not yet supported by Ethers and are listed here to be overriden\r\n * in the provider.\r\n */\nconst CustomNetworks = {\n  'arbitrum-goerli': {\n    chainId: 421613,\n    name: 'arbitrum-goerli'\n  },\n  'arbitrum-sepolia': {\n    chainId: 421614,\n    name: 'arbitrum-sepolia'\n  },\n  'astar-mainnet': {\n    chainId: 592,\n    name: 'astar-mainnet'\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: 'sepolia'\n  },\n  'optimism-sepolia': {\n    chainId: 11155420,\n    name: 'optimism-sepolia'\n  },\n  'polygonzkevm-mainnet': {\n    chainId: 1101,\n    name: 'polygonzkevm-mainnet'\n  },\n  'polygonzkevm-testnet': {\n    chainId: 1442,\n    name: 'polygonzkevm-testnet'\n  },\n  'base-mainnet': {\n    chainId: 8453,\n    name: 'base-mainnet'\n  },\n  'base-goerli': {\n    chainId: 84531,\n    name: 'base-goerli'\n  },\n  'base-sepolia': {\n    chainId: 84532,\n    name: 'base-sepolia'\n  }\n};\nfunction noop() {\n  // It's a no-op\n}\nconst ETH_NULL_VALUE = '0x';\nconst ETH_NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\n/**\r\n * This class holds the config information for the SDK client instance and\r\n * exposes the underlying providers for more advanced use cases.\r\n *\r\n * @public\r\n */\nclass AlchemyConfig {\n  constructor(config) {\n    this.apiKey = (config === null || config === void 0 ? void 0 : config.apiKey) || DEFAULT_ALCHEMY_API_KEY;\n    this.network = (config === null || config === void 0 ? void 0 : config.network) || DEFAULT_NETWORK;\n    this.maxRetries = (config === null || config === void 0 ? void 0 : config.maxRetries) || DEFAULT_MAX_RETRIES;\n    this.url = config === null || config === void 0 ? void 0 : config.url;\n    this.authToken = config === null || config === void 0 ? void 0 : config.authToken;\n    this.batchRequests = (config === null || config === void 0 ? void 0 : config.batchRequests) || false;\n    this.requestTimeout = (config === null || config === void 0 ? void 0 : config.requestTimeout) || DEFAULT_REQUEST_TIMEOUT;\n  }\n  /**\r\n   * Returns the URL endpoint to send the HTTP request to. If a custom URL was\r\n   * provided in the config, that URL is returned. Otherwise, the default URL is\r\n   * from the network and API key.\r\n   *\r\n   * @param apiType - The type of API to get the URL for.\r\n   * @internal\r\n   */\n  _getRequestUrl(apiType) {\n    if (this.url !== undefined) {\n      return this.url;\n    } else if (apiType === AlchemyApiType.NFT) {\n      return getAlchemyNftHttpUrl(this.network, this.apiKey);\n    } else if (apiType === AlchemyApiType.WEBHOOK) {\n      return getAlchemyWebhookHttpUrl();\n    } else {\n      return getAlchemyHttpUrl(this.network, this.apiKey);\n    }\n  }\n  /**\r\n   * Returns an AlchemyProvider instance. Only one provider is created per\r\n   * Alchemy instance.\r\n   *\r\n   * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\r\n   * has been expanded to support Alchemy's Enhanced APIs.\r\n   *\r\n   * Most common methods on the provider are available as top-level methods on\r\n   * the {@link Alchemy} instance, but the provider is exposed here to access\r\n   * other less-common methods.\r\n   *\r\n   * @public\r\n   */\n  getProvider() {\n    if (!this._baseAlchemyProvider) {\n      this._baseAlchemyProvider = (() => __awaiter$1(this, void 0, void 0, function* () {\n        const {\n          AlchemyProvider\n        } = yield import('./alchemy-provider-8993bb18.js');\n        return new AlchemyProvider(this);\n      }))();\n    }\n    return this._baseAlchemyProvider;\n  }\n  /**\r\n   * Returns an AlchemyWebsocketProvider instance. Only one provider is created\r\n   * per Alchemy instance.\r\n   *\r\n   * The AlchemyWebSocketProvider is a wrapper around ether's\r\n   * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\r\n   * Subscription APIs, automatic backfilling, and other performance improvements.\r\n   *\r\n   * Most common methods on the provider are available as top-level methods on\r\n   * the {@link Alchemy} instance, but the provider is exposed here to access\r\n   * other less-common methods.\r\n   */\n  getWebSocketProvider() {\n    if (!this._baseAlchemyWssProvider) {\n      this._baseAlchemyWssProvider = (() => __awaiter$1(this, void 0, void 0, function* () {\n        const {\n          AlchemyWebSocketProvider\n        } = yield import('./alchemy-websocket-provider-b4c4e0c1.js');\n        return new AlchemyWebSocketProvider(this);\n      }))();\n    }\n    return this._baseAlchemyWssProvider;\n  }\n}\nconst version$1 = \"logger/5.7.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel$1;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel$1 || (LogLevel$1 = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n  ///////////////////\n  // Interaction Errors\n  // The user rejected the action, such as signing a message or sending\n  // a transaction\n  ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger$1 {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._log(Logger$1.levels.DEBUG, args);\n  }\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._log(Logger$1.levels.INFO, args);\n  }\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._log(Logger$1.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger$1.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n          break;\n        }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger$1.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger$1.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger$1.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger$1.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger$1.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger$1(version$1);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger$1.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger$1.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger$1(version);\n  }\n}\nLogger$1.errors = ErrorCode;\nLogger$1.levels = LogLevel$1;\nconst version = \"properties/5.7.0\";\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nconst logger = new Logger$1(version);\nfunction defineReadOnly(object, name, value) {\n  Object.defineProperty(object, name, {\n    enumerable: true,\n    value: value,\n    writable: false\n  });\n}\nfunction resolveProperties(object) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const promises = Object.keys(object).map(key => {\n      const value = object[key];\n      return Promise.resolve(value).then(v => ({\n        key: key,\n        value: v\n      }));\n    });\n    const results = yield Promise.all(promises);\n    return results.reduce((accum, result) => {\n      accum[result.key] = result.value;\n      return accum;\n    }, {});\n  });\n}\nconst opaque = {\n  bigint: true,\n  boolean: true,\n  \"function\": true,\n  number: true,\n  string: true\n};\nfunction _isFrozen(object) {\n  // Opaque objects are not mutable, so safe to copy by assignment\n  if (object === undefined || object === null || opaque[typeof object]) {\n    return true;\n  }\n  if (Array.isArray(object) || typeof object === \"object\") {\n    if (!Object.isFrozen(object)) {\n      return false;\n    }\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; i++) {\n      let value = null;\n      try {\n        value = object[keys[i]];\n      } catch (error) {\n        // If accessing a value triggers an error, it is a getter\n        // designed to do so (e.g. Result) and is therefore \"frozen\"\n        continue;\n      }\n      if (!_isFrozen(value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n  if (_isFrozen(object)) {\n    return object;\n  }\n  // Arrays are mutable, so we need to create a copy\n  if (Array.isArray(object)) {\n    return Object.freeze(object.map(item => deepCopy(item)));\n  }\n  if (typeof object === \"object\") {\n    const result = {};\n    for (const key in object) {\n      const value = object[key];\n      if (value === undefined) {\n        continue;\n      }\n      defineReadOnly(result, key, deepCopy(value));\n    }\n    return result;\n  }\n  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, \"object\", object);\n}\nfunction deepCopy(object) {\n  return _deepCopy(object);\n}\n\n/**\r\n * Converts a hex string to a decimal number.\r\n *\r\n * @param hexString - The hex string to convert.\r\n * @public\r\n */\nfunction fromHex(hexString) {\n  return BigNumber.from(hexString).toNumber();\n}\n/**\r\n * Converts a number to a hex string.\r\n *\r\n * @param num - The number to convert to hex.\r\n * @public\r\n */\nfunction toHex(num) {\n  return BigNumber.from(num).toHexString();\n}\n/**\r\n * Checks if a value is a hex string.\r\n *\r\n * @param possibleHexString - The value to check.\r\n * @public\r\n */\nfunction isHex(possibleHexString) {\n  return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\n}\nfunction formatBlock(block) {\n  if (typeof block === 'string') {\n    return block;\n  } else if (Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}\nfunction stringToEnum(x, enumb) {\n  return Object.values(enumb).includes(x) ? x : undefined;\n}\nfunction getNftContractFromRaw(rawNftContract) {\n  return {\n    address: rawNftContract.address,\n    name: rawNftContract.contractMetadata.name,\n    symbol: rawNftContract.contractMetadata.symbol,\n    totalSupply: rawNftContract.contractMetadata.totalSupply,\n    tokenType: parseNftTokenType(rawNftContract.contractMetadata.tokenType),\n    openSea: parseOpenSeaMetadata(rawNftContract.contractMetadata.openSea),\n    contractDeployer: rawNftContract.contractMetadata.contractDeployer,\n    deployedBlockNumber: rawNftContract.contractMetadata.deployedBlockNumber\n  };\n}\nfunction getBaseNftFromRaw(rawBaseNft, contractAddress) {\n  var _a;\n  return {\n    contract: contractAddress ? {\n      address: contractAddress\n    } : rawBaseNft.contract,\n    tokenId: BigNumber.from(rawBaseNft.id.tokenId).toString(),\n    tokenType: parseNftTokenType((_a = rawBaseNft.id.tokenMetadata) === null || _a === void 0 ? void 0 : _a.tokenType)\n  };\n}\nfunction getNftFromRaw(rawNft) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  try {\n    const tokenType = parseNftTokenType((_a = rawNft.id.tokenMetadata) === null || _a === void 0 ? void 0 : _a.tokenType);\n    const spamInfo = parseSpamInfo(rawNft.spamInfo);\n    return {\n      contract: {\n        address: rawNft.contract.address,\n        name: (_b = rawNft.contractMetadata) === null || _b === void 0 ? void 0 : _b.name,\n        symbol: (_c = rawNft.contractMetadata) === null || _c === void 0 ? void 0 : _c.symbol,\n        totalSupply: (_d = rawNft.contractMetadata) === null || _d === void 0 ? void 0 : _d.totalSupply,\n        tokenType,\n        openSea: parseOpenSeaMetadata((_e = rawNft.contractMetadata) === null || _e === void 0 ? void 0 : _e.openSea),\n        contractDeployer: (_f = rawNft.contractMetadata) === null || _f === void 0 ? void 0 : _f.contractDeployer,\n        deployedBlockNumber: (_g = rawNft.contractMetadata) === null || _g === void 0 ? void 0 : _g.deployedBlockNumber\n      },\n      tokenId: parseNftTokenId(rawNft.id.tokenId),\n      tokenType,\n      title: rawNft.title,\n      description: parseNftDescription(rawNft.description),\n      timeLastUpdated: rawNft.timeLastUpdated,\n      metadataError: rawNft.error,\n      rawMetadata: rawNft.metadata,\n      tokenUri: parseNftTokenUri(rawNft.tokenUri),\n      media: parseNftTokenUriArray(rawNft.media),\n      spamInfo,\n      acquiredAt: rawNft.acquiredAt\n    };\n  } catch (e) {\n    throw new Error('Error parsing the NFT response: ' + e);\n  }\n}\nfunction getNftSalesFromRaw(rawNftSales) {\n  var _a, _b;\n  return {\n    nftSales: rawNftSales.nftSales.map(rawNftSale => ({\n      marketplace: parseNftSaleMarketplace(rawNftSale.marketplace),\n      contractAddress: rawNftSale.contractAddress,\n      tokenId: rawNftSale.tokenId,\n      quantity: rawNftSale.quantity,\n      buyerAddress: rawNftSale.buyerAddress,\n      sellerAddress: rawNftSale.sellerAddress,\n      taker: parseNftTaker(rawNftSale.taker),\n      sellerFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.sellerFee,\n      marketplaceFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.protocolFee,\n      protocolFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.protocolFee,\n      royaltyFee: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.royaltyFee,\n      blockNumber: rawNftSale === null || rawNftSale === void 0 ? void 0 : rawNftSale.blockNumber,\n      logIndex: rawNftSale.logIndex,\n      bundleIndex: rawNftSale.bundleIndex,\n      transactionHash: rawNftSale.transactionHash\n    })),\n    validAt: {\n      blockNumber: rawNftSales.validAt.blockNumber,\n      blockHash: (_a = rawNftSales.validAt.blockHash) !== null && _a !== void 0 ? _a : undefined,\n      blockTimestamp: (_b = rawNftSales.validAt.blockTimestamp) !== null && _b !== void 0 ? _b : undefined\n    },\n    pageKey: rawNftSales === null || rawNftSales === void 0 ? void 0 : rawNftSales.pageKey\n  };\n}\nfunction parseNftSaleMarketplace(marketplace) {\n  switch (marketplace) {\n    case 'looksrare':\n      return NftSaleMarketplace.LOOKSRARE;\n    case 'seaport':\n      return NftSaleMarketplace.SEAPORT;\n    case 'x2y2':\n      return NftSaleMarketplace.X2Y2;\n    case 'wyvern':\n      return NftSaleMarketplace.WYVERN;\n    case 'cryptopunks':\n      return NftSaleMarketplace.CRYPTOPUNKS;\n    case 'blur':\n      return NftSaleMarketplace.BLUR;\n    default:\n      return NftSaleMarketplace.UNKNOWN;\n  }\n}\nfunction parseNftTaker(taker) {\n  // The `.toLowerCase()` call is needed because the API returns the capitalized values\n  switch (taker.toLowerCase()) {\n    case 'buyer':\n      return NftSaleTakerType.BUYER;\n    case 'seller':\n      return NftSaleTakerType.SELLER;\n    default:\n      throw new Error(`Unsupported NftSaleTakerType ${taker}`);\n  }\n}\nfunction getNftRarityFromRaw(rawNftRarity) {\n  return rawNftRarity.map(_ref => {\n    let {\n      prevalence,\n      trait_type,\n      value\n    } = _ref;\n    return {\n      prevalence,\n      traitType: trait_type,\n      value\n    };\n  });\n}\nfunction getContractsForOwnerFromRaw(rawContractsForOwner) {\n  return {\n    pageKey: rawContractsForOwner === null || rawContractsForOwner === void 0 ? void 0 : rawContractsForOwner.pageKey,\n    totalCount: rawContractsForOwner.totalCount,\n    contracts: rawContractsForOwner.contracts.map(contract => {\n      return {\n        address: contract.address,\n        totalSupply: contract.totalSupply,\n        isSpam: contract.isSpam,\n        media: contract.media,\n        numDistinctTokensOwned: contract.numDistinctTokensOwned,\n        tokenId: contract.tokenId,\n        totalBalance: contract.totalBalance,\n        name: contract.name,\n        title: contract.title,\n        openSea: parseOpenSeaMetadata(contract === null || contract === void 0 ? void 0 : contract.opensea),\n        symbol: contract === null || contract === void 0 ? void 0 : contract.symbol,\n        tokenType: parseNftTokenType(contract === null || contract === void 0 ? void 0 : contract.tokenType),\n        contractDeployer: contract.contractDeployer,\n        deployedBlockNumber: contract.deployedBlockNumber\n      };\n    })\n  };\n}\nfunction parseNftTokenId(tokenId) {\n  // We have to normalize the token id here since the backend sometimes\n  // returns the token ID as a hex string and sometimes as an integer.\n  return BigNumber.from(tokenId).toString();\n}\nfunction parseNftTokenType(tokenType) {\n  switch (tokenType) {\n    case 'erc721':\n    case 'ERC721':\n      return NftTokenType.ERC721;\n    case 'erc1155':\n    case 'ERC1155':\n      return NftTokenType.ERC1155;\n    case 'no_supported_nft_standard':\n    case 'NO_SUPPORTED_NFT_STANDARD':\n      return NftTokenType.NO_SUPPORTED_NFT_STANDARD;\n    case 'not_a_contract':\n    case 'NOT_A_CONTRACT':\n      return NftTokenType.NOT_A_CONTRACT;\n    default:\n      return NftTokenType.UNKNOWN;\n  }\n}\nfunction parseSpamInfo(spamInfo) {\n  if (!spamInfo) {\n    return undefined;\n  }\n  const {\n    isSpam,\n    classifications\n  } = spamInfo;\n  return {\n    isSpam: isSpam === 'true',\n    classifications\n  };\n}\nfunction parseNftDescription(description) {\n  if (description === undefined) {\n    return '';\n  }\n  // TODO: Remove after backend adds JSON stringification.\n  if (!Array.isArray(description) && typeof description === 'object') {\n    return JSON.stringify(description);\n  }\n  return typeof description === 'string' ? description : description.join(' ');\n}\nfunction parseNftTokenUri(uri) {\n  if (uri && uri.raw.length === 0 && uri.gateway.length == 0) {\n    return undefined;\n  }\n  return uri;\n}\nfunction parseNftTokenUriArray(arr) {\n  if (arr === undefined) {\n    return [];\n  }\n  return arr.filter(uri => parseNftTokenUri(uri) !== undefined);\n}\nfunction parseOpenSeaMetadata(openSea) {\n  if (openSea === undefined) {\n    return undefined;\n  }\n  return {\n    floorPrice: openSea.floorPrice,\n    collectionName: openSea.collectionName,\n    safelistRequestStatus: openSea.safelistRequestStatus !== undefined ? stringToEnum(openSea.safelistRequestStatus, OpenSeaSafelistRequestStatus) : undefined,\n    imageUrl: openSea.imageUrl,\n    description: openSea.description,\n    externalUrl: openSea.externalUrl,\n    twitterUsername: openSea.twitterUsername,\n    discordUrl: openSea.discordUrl,\n    lastIngestedAt: openSea.lastIngestedAt\n  };\n}\nconst IS_BROWSER = typeof window !== 'undefined' && window !== null;\n/** Recursively converts all `null` fields to `undefined. */\n// TODO: Add typing support so it doesn't return `any`.\nfunction nullsToUndefined(obj) {\n  if (obj === null) {\n    return undefined;\n  }\n  // if `obj` is an object, recursively convert all `null` fields to `undefined`.\n  if (typeof obj === 'object') {\n    for (const key in obj) {\n      obj[key] = nullsToUndefined(obj[key]);\n    }\n  }\n  return obj;\n}\n\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link CoreNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * CoreNamespace, or override the `srcMethod` param used for logging.\r\n */\n/**\r\n * Gets the asset transfers for the provided params.\r\n */\nfunction getAssetTransfers(config, params) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'getAssetTransfers';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    if (params.fromAddress) {\n      params.fromAddress = yield provider._getAddress(params.fromAddress);\n    }\n    if (params.toAddress) {\n      params.toAddress = yield provider._getAddress(params.toAddress);\n    }\n    return provider._send('alchemy_getAssetTransfers', [Object.assign(Object.assign({}, params), {\n      fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n      toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n      maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n    })], srcMethod);\n  });\n}\nfunction getTransactionReceipts(config, params) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'getTransactionReceipts';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    return provider._send('alchemy_getTransactionReceipts', [params], srcMethod);\n  });\n}\n/**\r\n * This method is based on the ethers implementation of getLogs, but is expanded\r\n * to support specifying an address array in the filter.\r\n *\r\n * The main modifications made to support an address array are:\r\n * - Custom `getFilter()` method that supports an address array\r\n * - Use of `arrayOf()` formatter to format the logs to avoid the `Formatter` import.\r\n * - Use of `provider.send()` to avoid formatting logic in `provider.perform()`.\r\n */\nfunction getLogs(config, filter) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    yield provider.getNetwork();\n    const params = yield resolveProperties({\n      filter: getFilter(config, filter)\n    });\n    const logs = yield provider.send('eth_getLogs', [params.filter]);\n    logs.forEach(log => {\n      if (log.removed == null) {\n        log.removed = false;\n      }\n    });\n    return arrayOf(provider.formatter.filterLog.bind(provider.formatter))(logs);\n  });\n}\n/**\r\n * This method is based on and copied from the ethers implementation of\r\n * `JsonRpcProvider._getFilter()`, but is extended to support an address array.\r\n *\r\n * This implementation is a hacky way to get around the ethers formatter. The\r\n * formatter is used to check the types of the `filter` params, but ethers does\r\n * not allow an array in the `address` field. To preserve the ethers formatter\r\n * on the other fields, we use the formatter to check the types of those other\r\n * fields, and then manually check the `address` field last.\r\n */\nfunction getFilter(config, filter) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    // START MODIFIED CODE\n    const provider = yield config.getProvider();\n    const resolvedFilter = yield filter;\n    let result = {};\n    // END MODIFIED CODE\n    ['blockHash', 'topics'].forEach(key => {\n      if (resolvedFilter[key] == null) {\n        return;\n      }\n      result[key] = resolvedFilter[key];\n    });\n    ['fromBlock', 'toBlock'].forEach(key => {\n      if (resolvedFilter[key] == null) {\n        return;\n      }\n      result[key] = provider._getBlockTag(resolvedFilter[key]);\n    });\n    // BEGIN MODIFIED CODE\n    // Format the `result` object using the ethers formatter without the `address`\n    // field.\n    result = provider.formatter.filter(yield resolveProperties(result));\n    // After formatting the other fields, manually format the `address` field\n    // before adding it to the `result` object.\n    if (Array.isArray(resolvedFilter.address)) {\n      result.address = yield Promise.all(resolvedFilter.address.map(address => __awaiter$1(this, void 0, void 0, function* () {\n        return provider._getAddress(address);\n      })));\n    } else if (resolvedFilter.address != null) {\n      result.address = yield provider._getAddress(resolvedFilter.address);\n    }\n    return result;\n    // END MODIFIED CODE\n  });\n}\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * This function is directly copied over from ethers implementation of\r\n * `Formatter.arrayOf()`. It is copied here to avoid having to import the\r\n * `Formatter` class or `FormatterFunc` type from ethers, that are not part of\r\n * the default export.\r\n *\r\n * This function returns a function that applies the formatter to an array of\r\n * values, and is used to format the logs returned by `getLogs()`.\r\n */\nfunction arrayOf(format) {\n  return function (array) {\n    if (!Array.isArray(array)) {\n      throw new Error('not an array');\n    }\n    const result = [];\n    array.forEach(value => {\n      result.push(format(value));\n    });\n    return result;\n  };\n}\n\n/**\r\n * The core namespace contains all commonly-used [Ethers.js\r\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\r\n * methods. If you are already using Ethers.js, you should be simply able to\r\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\r\n * provider methods and it should just work.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.core`.\r\n */\nclass CoreNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Returns the balance of a given address as of the provided block.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the balance for.\r\n   * @param blockTag The optional block number or hash to get the balance for.\r\n   *   Defaults to 'latest' if unspecified.\r\n   * @public\r\n   */\n  getBalance(addressOrName, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBalance(addressOrName, blockTag);\n    });\n  }\n  /**\r\n   * Checks if the provided address is a smart contract.\r\n   *\r\n   * @param address The address to check type for.\r\n   * @public\r\n   */\n  isContractAddress(address) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const code = yield provider.getCode(address);\n      return code !== '0x';\n    });\n  }\n  /**\r\n   * Returns the contract code of the provided address at the block. If there is\r\n   * no contract deployed, the result is `0x`.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the code for.\r\n   * @param blockTag The optional block number or hash to get the code for.\r\n   *   Defaults to 'latest' if unspecified.\r\n   * @public\r\n   */\n  getCode(addressOrName, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getCode(addressOrName, blockTag);\n    });\n  }\n  /**\r\n   * Return the value of the provided position at the provided address, at the\r\n   * provided block in `Bytes32` format.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the code for.\r\n   * @param position The position of the storage slot to get.\r\n   * @param blockTag The optional block number or hash to get the code for.\r\n   *   Defaults to 'latest' if unspecified.\r\n   * @public\r\n   */\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getStorageAt(addressOrName, position, blockTag);\n    });\n  }\n  /**\r\n   * Returns the number of transactions ever sent from the provided address, as\r\n   * of the provided block tag. This value is used as the nonce for the next\r\n   * transaction from the address sent to the network.\r\n   *\r\n   * @param addressOrName The address or name of the account to get the nonce for.\r\n   * @param blockTag The optional block number or hash to get the nonce for.\r\n   * @public\r\n   */\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransactionCount(addressOrName, blockTag);\n    });\n  }\n  /**\r\n   * Returns the block from the network based on the provided block number or\r\n   * hash. Transactions on the block are represented as an array of transaction\r\n   * hashes. To get the full transaction details on the block, use\r\n   * {@link getBlockWithTransactions} instead.\r\n   *\r\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n   * @public\r\n   */\n  getBlock(blockHashOrBlockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBlock(blockHashOrBlockTag);\n    });\n  }\n  /**\r\n   * Returns the block from the network based on the provided block number or\r\n   * hash. Transactions on the block are represented as an array of\r\n   * {@link TransactionResponse} objects.\r\n   *\r\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\r\n   * @public\r\n   */\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBlockWithTransactions(blockHashOrBlockTag);\n    });\n  }\n  /**\r\n   * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\r\n   *\r\n   * @public\r\n   */\n  getNetwork() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getNetwork();\n    });\n  }\n  /**\r\n   * Returns the block number of the most recently mined block.\r\n   *\r\n   * @public\r\n   */\n  getBlockNumber() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getBlockNumber();\n    });\n  }\n  /**\r\n   * Returns the best guess of the current gas price to use in a transaction.\r\n   *\r\n   * @public\r\n   */\n  getGasPrice() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getGasPrice();\n    });\n  }\n  /**\r\n   * Returns the recommended fee data to use in a transaction.\r\n   *\r\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n   * should be used.\r\n   *\r\n   * For legacy transactions and networks which do not support EIP-1559, the\r\n   * gasPrice should be used.\r\n   *\r\n   * @public\r\n   */\n  getFeeData() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getFeeData();\n    });\n  }\n  /**\r\n   * Returns a Promise which will stall until the network has heen established,\r\n   * ignoring errors due to the target node not being active yet.\r\n   *\r\n   * This can be used for testing or attaching scripts to wait until the node is\r\n   * up and running smoothly.\r\n   *\r\n   * @public\r\n   */\n  ready() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.ready;\n    });\n  }\n  /**\r\n   * Returns the result of executing the transaction, using call. A call does\r\n   * not require any ether, but cannot change any state. This is useful for\r\n   * calling getters on Contracts.\r\n   *\r\n   * @param transaction The transaction to execute.\r\n   * @param blockTag The optional block number or hash to get the call for.\r\n   * @public\r\n   */\n  call(transaction, blockTag) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.call(transaction, blockTag);\n    });\n  }\n  /**\r\n   * Returns an estimate of the amount of gas that would be required to submit\r\n   * transaction to the network.\r\n   *\r\n   * An estimate may not be accurate since there could be another transaction on\r\n   * the network that was not accounted for, but after being mined affects the\r\n   * relevant state.\r\n   *\r\n   * This is an alias for {@link TransactNamespace.estimateGas}.\r\n   *\r\n   * @param transaction The transaction to estimate gas for.\r\n   * @public\r\n   */\n  estimateGas(transaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.estimateGas(transaction);\n    });\n  }\n  /**\r\n   * Returns the transaction with hash or null if the transaction is unknown.\r\n   *\r\n   * If a transaction has not been mined, this method will search the\r\n   * transaction pool. Various backends may have more restrictive transaction\r\n   * pool access (e.g. if the gas price is too low or the transaction was only\r\n   * recently sent and not yet indexed) in which case this method may also return null.\r\n   *\r\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to get.\r\n   * @public\r\n   */\n  getTransaction(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransaction(transactionHash);\n    });\n  }\n  /**\r\n   * Returns the transaction receipt for hash or null if the transaction has not\r\n   * been mined.\r\n   *\r\n   * To stall until the transaction has been mined, consider the\r\n   * waitForTransaction method below.\r\n   *\r\n   * @param transactionHash The hash of the transaction to get.\r\n   * @public\r\n   */\n  getTransactionReceipt(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransactionReceipt(transactionHash);\n    });\n  }\n  /**\r\n   * Submits transaction to the network to be mined. The transaction must be\r\n   * signed, and be valid (i.e. the nonce is correct and the account has\r\n   * sufficient balance to pay for the transaction).\r\n   *\r\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n   *\r\n   * @param signedTransaction The signed transaction to send.\r\n   * @public\r\n   */\n  sendTransaction(signedTransaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.sendTransaction(signedTransaction);\n    });\n  }\n  /**\r\n   * Returns a promise which will not resolve until specified transaction hash is mined.\r\n   *\r\n   * If {@link confirmations} is 0, this method is non-blocking and if the\r\n   * transaction has not been mined returns null. Otherwise, this method will\r\n   * block until the transaction has confirmed blocks mined on top of the block\r\n   * in which it was mined.\r\n   *\r\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to wait for.\r\n   * @param confirmations The number of blocks to wait for.\r\n   * @param timeout The maximum time to wait for the transaction to confirm.\r\n   * @public\r\n   */\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.waitForTransaction(transactionHash, confirmations, timeout);\n    });\n  }\n  /**\r\n   * Returns an array of logs that match the provided filter.\r\n   *\r\n   * @param filter The filter object to use.\r\n   * @public\r\n   */\n  getLogs(filter) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getLogs(this.config, filter);\n    });\n  }\n  /**\r\n   * Allows sending a raw message to the Alchemy backend.\r\n   *\r\n   * @param method The method to call.\r\n   * @param params The parameters to pass to the method.\r\n   * @public\r\n   */\n  send(method, params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.send(method, params);\n    });\n  }\n  /**\r\n   * Finds the address that deployed the provided contract and block number it\r\n   * was deployed in.\r\n   *\r\n   * NOTE: This method performs a binary search across all blocks since genesis\r\n   * and can take a long time to complete. This method is a convenience method\r\n   * that will eventually be replaced by a single call to an Alchemy endpoint\r\n   * with this information cached.\r\n   *\r\n   * @param contractAddress - The contract address to find the deployer for.\r\n   * @beta\r\n   */\n  findContractDeployer(contractAddress) {\n    var _a;\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const currentBlockNum = yield provider.getBlockNumber();\n      if ((yield provider.getCode(contractAddress, currentBlockNum)) === ETH_NULL_VALUE) {\n        throw new Error(`Contract '${contractAddress}' does not exist`);\n      }\n      // Binary search for the block number that the contract was deployed in.\n      const firstBlock = yield binarySearchFirstBlock(0, currentBlockNum + 1, contractAddress, this.config);\n      // Find the first transaction in the block that matches the provided address.\n      const txReceipts = yield getTransactionReceipts(this.config, {\n        blockNumber: toHex(firstBlock)\n      }, 'findContractDeployer');\n      const matchingReceipt = (_a = txReceipts.receipts) === null || _a === void 0 ? void 0 : _a.find(receipt => receipt.contractAddress === contractAddress.toLowerCase());\n      return {\n        deployerAddress: matchingReceipt === null || matchingReceipt === void 0 ? void 0 : matchingReceipt.from,\n        blockNumber: firstBlock\n      };\n    });\n  }\n  getTokenBalances(addressOrName, contractAddressesOrOptions) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const address = yield provider._getAddress(addressOrName);\n      if (Array.isArray(contractAddressesOrOptions)) {\n        if (contractAddressesOrOptions.length > 1500) {\n          throw new Error('You cannot pass in more than 1500 contract addresses to getTokenBalances()');\n        }\n        if (contractAddressesOrOptions.length === 0) {\n          throw new Error('getTokenBalances() requires at least one contractAddress when using an array');\n        }\n        return provider._send('alchemy_getTokenBalances', [address, contractAddressesOrOptions], 'getTokenBalances');\n      } else {\n        const tokenType = contractAddressesOrOptions === undefined ? TokenBalanceType.ERC20 : contractAddressesOrOptions.type;\n        const params = [address, tokenType];\n        if ((contractAddressesOrOptions === null || contractAddressesOrOptions === void 0 ? void 0 : contractAddressesOrOptions.type) === TokenBalanceType.ERC20 && contractAddressesOrOptions.pageKey) {\n          params.push({\n            pageKey: contractAddressesOrOptions.pageKey\n          });\n        }\n        return provider._send('alchemy_getTokenBalances', params, 'getTokenBalances');\n      }\n    });\n  }\n  /**\r\n   * Returns the tokens that the specified address owns, along with the amount\r\n   * of each token and the relevant metadata.\r\n   *\r\n   * @param addressOrName The owner address to get the tokens with balances for.\r\n   * @param options Additional options to pass to the request.\r\n   * @public\r\n   */\n  getTokensForOwner(addressOrName, options) {\n    var _a;\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const address = yield provider._getAddress(addressOrName);\n      const params = [address, (_a = options === null || options === void 0 ? void 0 : options.contractAddresses) !== null && _a !== void 0 ? _a : TokenBalanceType.ERC20];\n      if (options === null || options === void 0 ? void 0 : options.pageKey) {\n        params.push({\n          pageKey: options.pageKey\n        });\n      }\n      const response = yield provider._send('alchemy_getTokenBalances', params, 'getTokensForOwner');\n      const formattedBalances = response.tokenBalances.map(balance => ({\n        contractAddress: balance.contractAddress,\n        rawBalance: BigNumber.from(balance.tokenBalance).toString()\n      }));\n      const metadataPromises = yield Promise.allSettled(response.tokenBalances.map(token => provider._send('alchemy_getTokenMetadata', [token.contractAddress], 'getTokensForOwner', /* forceBatch= */true)));\n      const metadata = metadataPromises.map(p => p.status === 'fulfilled' ? p.value : {\n        name: null,\n        symbol: null,\n        decimals: null,\n        logo: null\n      });\n      const ownedTokens = formattedBalances.map((balance, index) => Object.assign(Object.assign(Object.assign({}, balance), metadata[index]), {\n        balance: metadata[index].decimals !== null ? formatUnits(balance.rawBalance, metadata[index].decimals) : undefined\n      }));\n      return {\n        tokens: ownedTokens.map(nullsToUndefined),\n        pageKey: response.pageKey\n      };\n    });\n  }\n  /**\r\n   * Returns metadata for a given token contract address.\r\n   *\r\n   * @param address The contract address to get metadata for.\r\n   * @public\r\n   */\n  getTokenMetadata(address) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('alchemy_getTokenMetadata', [address], 'getTokenMetadata');\n    });\n  }\n  getAssetTransfers(params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getAssetTransfers(this.config, params);\n    });\n  }\n  /**\r\n   * Gets all transaction receipts for a given block by number or block hash.\r\n   *\r\n   * @param params An object containing fields for the transaction receipt query.\r\n   * @public\r\n   */\n  getTransactionReceipts(params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getTransactionReceipts(this.config, params);\n    });\n  }\n  /**\r\n   * Returns the underlying owner address for the provided ENS address, or `null`\r\n   * if the ENS name does not have an underlying address.\r\n   *\r\n   * @param name The ENS address name to resolve.\r\n   */\n  resolveName(name) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.resolveName(name);\n    });\n  }\n  /**\r\n   * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.\r\n   *\r\n   * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.\r\n   *\r\n   * @param address The address to look up the ENS domain name for.\r\n   */\n  lookupAddress(address) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.lookupAddress(address);\n    });\n  }\n}\n/**\r\n * Perform a binary search between an integer range of block numbers to find the\r\n * block number where the contract was deployed.\r\n *\r\n * @internal\r\n */\nfunction binarySearchFirstBlock(start, end, address, config) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    if (start >= end) {\n      return end;\n    }\n    const mid = Math.floor((start + end) / 2);\n    const provider = yield config.getProvider();\n    const code = yield provider.getCode(address, mid);\n    if (code === ETH_NULL_VALUE) {\n      return binarySearchFirstBlock(mid + 1, end, address, config);\n    }\n    return binarySearchFirstBlock(start, mid, address, config);\n  });\n}\n\n/**\r\n * The Debug namespace contains methods to access the non-standard RPC methods\r\n * for inspecting and debugging transactions.\r\n *\r\n * For more information on the different methods and use cases please read our\r\n * [documentation](https://docs.alchemy.com/reference/debug-api-quickstart).\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the debug namespace\r\n * via `alchemy.debug`.\r\n */\nclass DebugNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  traceCall(transaction, blockIdentifier, tracer) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = [transaction, blockIdentifier, parseTracerParams(tracer)];\n      return provider._send('debug_traceCall', params, 'traceCall');\n    });\n  }\n  traceTransaction(transactionHash, tracer, timeout) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = [transactionHash, parseTracerParams(tracer, timeout)];\n      return provider._send('debug_traceTransaction', params, 'traceTransaction');\n    });\n  }\n  traceBlock(blockIdentifier, tracer) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      let method;\n      let params;\n      if (isHexString(blockIdentifier, 32)) {\n        method = 'debug_traceBlockByHash';\n        params = [blockIdentifier, parseTracerParams(tracer)];\n      } else {\n        method = 'debug_traceBlockByNumber';\n        const block = typeof blockIdentifier === 'number' ? hexStripZeros(hexValue(blockIdentifier)) : blockIdentifier;\n        params = [block, parseTracerParams(tracer)];\n      }\n      return provider._send(method, params, 'traceBlock');\n    });\n  }\n}\nfunction parseTracerParams(tracer, timeout) {\n  return Object.assign({\n    tracer: tracer.type\n  }, tracer.onlyTopCall !== undefined && {\n    tracerConfig: {\n      onlyTopCall: tracer.onlyTopCall,\n      timeout\n    }\n  });\n}\nfunction sanitizeTokenType(tokenType) {\n  if (tokenType === NftTokenType.ERC1155 || tokenType === NftTokenType.ERC721) {\n    return tokenType;\n  }\n  return undefined;\n}\n\n/**\r\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\r\n * default, the log level is set to INFO.\r\n *\r\n * The order is a follows: DEBUG < INFO < WARN < ERROR\r\n *\r\n * All log types above the current log level will be outputted.\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 4] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nconst logLevelStringToEnum = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT\n};\n// HACKY: Use the console method as a string rather than the function itself\n// in order to allow for mocking in tests.\nconst logLevelToConsoleFn = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\n/**\r\n * Configures the verbosity of logging. The default log level is `info`.\r\n *\r\n * @param logLevel - The verbosity of logging. Can be any of the following values:\r\n *\r\n *   - `debug`: The most verbose logging level.\r\n *   - `info`: The default logging level.\r\n *   - `warn`: A logging level for non-critical issues.\r\n *   - `error`: A logging level for critical issues.\r\n *   - `silent`: Turn off all logging.\r\n *\r\n * @public\r\n */\nfunction setLogLevel(logLevel) {\n  loggerClient.logLevel = logLevelStringToEnum[logLevel];\n}\nfunction logDebug(message) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  loggerClient.debug(message, args);\n}\nfunction logInfo(message) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n  loggerClient.info(message, args);\n}\nfunction logWarn(message) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n  loggerClient.warn(message, args);\n}\nclass Logger {\n  constructor() {\n    /** The log level of the given Logger instance. */\n    this._logLevel = DEFAULT_LOG_LEVEL;\n  }\n  get logLevel() {\n    return this._logLevel;\n  }\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n  debug() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    this._log(LogLevel.DEBUG, ...args);\n  }\n  info() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    this._log(LogLevel.INFO, ...args);\n  }\n  warn() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    this._log(LogLevel.WARN, ...args);\n  }\n  error() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    this._log(LogLevel.ERROR, ...args);\n  }\n  /**\r\n   * Forwards log messages to their corresponding console counterparts if the\r\n   * log level allows it.\r\n   */\n  _log(logLevel) {\n    if (logLevel < this._logLevel) {\n      return;\n    }\n    const now = new Date().toISOString();\n    const method = logLevelToConsoleFn[logLevel];\n    if (method) {\n      for (var _len11 = arguments.length, args = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n        args[_key11 - 1] = arguments[_key11];\n      }\n      console[method](`[${now}] Alchemy:`, ...args.map(stringify));\n    } else {\n      throw new Error(`Logger received an invalid logLevel (value: ${logLevel})`);\n    }\n  }\n}\nfunction stringify(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return JSON.stringify(obj);\n    } catch (e) {\n      // Failed to convert to JSON, log the object directly.\n      return obj;\n    }\n  }\n}\n// Instantiate default logger for the SDK.\nconst loggerClient = new Logger();\n\n// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nconst VERSION = '2.12.0';\n\n/**\r\n * Given a REST endpoint, method, and params, sends the request with axios and\r\n * returns the response.\r\n */\n/**\r\n * Helper function to send http requests using Axis.\r\n *\r\n * @private\r\n */\nfunction sendAxiosRequest(baseUrl, restApiName, methodName, params, overrides) {\n  var _a;\n  const requestUrl = baseUrl + '/' + restApiName;\n  const config = Object.assign(Object.assign({}, overrides), {\n    headers: Object.assign(Object.assign(Object.assign({}, overrides === null || overrides === void 0 ? void 0 : overrides.headers), !IS_BROWSER && {\n      'Accept-Encoding': 'gzip'\n    }), {\n      'Alchemy-Ethers-Sdk-Version': VERSION,\n      'Alchemy-Ethers-Sdk-Method': methodName\n    }),\n    method: (_a = overrides === null || overrides === void 0 ? void 0 : overrides.method) !== null && _a !== void 0 ? _a : 'GET',\n    url: requestUrl,\n    params\n  });\n  return axios(config);\n}\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nconst DEFAULT_BACKOFF_MULTIPLIER = 1.5;\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\nconst DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\n/**\r\n * Helper class for implementing exponential backoff and max retry attempts.\r\n *\r\n * @private\r\n * @internal\r\n */\nclass ExponentialBackoff {\n  constructor() {\n    let maxAttempts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_BACKOFF_MAX_ATTEMPTS;\n    this.maxAttempts = maxAttempts;\n    this.initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    this.backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\n    this.maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n    this.numAttempts = 0;\n    this.currentDelayMs = 0;\n    this.isInBackoff = false;\n  }\n  /**\r\n   * Returns a promise that resolves after the the backoff delay. The delay is\r\n   * increased for each attempt. The promise is rejected if the maximum number\r\n   * of attempts is exceeded.\r\n   */\n  // TODO: beautify this into an async iterator.\n  backoff() {\n    if (this.numAttempts >= this.maxAttempts) {\n      return Promise.reject(new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`));\n    }\n    if (this.isInBackoff) {\n      return Promise.reject(new Error('A backoff operation is already in progress'));\n    }\n    const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\n    if (backoffDelayWithJitterMs > 0) {\n      logDebug('ExponentialBackoff.backoff', `Backing off for ${backoffDelayWithJitterMs}ms`);\n    }\n    // Calculate the next delay.\n    this.currentDelayMs *= this.backoffMultiplier;\n    this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\n    this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\n    this.numAttempts += 1;\n    return new Promise(resolve => {\n      this.isInBackoff = true;\n      setTimeout(() => {\n        this.isInBackoff = false;\n        resolve();\n      }, backoffDelayWithJitterMs);\n    });\n  }\n  /**\r\n   * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\r\n   *\r\n   * @private\r\n   * @param delayMs\r\n   */\n  withJitterMs(delayMs) {\n    return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\n  }\n}\n\n/**\r\n * A wrapper function to make http requests and retry if the request fails.\r\n *\r\n * @internal\r\n */\n// TODO: Wrap Axios error in AlchemyError.\nfunction requestHttpWithBackoff(config, apiType, restApiName, methodName, params, overrides) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    let lastError = undefined;\n    const backoff = new ExponentialBackoff(config.maxRetries);\n    for (let attempt = 0; attempt < config.maxRetries + 1; attempt++) {\n      try {\n        if (lastError !== undefined) {\n          logInfo('requestHttp', `Retrying after error: ${lastError.message}`);\n        }\n        try {\n          yield backoff.backoff();\n        } catch (err) {\n          // Backoff errors when the maximum number of attempts is reached. Break\n          // out of the loop to preserve the last error.\n          break;\n        }\n        const response = yield sendAxiosRequest(config._getRequestUrl(apiType), restApiName, methodName, params, Object.assign(Object.assign({}, overrides), {\n          timeout: config.requestTimeout\n        }));\n        if (response.status === 200) {\n          logDebug(restApiName, `Successful request: ${restApiName}`);\n          return response.data;\n        } else {\n          logInfo(restApiName, `Request failed: ${restApiName}, ${response.status}, ${response.data}`);\n          lastError = new Error(response.status + ': ' + response.data);\n        }\n      } catch (err) {\n        if (!axios.isAxiosError(err) || err.response === undefined) {\n          throw err;\n        }\n        // TODO: Standardize all errors into AlchemyError\n        lastError = new Error(err.response.status + ': ' + err.response.data);\n        if (!isRetryableHttpError(err, apiType)) {\n          break;\n        }\n      }\n    }\n    return Promise.reject(lastError);\n  });\n}\nfunction isRetryableHttpError(err, apiType) {\n  // TODO: remove 500s after webhooks are more stable.\n  const retryableCodes = apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];\n  return err.response !== undefined && retryableCodes.includes(err.response.status);\n}\n/**\r\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\r\n * represents the property name containing the next page token.\r\n *\r\n * @internal\r\n */\nfunction paginateEndpoint(config, apiType, restApiName, methodName, reqPageKey, resPageKey, params) {\n  return __asyncGenerator(this, arguments, function* paginateEndpoint_1() {\n    let hasNext = true;\n    const requestParams = Object.assign({}, params);\n    while (hasNext) {\n      const response = yield __await(requestHttpWithBackoff(config, apiType, restApiName, methodName, requestParams));\n      yield yield __await(response);\n      if (response[resPageKey] !== undefined) {\n        requestParams[reqPageKey] = response[resPageKey];\n      } else {\n        hasNext = false;\n      }\n    }\n  });\n}\n\n/**\r\n * This file contains the underlying implementations for exposed API surface in\r\n * the {@link NftNamespace}. By moving the methods out into a separate file,\r\n * other namespaces can access these methods without depending on the entire\r\n * NftNamespace.\r\n */\n/**\r\n * Get the NFT metadata for the provided contract address.\r\n */\nfunction getNftMetadata(config, contractAddress, tokenId, options) {\n  let srcMethod = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'getNftMetadata';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadata', srcMethod, {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString(),\n      tokenType: sanitizeTokenType(options === null || options === void 0 ? void 0 : options.tokenType),\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n      refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\n    });\n    return getNftFromRaw(response);\n  });\n}\nfunction getNftMetadataBatch(config, tokens, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const data = {\n      tokens,\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n      refreshCache: options === null || options === void 0 ? void 0 : options.refreshCache\n    };\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadataBatch', 'getNftMetadataBatch', {}, {\n      method: 'POST',\n      data\n    });\n    return response.map(getNftFromRaw);\n  });\n}\nfunction getContractMetadata(config, contractAddress) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'getContractMetadata';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractMetadata', srcMethod, {\n      contractAddress\n    });\n    return getNftContractFromRaw(response);\n  });\n}\nfunction getContractMetadataBatch(config, contractAddresses) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractMetadataBatch', 'getContractMetadataBatch', {}, {\n      method: 'POST',\n      data: {\n        contractAddresses\n      }\n    });\n    return response.map(getNftContractFromRaw);\n  });\n}\nfunction getNftsForOwnerIterator(config, owner, options) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'getNftsForOwnerIterator';\n  return __asyncGenerator(this, arguments, function* getNftsForOwnerIterator_1() {\n    var e_1, _a;\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    try {\n      for (var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, 'pageKey', 'pageKey', {\n          contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n          pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n          filters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n          owner,\n          withMetadata\n        })), _c; _c = yield __await(_b.next()), !_c.done;) {\n        const response = _c.value;\n        for (const ownedNft of response.ownedNfts) {\n          yield yield __await(Object.assign(Object.assign({}, nftFromGetNftResponse(ownedNft)), {\n            balance: parseInt(ownedNft.balance)\n          }));\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  });\n}\nfunction getNftsForOwner(config, owner, options) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'getNftsForOwner';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, {\n      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n      filters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n      excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n      includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n      owner,\n      pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\n      withMetadata,\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs,\n      orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n    });\n    return {\n      ownedNfts: response.ownedNfts.map(res => Object.assign(Object.assign({}, nftFromGetNftResponse(res)), {\n        balance: parseInt(res.balance)\n      })),\n      pageKey: response.pageKey,\n      totalCount: response.totalCount,\n      blockHash: response.blockHash\n    };\n  });\n}\nfunction getNftsForContract(config, contractAddress, options) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'getNftsForContract';\n  var _a;\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, {\n      contractAddress,\n      startToken: options === null || options === void 0 ? void 0 : options.pageKey,\n      withMetadata,\n      limit: (_a = options === null || options === void 0 ? void 0 : options.pageSize) !== null && _a !== void 0 ? _a : undefined,\n      tokenUriTimeoutInMs: options === null || options === void 0 ? void 0 : options.tokenUriTimeoutInMs\n    });\n    return {\n      nfts: response.nfts.map(res => nftFromGetNftContractResponse(res, contractAddress)),\n      pageKey: response.nextToken\n    };\n  });\n}\nfunction getNftsForContractIterator(config, contractAddress, options) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'getNftsForContractIterator';\n  return __asyncGenerator(this, arguments, function* getNftsForContractIterator_1() {\n    var e_2, _a;\n    const withMetadata = omitMetadataToWithMetadata(options === null || options === void 0 ? void 0 : options.omitMetadata);\n    try {\n      for (var _b = __asyncValues(paginateEndpoint(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, 'startToken', 'nextToken', {\n          contractAddress,\n          startToken: options === null || options === void 0 ? void 0 : options.pageKey,\n          withMetadata\n        })), _c; _c = yield __await(_b.next()), !_c.done;) {\n        const response = _c.value;\n        for (const nft of response.nfts) {\n          yield yield __await(nftFromGetNftContractResponse(nft, contractAddress));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  });\n}\nfunction getOwnersForContract(config, contractAddress, options) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'getOwnersForContract';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    // Cast to `any` to avoid more type wrangling.\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getOwnersForCollection', srcMethod, Object.assign(Object.assign({}, options), {\n      contractAddress\n    }));\n    return Object.assign({\n      owners: response.ownerAddresses,\n      totalCount: response.totalCount\n    }, response.pageKey !== undefined && {\n      pageKey: response.pageKey\n    });\n  });\n}\nfunction getContractsForOwner(config, owner, options) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'getContractsForOwner';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getContractsForOwner', srcMethod, {\n      owner,\n      excludeFilters: options === null || options === void 0 ? void 0 : options.excludeFilters,\n      includeFilters: options === null || options === void 0 ? void 0 : options.includeFilters,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey,\n      pageSize: options === null || options === void 0 ? void 0 : options.pageSize,\n      orderBy: options === null || options === void 0 ? void 0 : options.orderBy\n    });\n    return getContractsForOwnerFromRaw(response);\n  });\n}\nfunction getOwnersForNft(config, contractAddress, tokenId, options) {\n  let srcMethod = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'getOwnersForNft';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getOwnersForToken', srcMethod, Object.assign({\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString()\n    }, options));\n  });\n}\nfunction getMintedNfts(config, owner, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    const ownerAddress = yield provider._getAddress(owner);\n    const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\n    const params = {\n      fromBlock: '0x0',\n      fromAddress: ETH_NULL_ADDRESS,\n      toAddress: ownerAddress,\n      excludeZeroValue: true,\n      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n      category,\n      maxCount: 100,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n    };\n    const response = yield getAssetTransfers(config, params, 'getMintedNfts');\n    return getNftsForTransfers(config, response);\n  });\n}\nfunction getTransfersForOwner(config, owner, transferType, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const provider = yield config.getProvider();\n    const ownerAddress = yield provider._getAddress(owner);\n    const category = nftTokenTypeToCategory(options === null || options === void 0 ? void 0 : options.tokenType);\n    const params = {\n      fromBlock: '0x0',\n      excludeZeroValue: true,\n      contractAddresses: options === null || options === void 0 ? void 0 : options.contractAddresses,\n      category,\n      maxCount: 100,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n    };\n    if (transferType === GetTransfersForOwnerTransferType.TO) {\n      params.toAddress = ownerAddress;\n    } else {\n      params.fromAddress = ownerAddress;\n    }\n    const transfersResponse = yield getAssetTransfers(config, params, 'getTransfersForOwner');\n    return getNftsForTransfers(config, transfersResponse);\n  });\n}\nfunction getTransfersForContract(config, contract, options) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const category = [AssetTransfersCategory.ERC721, AssetTransfersCategory.ERC1155, AssetTransfersCategory.SPECIALNFT];\n    const provider = yield config.getProvider();\n    const fromBlock = (options === null || options === void 0 ? void 0 : options.fromBlock) ? provider.formatter.blockTag(yield provider._getBlockTag(options.fromBlock)) : '0x0';\n    const toBlock = (options === null || options === void 0 ? void 0 : options.toBlock) ? provider.formatter.blockTag(yield provider._getBlockTag(options.toBlock)) : undefined;\n    const params = {\n      fromBlock,\n      toBlock,\n      excludeZeroValue: true,\n      contractAddresses: [contract],\n      order: options === null || options === void 0 ? void 0 : options.order,\n      category,\n      maxCount: 100,\n      pageKey: options === null || options === void 0 ? void 0 : options.pageKey\n    };\n    const transfersResponse = yield getAssetTransfers(config, params, 'getTransfersForContract');\n    return getNftsForTransfers(config, transfersResponse);\n  });\n}\nfunction nftTokenTypeToCategory(tokenType) {\n  switch (tokenType) {\n    case NftTokenType.ERC721:\n      return [AssetTransfersCategory.ERC721];\n    case NftTokenType.ERC1155:\n      return [AssetTransfersCategory.ERC1155];\n    default:\n      return [AssetTransfersCategory.ERC721, AssetTransfersCategory.ERC1155, AssetTransfersCategory.SPECIALNFT];\n  }\n}\nfunction parse1155Transfer(transfer) {\n  return transfer.erc1155Metadata.map(metadata => ({\n    contractAddress: transfer.rawContract.address,\n    tokenId: metadata.tokenId,\n    tokenType: NftTokenType.ERC1155\n  }));\n}\nfunction checkNftOwnership(config, owner, contractAddresses) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'checkNftOwnership';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    if (contractAddresses.length === 0) {\n      throw new Error('Must provide at least one contract address');\n    }\n    const response = yield getNftsForOwner(config, owner, {\n      contractAddresses,\n      omitMetadata: true\n    }, srcMethod);\n    return response.ownedNfts.length > 0;\n  });\n}\nfunction verifyNftOwnership(config, owner, contractAddresses) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'verifyNftOwnership';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    if (typeof contractAddresses === 'string') {\n      const response = yield getNftsForOwner(config, owner, {\n        contractAddresses: [contractAddresses],\n        omitMetadata: true\n      }, srcMethod);\n      return response.ownedNfts.length > 0;\n    } else {\n      if (contractAddresses.length === 0) {\n        throw new Error('Must provide at least one contract address');\n      }\n      const response = yield getNftsForOwner(config, owner, {\n        contractAddresses,\n        omitMetadata: true\n      }, srcMethod);\n      // Create map where all input contract addresses are set to false, then flip\n      // owned nfts to true.\n      const result = contractAddresses.reduce((acc, curr) => {\n        acc[curr] = false;\n        return acc;\n      }, {});\n      for (const nft of response.ownedNfts) {\n        result[nft.contract.address] = true;\n      }\n      return result;\n    }\n  });\n}\nfunction isSpamContract(config, contractAddress) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'isSpamContract';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'isSpamContract', srcMethod, {\n      contractAddress\n    });\n  });\n}\nfunction getSpamContracts(config) {\n  let srcMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'getSpamContracts';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getSpamContracts', srcMethod, undefined);\n  });\n}\nfunction getFloorPrice(config, contractAddress) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'getFloorPrice';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getFloorPrice', srcMethod, {\n      contractAddress\n    });\n  });\n}\nfunction getNftSales(config) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'getNftSales';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    // Avoid ts compiler complaining about the contractAddress field.\n    const params = Object.assign({}, options);\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTSales', srcMethod, {\n      fromBlock: params === null || params === void 0 ? void 0 : params.fromBlock,\n      toBlock: params === null || params === void 0 ? void 0 : params.toBlock,\n      order: params === null || params === void 0 ? void 0 : params.order,\n      marketplace: params === null || params === void 0 ? void 0 : params.marketplace,\n      contractAddress: params === null || params === void 0 ? void 0 : params.contractAddress,\n      tokenId: (params === null || params === void 0 ? void 0 : params.tokenId) ? BigNumber.from(params === null || params === void 0 ? void 0 : params.tokenId).toString() : undefined,\n      sellerAddress: params === null || params === void 0 ? void 0 : params.sellerAddress,\n      buyerAddress: params === null || params === void 0 ? void 0 : params.buyerAddress,\n      taker: params === null || params === void 0 ? void 0 : params.taker,\n      limit: params === null || params === void 0 ? void 0 : params.limit,\n      pageKey: params === null || params === void 0 ? void 0 : params.pageKey\n    });\n    return getNftSalesFromRaw(response);\n  });\n}\nfunction computeRarity(config, contractAddress, tokenId, refreshCache) {\n  let srcMethod = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'computeRarity';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'computeRarity', srcMethod, {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString(),\n      refreshCache\n    });\n    return getNftRarityFromRaw(response);\n  });\n}\nfunction searchContractMetadata(config, query) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'searchContractMetadata';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'searchContractMetadata', srcMethod, {\n      query\n    });\n    return response.map(getNftContractFromRaw);\n  });\n}\nfunction summarizeNftAttributes(config, contractAddress, refreshCache) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'summarizeNftAttributes';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    return requestHttpWithBackoff(config, AlchemyApiType.NFT, 'summarizeNftAttributes', srcMethod, {\n      contractAddress,\n      refreshCache\n    });\n  });\n}\nfunction refreshNftMetadata(config, contractAddress, tokenId) {\n  let srcMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'refreshNftMetadata';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const tokenIdString = BigNumber.from(tokenId).toString();\n    const first = yield getNftMetadata(config, contractAddress, tokenIdString, undefined, srcMethod);\n    const second = yield refresh(config, contractAddress, tokenIdString, srcMethod);\n    return first.timeLastUpdated !== second.timeLastUpdated;\n  });\n}\nfunction refreshContract(config, contractAddress) {\n  let srcMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'refreshContract';\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'reingestContract', srcMethod, {\n      contractAddress\n    });\n    return {\n      contractAddress: response.contractAddress,\n      refreshState: parseReingestionState(response.reingestionState),\n      progress: response.progress\n    };\n  });\n}\nfunction refresh(config, contractAddress, tokenId, srcMethod) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const response = yield requestHttpWithBackoff(config, AlchemyApiType.NFT, 'getNFTMetadata', srcMethod, {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId).toString(),\n      refreshCache: true\n    });\n    return getNftFromRaw(response);\n  });\n}\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */\nfunction nftFromGetNftResponse(ownedNft) {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft);\n  }\n}\n/**\r\n * Helper method to convert a NFT response received from Alchemy backend to an\r\n * SDK NFT type.\r\n *\r\n * @internal\r\n */\nfunction nftFromGetNftContractResponse(ownedNft, contractAddress) {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft, contractAddress);\n  }\n}\n/** @internal */\n// TODO: more comprehensive type check\nfunction isNftWithMetadata(response) {\n  return response.title !== undefined;\n}\n/**\r\n * Given an AssetTransfersResponse, fetches the NFTs associated with the\r\n * transfers and collates them with transfer metadata.\r\n *\r\n * VISIBLE FOR TESTING\r\n */\nfunction getNftsForTransfers(config, response) {\n  return __awaiter$1(this, void 0, void 0, function* () {\n    const metadataTransfers = response.transfers.filter(transfer => transfer.rawContract.address !== null)\n    // Use flatMap to flatten 1155 transfers that contain multiple NFTs.\n    .flatMap(transfer => {\n      var _a;\n      const tokens = getTokensFromTransfer(transfer);\n      const metadata = {\n        from: transfer.from,\n        to: (_a = transfer.to) !== null && _a !== void 0 ? _a : undefined,\n        transactionHash: transfer.hash,\n        blockNumber: transfer.blockNum\n      };\n      return tokens.map(token => ({\n        metadata,\n        token\n      }));\n    });\n    if (metadataTransfers.length === 0) {\n      return {\n        nfts: []\n      };\n    }\n    // If we have more than 100 elements after unrolling 1155 transfers, split\n    // transfers into batches of 100 to stay under endpoint batch size limit.\n    const batchSize = 100;\n    const requestBatches = [];\n    for (let i = 0; i < metadataTransfers.length; i += batchSize) {\n      requestBatches.push(metadataTransfers.slice(i, i + batchSize));\n    }\n    const responseBatches = yield Promise.all(requestBatches.map(batch => getNftMetadataBatch(config, batch.map(transfer => transfer.token))));\n    const nfts = responseBatches.flat();\n    // The same NFT can be transferred multiple times in the same transfers response.\n    // We want to return one NFT for each transfer, so we create a mapping for\n    // each NFT to pair with the transfer metadata.\n    const nftsByTokenId = new Map();\n    nfts.forEach(nft => {\n      const key = `${nft.contract.address}-${BigNumber.from(nft.tokenId).toString()}`;\n      nftsByTokenId.set(key, nft);\n    });\n    const transferredNfts = metadataTransfers.map(t => {\n      const key = `${t.token.contractAddress}-${BigNumber.from(t.token.tokenId).toString()}`;\n      return Object.assign(Object.assign({}, nftsByTokenId.get(key)), t.metadata);\n    });\n    return {\n      nfts: transferredNfts,\n      pageKey: response.pageKey\n    };\n  });\n}\n/**\r\n * Returns the underlying NFT tokens from a transfer as the params for a\r\n * `getNftMetadataBatch` call. Handles the 1155 case where multiple NFTs can be\r\n * transferred in a single transaction.\r\n */\nfunction getTokensFromTransfer(transfer) {\n  // ERC1155 NFTs can contain multiple tokens in a single transfer, which\n  // requires special logic.\n  if (transfer.category === AssetTransfersCategory.ERC1155) {\n    return parse1155Transfer(transfer);\n  } else {\n    return [{\n      contractAddress: transfer.rawContract.address,\n      tokenId: transfer.tokenId,\n      tokenType: transfer.category === AssetTransfersCategory.ERC721 ? NftTokenType.ERC721 : undefined\n    }];\n  }\n}\n/**\r\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\r\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\r\n * to including metadata.\r\n *\r\n * @internal\r\n */\nfunction omitMetadataToWithMetadata(omitMetadata) {\n  return omitMetadata === undefined ? true : !omitMetadata;\n}\nfunction parseReingestionState(reingestionState) {\n  switch (reingestionState) {\n    case 'does_not_exist':\n      return RefreshState.DOES_NOT_EXIST;\n    case 'already_queued':\n      return RefreshState.ALREADY_QUEUED;\n    case 'in_progress':\n      return RefreshState.IN_PROGRESS;\n    case 'finished':\n      return RefreshState.FINISHED;\n    case 'queued':\n      return RefreshState.QUEUED;\n    case 'queue_failed':\n      return RefreshState.QUEUE_FAILED;\n    default:\n      throw new Error('Unknown reingestion state: ' + reingestionState);\n  }\n}\n\n/**\r\n * The NFT namespace contains all the functionality related to NFTs.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.nft`.\r\n */\nclass NftNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  getNftMetadata(contractAddress, tokenId, optionsOrTokenType, tokenUriTimeoutInMs) {\n    let options;\n    if (typeof optionsOrTokenType === 'object') {\n      options = {\n        tokenType: optionsOrTokenType.tokenType,\n        tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,\n        refreshCache: optionsOrTokenType.refreshCache\n      };\n    } else {\n      options = {\n        tokenType: optionsOrTokenType,\n        tokenUriTimeoutInMs\n      };\n    }\n    return getNftMetadata(this.config, contractAddress, tokenId, options);\n  }\n  /**\r\n   * Gets the NFT metadata for multiple NFT tokens.\r\n   *\r\n   * @param tokens An array of NFT tokens to fetch metadata for.\r\n   * @param options Configuration options for making the request.\r\n   */\n  getNftMetadataBatch(tokens, options) {\n    return getNftMetadataBatch(this.config, tokens, options);\n  }\n  /**\r\n   * Get the NFT contract metadata associated with the provided parameters.\r\n   *\r\n   * @param contractAddress - The contract address of the NFT.\r\n   * @public\r\n   */\n  getContractMetadata(contractAddress) {\n    return getContractMetadata(this.config, contractAddress);\n  }\n  /**\r\n   * Get the NFT contract metadata for multiple NFT contracts in a single request.\r\n   *\r\n   * @param contractAddresses - An array of contract addresses to fetch metadata for.\r\n   */\n  getContractMetadataBatch(contractAddresses) {\n    return getContractMetadataBatch(this.config, contractAddresses);\n  }\n  getNftsForOwnerIterator(owner, options) {\n    return getNftsForOwnerIterator(this.config, owner, options);\n  }\n  getNftsForOwner(owner, options) {\n    return getNftsForOwner(this.config, owner, options);\n  }\n  getNftsForContract(contractAddress, options) {\n    return getNftsForContract(this.config, contractAddress, options);\n  }\n  getNftsForContractIterator(contractAddress, options) {\n    return getNftsForContractIterator(this.config, contractAddress, options);\n  }\n  getOwnersForContract(contractAddress, options) {\n    return getOwnersForContract(this.config, contractAddress, options);\n  }\n  /**\r\n   * Gets all the owners for a given NFT contract address and token ID.\r\n   *\r\n   * @param contractAddress - The NFT contract address.\r\n   * @param tokenId - Token id of the NFT.\r\n   * @param options - Optional parameters to use for the request.\r\n   * @beta\r\n   */\n  getOwnersForNft(contractAddress, tokenId, options) {\n    return getOwnersForNft(this.config, contractAddress, tokenId, options);\n  }\n  /**\r\n   * Gets all NFT contracts held by the specified owner address.\r\n   *\r\n   * @param owner - Address for NFT owner (can be in ENS format!).\r\n   * @param options - The optional parameters to use for the request.\r\n   * @public\r\n   */\n  getContractsForOwner(owner, options) {\n    return getContractsForOwner(this.config, owner, options);\n  }\n  /**\r\n   * Gets all NFT transfers for a given owner's address.\r\n   *\r\n   * @param owner The owner to get transfers for.\r\n   * @param category Whether to get transfers to or from the owner address.\r\n   * @param options Additional options for the request.\r\n   */\n  getTransfersForOwner(owner, category, options) {\n    return getTransfersForOwner(this.config, owner, category, options);\n  }\n  /**\r\n   * Gets all NFT transfers for a given NFT contract address.\r\n   *\r\n   * Defaults to all transfers for the contract. To get transfers for a specific\r\n   * block range, use {@link GetTransfersForContractOptions}.\r\n   *\r\n   * @param contract The NFT contract to get transfers for.\r\n   * @param options Additional options for the request.\r\n   */\n  getTransfersForContract(contract, options) {\n    return getTransfersForContract(this.config, contract, options);\n  }\n  /**\r\n   * Get all the NFTs minted by a specified owner address.\r\n   *\r\n   * @param owner - Address for the NFT owner (can be in ENS format).\r\n   * @param options - The optional parameters to use for the request.\r\n   */\n  getMintedNfts(owner, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      return getMintedNfts(this.config, owner, options);\n    });\n  }\n  /**\r\n   * DEPRECATED - Checks that the provided owner address owns one of more of the\r\n   * provided NFTs.\r\n   *\r\n   * @deprecated - Use {@link verifyNftOwnership} instead. This method will be\r\n   *   removed in a future release.\r\n   * @param owner - The owner address to check.\r\n   * @param contractAddresses - An array of NFT contract addresses to check ownership for.\r\n   */\n  checkNftOwnership(owner, contractAddresses) {\n    return checkNftOwnership(this.config, owner, contractAddresses);\n  }\n  verifyNftOwnership(owner, contractAddress) {\n    return verifyNftOwnership(this.config, owner, contractAddress);\n  }\n  /**\r\n   * Returns whether a contract is marked as spam or not by Alchemy. For more\r\n   * information on how we classify spam, go to our NFT API FAQ at\r\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n   *\r\n   * @param contractAddress - The contract address to check.\r\n   * @beta\r\n   */\n  isSpamContract(contractAddress) {\n    return isSpamContract(this.config, contractAddress);\n  }\n  /**\r\n   * Returns a list of all spam contracts marked by Alchemy. For details on how\r\n   * Alchemy marks spam contracts, go to\r\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\r\n   *\r\n   * @beta\r\n   */\n  getSpamContracts() {\n    return getSpamContracts(this.config);\n  }\n  /**\r\n   * Returns the floor prices of a NFT contract by marketplace.\r\n   *\r\n   * @param contractAddress - The contract address for the NFT collection.\r\n   * @beta\r\n   */\n  getFloorPrice(contractAddress) {\n    return getFloorPrice(this.config, contractAddress);\n  }\n  getNftSales(options) {\n    return getNftSales(this.config, options);\n  }\n  /**\r\n   * Get the rarity of each attribute of an NFT.\r\n   *\r\n   * @param contractAddress - Contract address for the NFT collection.\r\n   * @param tokenId - Token id of the NFT.\r\n   * @param refreshCache - If true, bypass cache and recompute rarity snapshot.\r\n   */\n  computeRarity(contractAddress, tokenId, refreshCache) {\n    return computeRarity(this.config, contractAddress, tokenId, refreshCache);\n  }\n  /**\r\n   * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\r\n   *\r\n   * @param query - The search string that you want to search for in contract metadata.\r\n   */\n  searchContractMetadata(query) {\n    return searchContractMetadata(this.config, query);\n  }\n  /**\r\n   * Get a summary of attribute prevalence for an NFT collection.\r\n   *\r\n   * @param contractAddress - Contract address for the NFT collection.\r\n   * @param refreshCache - If true, bypass cache and recompute rarity snapshot.\r\n   */\n  summarizeNftAttributes(contractAddress, refreshCache) {\n    return summarizeNftAttributes(this.config, contractAddress, refreshCache);\n  }\n  /**\r\n   * Refreshes the cached metadata for a provided NFT contract address and token\r\n   * id. Returns a boolean value indicating whether the metadata was refreshed.\r\n   *\r\n   * This method is useful when you want to refresh the metadata for a NFT that\r\n   * has been updated since the last time it was fetched. Note that the backend\r\n   * only allows one refresh per token every 15 minutes, globally for all users.\r\n   * The last refresh time for an NFT can be accessed on the\r\n   * {@link Nft.timeLastUpdated} field.\r\n   *\r\n   * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\r\n   *\r\n   * @param contractAddress - The contract address of the NFT.\r\n   * @param tokenId - The token id of the NFT.\r\n   */\n  refreshNftMetadata(contractAddress, tokenId) {\n    return refreshNftMetadata(this.config, contractAddress, tokenId);\n  }\n  /**\r\n   * Triggers a metadata refresh all NFTs in the provided contract address. This\r\n   * method is useful after an NFT collection is revealed.\r\n   *\r\n   * Refreshes are queued on the Alchemy backend and may take time to fully\r\n   * process. To refresh the metadata for a specific token, use the\r\n   * {@link refreshNftMetadata} method instead.\r\n   *\r\n   * @param contractAddress - The contract address of the NFT collection.\r\n   * @beta\r\n   */\n  refreshContract(contractAddress) {\n    return refreshContract(this.config, contractAddress);\n  }\n}\n\n/**\r\n * The Notify namespace contains methods used for creating, reading, updating,\r\n * and deleting webhooks in the Notify API.\r\n *\r\n * To use the methods in the API, you must provide your team's auth token in the\r\n * {@link AlchemySettings.authToken} field when configuring\r\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\r\n * on the Notify tab.\r\n *\r\n * Note that not all networks are supported in the Notify API. Please consult\r\n * the documentation for which networks are supported.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the notify\r\n * namespace via `alchemy.notify`.\r\n */\nclass NotifyNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Get all webhooks on your team.\r\n   *\r\n   * The team is determined by the `authToken` provided into the {@link AlchemySettings}\r\n   * object when creating a new {@link Alchemy} instance.\r\n   *\r\n   * This method returns a response object containing all the webhooks\r\n   */\n  getAllWebhooks() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const response = yield this.sendWebhookRequest('team-webhooks', 'getAllWebhooks', {});\n      return {\n        webhooks: parseRawWebhookResponse(response),\n        totalCount: response.data.length\n      };\n    });\n  }\n  getAddresses(webhookOrId, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('webhook-addresses', 'getAddresses', {\n        webhook_id: webhookId,\n        limit: options === null || options === void 0 ? void 0 : options.limit,\n        after: options === null || options === void 0 ? void 0 : options.pageKey\n      });\n      return parseRawAddressActivityResponse(response);\n    });\n  }\n  getGraphqlQuery(webhookOrId) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('dashboard-webhook-graphql-query', 'getGraphqlQuery', {\n        webhook_id: webhookId\n      });\n      return parseRawCustomGraphqlWebhookResponse(response);\n    });\n  }\n  getNftFilters(webhookOrId, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('webhook-nft-filters', 'getNftFilters', {\n        webhook_id: webhookId,\n        limit: options === null || options === void 0 ? void 0 : options.limit,\n        after: options === null || options === void 0 ? void 0 : options.pageKey\n      });\n      return parseRawNftFiltersResponse(response);\n    });\n  }\n  updateWebhook(webhookOrId, update) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      let restApiName;\n      let methodName;\n      let method;\n      let data;\n      if ('isActive' in update) {\n        restApiName = 'update-webhook';\n        methodName = 'updateWebhook';\n        method = 'PUT';\n        data = {\n          webhook_id: webhookId,\n          is_active: update.isActive\n        };\n      } else if ('addFilters' in update || 'removeFilters' in update) {\n        restApiName = 'update-webhook-nft-filters';\n        methodName = 'updateWebhookNftFilters';\n        method = 'PATCH';\n        data = {\n          webhook_id: webhookId,\n          nft_filters_to_add: update.addFilters ? update.addFilters.map(nftFilterToParam) : [],\n          nft_filters_to_remove: update.removeFilters ? update.removeFilters.map(nftFilterToParam) : []\n        };\n      } else if ('addMetadataFilters' in update || 'removeMetadataFilters' in update) {\n        restApiName = 'update-webhook-nft-metadata-filters';\n        methodName = 'updateWebhookNftMetadataFilters';\n        method = 'PATCH';\n        data = {\n          webhook_id: webhookId,\n          nft_metadata_filters_to_add: update.addMetadataFilters ? update.addMetadataFilters.map(nftFilterToParam) : [],\n          nft_metadata_filters_to_remove: update.removeMetadataFilters ? update.removeMetadataFilters.map(nftFilterToParam) : []\n        };\n      } else if ('addAddresses' in update || 'removeAddresses' in update) {\n        restApiName = 'update-webhook-addresses';\n        methodName = 'webhook:updateWebhookAddresses';\n        method = 'PATCH';\n        data = {\n          webhook_id: webhookId,\n          addresses_to_add: yield this.resolveAddresses(update.addAddresses),\n          addresses_to_remove: yield this.resolveAddresses(update.removeAddresses)\n        };\n      } else if ('newAddresses' in update) {\n        restApiName = 'update-webhook-addresses';\n        methodName = 'webhook:updateWebhookAddress';\n        method = 'PUT';\n        data = {\n          webhook_id: webhookId,\n          addresses: yield this.resolveAddresses(update.newAddresses)\n        };\n      } else {\n        throw new Error('Invalid `update` param passed into `updateWebhook`');\n      }\n      yield this.sendWebhookRequest(restApiName, methodName, {}, {\n        method,\n        data\n      });\n    });\n  }\n  createWebhook(url, type, params) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      let appId;\n      if (type === WebhookType.MINED_TRANSACTION || type === WebhookType.DROPPED_TRANSACTION) {\n        if (!('appId' in params)) {\n          throw new Error('Transaction Webhooks require an app id.');\n        }\n        appId = params.appId;\n      }\n      let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\n      let nftFilterObj;\n      let addresses;\n      let graphqlQuery;\n      if (type === WebhookType.NFT_ACTIVITY || type === WebhookType.NFT_METADATA_UPDATE) {\n        if (!('filters' in params) || params.filters.length === 0) {\n          throw new Error('Nft Activity Webhooks require a non-empty array input.');\n        }\n        network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n        const filters = params.filters.map(filter => filter.tokenId ? {\n          contract_address: filter.contractAddress,\n          token_id: BigNumber.from(filter.tokenId).toString()\n        } : {\n          contract_address: filter.contractAddress\n        });\n        nftFilterObj = type === WebhookType.NFT_ACTIVITY ? {\n          nft_filters: filters\n        } : {\n          nft_metadata_filters: filters\n        };\n      } else if (type === WebhookType.ADDRESS_ACTIVITY) {\n        if (params === undefined || !('addresses' in params) || params.addresses.length === 0) {\n          throw new Error('Address Activity Webhooks require a non-empty array input.');\n        }\n        network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n        addresses = yield this.resolveAddresses(params.addresses);\n      } else if (type == WebhookType.GRAPHQL) {\n        if (params === undefined || !('graphqlQuery' in params) || params.graphqlQuery.length === 0) {\n          throw new Error('Custom Webhooks require a non-empty graphql query.');\n        }\n        network = params.network ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network) : network;\n        graphqlQuery = params.graphqlQuery;\n      }\n      const data = Object.assign(Object.assign(Object.assign(Object.assign({\n        network,\n        webhook_type: type,\n        webhook_url: url\n      }, appId && {\n        app_id: appId\n      }), nftFilterObj), addresses && {\n        addresses\n      }), graphqlQuery && {\n        graphql_query: graphqlQuery\n      });\n      const response = yield this.sendWebhookRequest('create-webhook', 'createWebhook', {}, {\n        method: 'POST',\n        data\n      });\n      return parseRawWebhook(response.data);\n    });\n  }\n  deleteWebhook(webhookOrId) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      this.verifyConfig();\n      const webhookId = typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n      const response = yield this.sendWebhookRequest('delete-webhook', 'deleteWebhook', {\n        webhook_id: webhookId\n      }, {\n        method: 'DELETE'\n      });\n      if ('message' in response) {\n        throw new Error(`Webhook not found. Failed to delete webhook: ${webhookId}`);\n      }\n    });\n  }\n  verifyConfig() {\n    if (this.config.authToken === undefined) {\n      throw new Error('Using the Notify API requires setting the Alchemy Auth Token in ' + 'the settings object when initializing Alchemy.');\n    }\n  }\n  sendWebhookRequest(restApiName, methodName, params, overrides) {\n    return requestHttpWithBackoff(this.config, AlchemyApiType.WEBHOOK, restApiName, methodName, params, Object.assign(Object.assign({}, overrides), {\n      headers: Object.assign({\n        'X-Alchemy-Token': this.config.authToken\n      }, overrides === null || overrides === void 0 ? void 0 : overrides.headers)\n    }));\n  }\n  /** Resolves ENS addresses to the raw address.\r\n   * @internal */\n  resolveAddresses(addresses) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (addresses === undefined) {\n        return [];\n      }\n      const resolvedAddresses = [];\n      const provider = yield this.config.getProvider();\n      for (const address of addresses) {\n        const rawAddress = yield provider.resolveName(address);\n        if (rawAddress === null) {\n          throw new Error(`Unable to resolve the ENS address: ${address}`);\n        }\n        resolvedAddresses.push(rawAddress);\n      }\n      return resolvedAddresses;\n    });\n  }\n}\n/**\r\n * Mapping of webhook network representations to the SDK's network representation.\r\n *\r\n * @internal\r\n */\nconst WEBHOOK_NETWORK_TO_NETWORK = {\n  ETH_MAINNET: Network.ETH_MAINNET,\n  ETH_GOERLI: Network.ETH_GOERLI,\n  ETH_SEPOLIA: Network.ETH_SEPOLIA,\n  ETH_ROPSTEN: Network.ETH_ROPSTEN,\n  ETH_RINKEBY: Network.ETH_RINKEBY,\n  ETH_KOVAN: Network.ETH_KOVAN,\n  MATIC_MAINNET: Network.MATIC_MAINNET,\n  MATIC_MUMBAI: Network.MATIC_MUMBAI,\n  ARB_MAINNET: Network.ARB_MAINNET,\n  ARB_GOERLI: Network.ARB_GOERLI,\n  ARB_RINKEBY: Network.ARB_RINKEBY,\n  OPT_MAINNET: Network.OPT_MAINNET,\n  OPT_GOERLI: Network.OPT_GOERLI,\n  OPT_KOVAN: Network.OPT_KOVAN\n};\n/** Mapping of the SDK's network representation the webhook API's network representation. */\nconst NETWORK_TO_WEBHOOK_NETWORK = Object.keys(Network).reduce((map, key) => {\n  if (key in WEBHOOK_NETWORK_TO_NETWORK) {\n    map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\n  }\n  return map;\n}, new Map());\nfunction parseRawWebhookResponse(response) {\n  return response.data.map(parseRawWebhook);\n}\nfunction parseRawWebhook(rawWebhook) {\n  return Object.assign({\n    id: rawWebhook.id,\n    network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network],\n    type: rawWebhook.webhook_type,\n    url: rawWebhook.webhook_url,\n    isActive: rawWebhook.is_active,\n    timeCreated: new Date(rawWebhook.time_created).toISOString(),\n    signingKey: rawWebhook.signing_key,\n    version: rawWebhook.version\n  }, rawWebhook.app_id !== undefined && {\n    appId: rawWebhook.app_id\n  });\n}\nfunction parseRawAddressActivityResponse(response) {\n  return {\n    addresses: response.data,\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\nfunction parseRawCustomGraphqlWebhookResponse(response) {\n  return {\n    graphqlQuery: response.data.graphql_query\n  };\n}\nfunction parseRawNftFiltersResponse(response) {\n  return {\n    filters: response.data.map(f => f.token_id ? {\n      contractAddress: f.contract_address,\n      tokenId: BigNumber.from(f.token_id).toString()\n    } : {\n      contractAddress: f.contract_address\n    }),\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\nfunction nftFilterToParam(filter) {\n  return filter.tokenId ? {\n    contract_address: filter.contractAddress,\n    token_id: BigNumber.from(filter.tokenId).toString()\n  } : {\n    contract_address: filter.contractAddress\n  };\n}\n\n/**\r\n * Multiples to increment fee per gas when using\r\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\r\n *\r\n * @internal\r\n */\nconst GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];\n/**\r\n * The Transact namespace contains methods used for sending transactions and\r\n * checking on the state of submitted transactions.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the transact\r\n * namespace via `alchemy.transact`.\r\n */\nclass TransactNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Used to send a single transaction to Flashbots. Flashbots will attempt to\r\n   * send the transaction to miners for the next 25 blocks.\r\n   *\r\n   * Returns the transaction hash of the submitted transaction.\r\n   *\r\n   * @param signedTransaction The raw, signed transaction as a hash.\r\n   * @param maxBlockNumber Optional highest block number in which the\r\n   *   transaction should be included.\r\n   * @param options Options to configure the request.\r\n   */\n  sendPrivateTransaction(signedTransaction, maxBlockNumber, options) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\n      return provider._send('eth_sendPrivateTransaction', [{\n        tx: signedTransaction,\n        maxBlockNumber: hexBlockNumber,\n        preferences: options\n      }], 'sendPrivateTransaction');\n    });\n  }\n  /**\r\n   * Stops the provided private transaction from being submitted for future\r\n   * blocks. A transaction can only be cancelled if the request is signed by the\r\n   * same key as the {@link sendPrivateTransaction} call submitting the\r\n   * transaction in first place.\r\n   *\r\n   * Please note that fast mode transactions cannot be cancelled using this method.\r\n   *\r\n   * Returns a boolean indicating whether the cancellation was successful.\r\n   *\r\n   * @param transactionHash Transaction hash of private tx to be cancelled\r\n   */\n  cancelPrivateTransaction(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('eth_cancelPrivateTransaction', [{\n        txHash: transactionHash\n      }], 'cancelPrivateTransaction');\n    });\n  }\n  /**\r\n   * Simulates the asset changes resulting from a list of transactions simulated\r\n   * in sequence.\r\n   *\r\n   * Returns a list of asset changes for each transaction during simulation.\r\n   *\r\n   * @param transactions Transactions list of max 3 transactions to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateAssetChangesBundle(transactions, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transactions, blockIdentifier] : [transactions];\n      const res = yield provider._send('alchemy_simulateAssetChangesBundle', params, 'simulateAssetChangesBundle');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Simulates the asset changes resulting from a single transaction.\r\n   *\r\n   * Returns list of asset changes that occurred during the transaction\r\n   * simulation. Note that this method does not run the transaction on the\r\n   * blockchain.\r\n   *\r\n   * @param transaction The transaction to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateAssetChanges(transaction, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transaction, blockIdentifier] : [transaction];\n      const res = yield provider._send('alchemy_simulateAssetChanges', params, 'simulateAssetChanges');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Simulates a list of transactions in sequence and returns list of decoded\r\n   * traces and logs that occurred for each transaction during simulation.\r\n   *\r\n   * Note that this method does not run any transactions on the blockchain.\r\n   *\r\n   * @param transactions Transactions list of max 3 transactions to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateExecutionBundle(transactions, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transactions, blockIdentifier] : [transactions];\n      const res = provider._send('alchemy_simulateExecutionBundle', params, 'simulateExecutionBundle');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Simulates a single transaction and the resulting and returns list of\r\n   * decoded traces and logs that occurred during the transaction simulation.\r\n   *\r\n   * Note that this method does not run the transaction on the blockchain.\r\n   *\r\n   * @param transaction The transaction to simulate.\r\n   * @param blockIdentifier Optional block identifier to simulate the\r\n   * transaction in.\r\n   */\n  simulateExecution(transaction, blockIdentifier) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const params = blockIdentifier !== undefined ? [transaction, blockIdentifier] : [transaction];\n      const res = provider._send('alchemy_simulateExecution', params, 'simulateExecution');\n      return nullsToUndefined(res);\n    });\n  }\n  /**\r\n   * Returns the transaction with hash or null if the transaction is unknown.\r\n   *\r\n   * If a transaction has not been mined, this method will search the\r\n   * transaction pool. Various backends may have more restrictive transaction\r\n   * pool access (e.g. if the gas price is too low or the transaction was only\r\n   * recently sent and not yet indexed) in which case this method may also return null.\r\n   *\r\n   * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to get.\r\n   * @public\r\n   */\n  getTransaction(transactionHash) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.getTransaction(transactionHash);\n    });\n  }\n  /**\r\n   * Submits transaction to the network to be mined. The transaction must be\r\n   * signed, and be valid (i.e. the nonce is correct and the account has\r\n   * sufficient balance to pay for the transaction).\r\n   *\r\n   * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\r\n   *\r\n   * @param signedTransaction The signed transaction to send.\r\n   * @public\r\n   */\n  sendTransaction(signedTransaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.sendTransaction(signedTransaction);\n    });\n  }\n  /**\r\n   * Returns an estimate of the amount of gas that would be required to submit\r\n   * transaction to the network.\r\n   *\r\n   * An estimate may not be accurate since there could be another transaction on\r\n   * the network that was not accounted for, but after being mined affects the\r\n   * relevant state.\r\n   *\r\n   * This is an alias for {@link CoreNamespace.estimateGas}.\r\n   *\r\n   * @param transaction The transaction to estimate gas for.\r\n   * @public\r\n   */\n  estimateGas(transaction) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.estimateGas(transaction);\n    });\n  }\n  /**\r\n   * Returns a fee per gas (in wei) that is an estimate of how much you can pay\r\n   * as a priority fee, or \"tip\", to get a transaction included in the current block.\r\n   *\r\n   * This number is generally used to set the `maxPriorityFeePerGas` field in a\r\n   * transaction request.\r\n   *\r\n   * @public\r\n   */\n  getMaxPriorityFeePerGas() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const feeHex = yield provider._send('eth_maxPriorityFeePerGas', [], 'getMaxPriorityFeePerGas');\n      return fromHex(feeHex);\n    });\n  }\n  /**\r\n   * Returns a promise which will not resolve until specified transaction hash is mined.\r\n   *\r\n   * If {@link confirmations} is 0, this method is non-blocking and if the\r\n   * transaction has not been mined returns null. Otherwise, this method will\r\n   * block until the transaction has confirmed blocks mined on top of the block\r\n   * in which it was mined.\r\n   *\r\n   * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\r\n   *\r\n   * @param transactionHash The hash of the transaction to wait for.\r\n   * @param confirmations The number of blocks to wait for.\r\n   * @param timeout The maximum time to wait for the transaction to confirm.\r\n   * @public\r\n   */\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider.waitForTransaction(transactionHash, confirmations, timeout);\n    });\n  }\n  sendGasOptimizedTransaction(transactionOrSignedTxs, wallet) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (Array.isArray(transactionOrSignedTxs)) {\n        return this._sendGasOptimizedTransaction(transactionOrSignedTxs, 'sendGasOptimizedTransactionPreSigned');\n      }\n      let gasLimit;\n      let priorityFee;\n      let baseFee;\n      const provider = yield this.config.getProvider();\n      try {\n        gasLimit = yield this.estimateGas(transactionOrSignedTxs);\n        priorityFee = yield this.getMaxPriorityFeePerGas();\n        const currentBlock = yield provider.getBlock('latest');\n        baseFee = currentBlock.baseFeePerGas.toNumber();\n      } catch (e) {\n        throw new Error(`Failed to estimate gas for transaction: ${e}`);\n      }\n      const gasSpreadTransactions = generateGasSpreadTransactions(transactionOrSignedTxs, gasLimit.toNumber(), baseFee, priorityFee);\n      const signedTransactions = yield Promise.all(gasSpreadTransactions.map(tx => wallet.signTransaction(tx)));\n      return this._sendGasOptimizedTransaction(signedTransactions, 'sendGasOptimizedTransactionGenerated');\n    });\n  }\n  /**\r\n   * Returns the state of the transaction job returned by the\r\n   * {@link sendGasOptimizedTransaction}.\r\n   *\r\n   * @param trackingId The tracking id from the response of the sent gas optimized transaction.\r\n   * @internal\r\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  getGasOptimizedTransactionStatus(trackingId) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('alchemy_getGasOptimizedTransactionStatus', [trackingId], 'getGasOptimizedTransactionStatus');\n    });\n  }\n  /** @internal */\n  _sendGasOptimizedTransaction(signedTransactions, methodName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      return provider._send('alchemy_sendGasOptimizedTransaction', [{\n        rawTransactions: signedTransactions\n      }], methodName);\n    });\n  }\n}\n/**\r\n * Helper method to generate the raw transaction with the given gas limit and\r\n * priority fee across a spread of different gas prices.\r\n *\r\n * @internal\r\n */\n// Visible for testing\nfunction generateGasSpreadTransactions(transaction, gasLimit, baseFee, priorityFee) {\n  return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map(feeMultiplier => {\n    return Object.assign(Object.assign({}, transaction), {\n      gasLimit,\n      maxFeePerGas: Math.round(baseFee * feeMultiplier + priorityFee * feeMultiplier),\n      maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee)\n    });\n  });\n}\n\n/** This file contains internal types used by the SDK and are not exposed to the end user. */\n/**\r\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\r\n * ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */\nconst ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE = 'alchemy-pending-transactions';\n/**\r\n * Prefix for `alchemy_minedTransactions` subscriptions when serializing to ethers events.\r\n *\r\n * This tag is used internally by ethers to track different event filters.\r\n */\nconst ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE = 'alchemy-mined-transactions';\n/**\r\n * Array containing all the custom event tags used internally by ethers to track\r\n * event filters.\r\n */\nconst ALCHEMY_EVENT_TYPES = [ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE, ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE];\n\n/**\r\n * DO NOT MODIFY.\r\n *\r\n * Event class copied directly over from ethers.js's `BaseProvider` class.\r\n *\r\n * This class is used to represent events and their corresponding listeners. The\r\n * SDK needs to extend this class in order to support Alchemy's custom\r\n * Subscription API types. The original class is not exported by ethers. Minimal\r\n * changes have been made in order to get TS to compile.\r\n */\nclass Event {\n  constructor(tag, listener, once) {\n    this.listener = listener;\n    this.tag = tag;\n    this.once = once;\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  get event() {\n    switch (this.type) {\n      case 'tx':\n        return this.hash;\n      case 'filter':\n        return this.filter;\n      default:\n        return this.tag;\n    }\n  }\n  get type() {\n    return this.tag.split(':')[0];\n  }\n  get hash() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'tx') {\n      throw new Error('Not a transaction event');\n    }\n    return comps[1];\n  }\n  get filter() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'filter') {\n      throw new Error('Not a transaction event');\n    }\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== '*') {\n      filter.address = address;\n    }\n    return filter;\n  }\n  pollable() {\n    const PollableEvents = ['block', 'network', 'pending', 'poll'];\n    return this.tag.indexOf(':') >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n/**\r\n * Wrapper class around the ethers `Event` class in order to add support for\r\n * Alchemy's custom subscriptions types.\r\n *\r\n * The serialization and deserialization mechanism requires the order of the\r\n * fields to be the same across different {@link ALCHEMY_EVENT_TYPES}. Before\r\n * using a getter on a new event filter, make sure that the position of the\r\n * field in serialization is correct.\r\n *\r\n * The getters on this class deserialize the event tag generated by\r\n * {@link getAlchemyEventTag} into the original fields passed into the event.\r\n */\nclass EthersEvent extends Event {\n  /**\r\n   * Converts the event tag into the original `fromAddress` field in\r\n   * {@link AlchemyPendingTransactionsEventFilter}.\r\n   */\n  get fromAddress() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n  /**\r\n   * Converts the event tag into the original `toAddress` field in\r\n   * {@link AlchemyPendingTransactionsEventFilter}.\r\n   */\n  get toAddress() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return deserializeAddressField(comps[2]);\n    } else {\n      return undefined;\n    }\n  }\n  /**\r\n   * Converts the event tag into the original `hashesOnly` field in\r\n   * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.\r\n   */\n  get hashesOnly() {\n    const comps = this.tag.split(':');\n    if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {\n      return undefined;\n    }\n    if (comps[3] && comps[3] !== '*') {\n      return comps[3] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n  get includeRemoved() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return comps[2] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n  get addresses() {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressesField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n}\nfunction isAlchemyEvent(event) {\n  return typeof event === 'object' && 'method' in event;\n}\n/**\r\n * Creates a string representation of an `alchemy_pendingTransaction`\r\n * subscription filter that is compatible with the ethers implementation of\r\n * `getEventTag()`. The method is not an exported function in ethers, which is\r\n * why the SDK has its own implementation.\r\n *\r\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\r\n *\r\n * @example\r\n *   ```js\r\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\r\n *   const eventTag =  getAlchemyEventTag(\r\n *   {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   });\r\n *   ```;\r\n *\r\n * @param event\r\n * @internal\r\n */\nfunction getAlchemyEventTag(event) {\n  if (!isAlchemyEvent(event)) {\n    throw new Error('Event tag requires AlchemyEventType');\n  }\n  if (event.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n    return serializePendingTransactionsEvent(event);\n  } else if (event.method === AlchemySubscription.MINED_TRANSACTIONS) {\n    return serializeMinedTransactionsEvent(event);\n  } else {\n    throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);\n  }\n}\nfunction verifyAlchemyEventName(eventName) {\n  if (!Object.values(AlchemySubscription).includes(eventName.method)) {\n    throw new Error(`Invalid method name ${eventName.method}. Accepted method names: ${Object.values(AlchemySubscription)}`);\n  }\n}\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_pendingTransactions\",\r\n *     \"fromAddress\": \"0xABC\",\r\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_pendingTransactions:0xABC:0xDEF|0xGHI:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n */\nfunction serializePendingTransactionsEvent(event) {\n  const fromAddress = serializeAddressField(event.fromAddress);\n  const toAddress = serializeAddressField(event.toAddress);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE + ':' + fromAddress + ':' + toAddress + ':' + hashesOnly;\n}\n/**\r\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\r\n * compatible event tag.\r\n *\r\n * For the example event:\r\n * ```\r\n *  {\r\n *     \"method\": \"alchemy_minedTransactions\",\r\n *     \"addresses\": [\r\n *       {\r\n *         from: \"0xABC\"\r\n *       },\r\n *       {\r\n *         to: \"0xDEF\",\r\n *         from: \"0x123\"\r\n *       }\r\n *     ]\r\n *     \"includeRemoved\": false\r\n *     \"hashesOnly: true\r\n *   }\r\n * ```\r\n *\r\n * The resulting serialization is:\r\n * `alchemy_minedTransactions:*,0xABC|0xDEF,0x123:false:true`\r\n *\r\n * If a field is omitted, it is replaced with a `*`.\r\n *\r\n * The `addresses` array is split by the '|' character, and each to/from address\r\n * pair is separated by a ',' character.\r\n *\r\n */\nfunction serializeMinedTransactionsEvent(event) {\n  const addresses = serializeAddressesField(event.addresses);\n  const includeRemoved = serializeBooleanField(event.includeRemoved);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE + ':' + addresses + ':' + includeRemoved + ':' + hashesOnly;\n}\nfunction serializeAddressesField(addresses) {\n  if (addresses === undefined) {\n    return '*';\n  }\n  return addresses.map(filter => serializeAddressField(filter.to) + ',' + serializeAddressField(filter.from)).join('|');\n}\nfunction serializeAddressField(field) {\n  if (field === undefined) {\n    return '*';\n  } else if (Array.isArray(field)) {\n    return field.join('|');\n  } else {\n    return field;\n  }\n}\nfunction serializeBooleanField(field) {\n  if (field === undefined) {\n    return '*';\n  } else {\n    return field.toString();\n  }\n}\nfunction deserializeTopics(data) {\n  if (data === '') {\n    return [];\n  }\n  return data.split(/&/g).map(topic => {\n    if (topic === '') {\n      return [];\n    }\n    const comps = topic.split('|').map(topic => {\n      return topic === 'null' ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction deserializeAddressField(data) {\n  if (data === '') {\n    return undefined;\n  }\n  const addresses = data.split('|');\n  return addresses.length === 1 ? addresses[0] : addresses;\n}\nfunction deserializeAddressesField(data) {\n  if (data === '') {\n    return undefined;\n  }\n  // Perform a cast here since TS doesn't know we're guaranteed a non-empty\n  // array from deserializing.\n  return data.split('|').map(addressStr => addressStr.split(',')).map(addressPair => Object.assign(Object.assign({}, addressPair[0] !== '*' && {\n    to: addressPair[0]\n  }), addressPair[1] !== '*' && {\n    from: addressPair[1]\n  }));\n}\n\n/**\r\n * The Websocket namespace contains all subscription related functions that\r\n * allow you to subscribe to events and receive updates as they occur. The\r\n * underlying WebSocket provider has additional logic to handle reconnections\r\n * and automatically backfills missed events.\r\n *\r\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\r\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\r\n * via `alchemy.ws`.\r\n */\nclass WebSocketNamespace {\n  /** @internal */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\r\n   * Adds a listener to be triggered for each {@link eventName} event. Also\r\n   * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\r\n   * how to use them.\r\n   *\r\n   * @param eventName The event to listen for.\r\n   * @param listener The listener to call when the event is triggered.\r\n   * @public\r\n   */\n  on(eventName, listener) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n      provider.on(processedEvent, listener);\n    }))();\n    return this;\n  }\n  /**\r\n   * Adds a listener to be triggered for only the next {@link eventName} event,\r\n   * after which it will be removed. Also includes Alchemy's Subscription API\r\n   * events. See {@link AlchemyEventType} for how to use them.\r\n   *\r\n   * @param eventName The event to listen for.\r\n   * @param listener The listener to call when the event is triggered.\r\n   * @public\r\n   */\n  once(eventName, listener) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n      provider.once(processedEvent, listener);\n    }))();\n    return this;\n  }\n  /**\r\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\r\n   * listener is provided, all listeners for the event will be removed.\r\n   *\r\n   * @param eventName The event to unlisten to.\r\n   * @param listener The listener to remove.\r\n   * @public\r\n   */\n  off(eventName, listener) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = yield this._resolveEnsAlchemyEvent(eventName);\n      return provider.off(processedEvent, listener);\n    }))();\n    return this;\n  }\n  /**\r\n   * Remove all listeners for the provided {@link eventName} event. If no event\r\n   * is provided, all events and their listeners are removed.\r\n   *\r\n   * @param eventName The event to remove all listeners for.\r\n   * @public\r\n   */\n  removeAllListeners(eventName) {\n    void (() => __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n      provider.removeAllListeners(processedEvent);\n    }))();\n    return this;\n  }\n  /**\r\n   * Returns the number of listeners for the provided {@link eventName} event. If\r\n   * no event is provided, the total number of listeners for all events is returned.\r\n   *\r\n   * @param eventName The event to get the number of listeners for.\r\n   * @public\r\n   */\n  listenerCount(eventName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n      return provider.listenerCount(processedEvent);\n    });\n  }\n  /**\r\n   * Returns an array of listeners for the provided {@link eventName} event. If\r\n   * no event is provided, all listeners will be included.\r\n   *\r\n   * @param eventName The event to get the listeners for.\r\n   */\n  listeners(eventName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getWebSocketProvider();\n      const processedEvent = eventName ? yield this._resolveEnsAlchemyEvent(eventName) : undefined;\n      return provider.listeners(processedEvent);\n    });\n  }\n  /**\r\n   * Converts ENS addresses in an Alchemy Event to the underlying resolved\r\n   * address.\r\n   *\r\n   * VISIBLE ONLY FOR TESTING.\r\n   *\r\n   * @internal\r\n   */\n  _resolveEnsAlchemyEvent(eventName) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (!isAlchemyEvent(eventName)) {\n        return eventName;\n      }\n      if (eventName.method === AlchemySubscription.MINED_TRANSACTIONS && eventName.addresses) {\n        const processedAddresses = [];\n        for (const address of eventName.addresses) {\n          if (address.to) {\n            address.to = yield this._resolveNameOrError(address.to);\n          }\n          if (address.from) {\n            address.from = yield this._resolveNameOrError(address.from);\n          }\n          processedAddresses.push(address);\n        }\n        eventName.addresses = processedAddresses;\n      } else if (eventName.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n        if (eventName.fromAddress) {\n          if (typeof eventName.fromAddress === 'string') {\n            eventName.fromAddress = yield this._resolveNameOrError(eventName.fromAddress);\n          } else {\n            eventName.fromAddress = yield Promise.all(eventName.fromAddress.map(address => this._resolveNameOrError(address)));\n          }\n        }\n        if (eventName.toAddress) {\n          if (typeof eventName.toAddress === 'string') {\n            eventName.toAddress = yield this._resolveNameOrError(eventName.toAddress);\n          } else {\n            eventName.toAddress = yield Promise.all(eventName.toAddress.map(address => this._resolveNameOrError(address)));\n          }\n        }\n      }\n      return eventName;\n    });\n  }\n  /**\r\n   * Converts the provided ENS address or throws an error. This improves code\r\n   * readability and type safety in other methods.\r\n   *\r\n   * VISIBLE ONLY FOR TESTING.\r\n   *\r\n   * @internal\r\n   */\n  _resolveNameOrError(name) {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      const provider = yield this.config.getProvider();\n      const resolved = yield provider.resolveName(name);\n      if (resolved === null) {\n        throw new Error(`Unable to resolve the ENS address: ${name}`);\n      }\n      return resolved;\n    });\n  }\n}\n\n/**\r\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\r\n * APIs and separates functionality into different namespaces.\r\n *\r\n * Each SDK instance is associated with a specific network and API key. To use a\r\n * different network or API key, create a new instance of {@link Alchemy}.\r\n *\r\n * @public\r\n */\nclass Alchemy {\n  /**\r\n   * @param {string} [settings.apiKey] - The API key to use for Alchemy\r\n   * @param {Network} [settings.network] - The network to use for Alchemy\r\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\r\n   * @param {number} [settings.requestTimeout] - The timeout after which request should fail\r\n   * @public\r\n   */\n  constructor(settings) {\n    this.config = new AlchemyConfig(settings);\n    this.core = new CoreNamespace(this.config);\n    this.nft = new NftNamespace(this.config);\n    this.ws = new WebSocketNamespace(this.config);\n    this.transact = new TransactNamespace(this.config);\n    this.notify = new NotifyNamespace(this.config);\n    this.debug = new DebugNamespace(this.config);\n  }\n}\n\n/**\r\n * The Wallet class inherits Signer and can sign transactions and messages using\r\n * a private key as a standard Externally Owned Account (EOA).\r\n *\r\n * SDK's custom implementation of Ethers.js's 'Wallet'.\r\n *\r\n * Primary difference from Ethers.js 'Wallet' is that you can pass in either a\r\n * Provider or an Alchemy object. This implementation will intelligently detect\r\n * the format and set the provider accordingly.\r\n *\r\n * @public\r\n * @override\r\n */\nclass Wallet extends Wallet$1 {\n  /**\r\n   * Overload permits users to pass in either a standard Provider or an Alchemy\r\n   * object. The constructor will detect the object type and handle appropriately.\r\n   *\r\n   * @override\r\n   */\n  constructor(privateKey, alchemyOrProvider) {\n    // If object passed in is a provider, send to super\n    let superProvider;\n    if (alchemyOrProvider && Provider.isProvider(alchemyOrProvider)) {\n      superProvider = alchemyOrProvider;\n    }\n    super(privateKey, superProvider);\n    // If object passed in is an Alchemy object, just set Alchemy\n    if (alchemyOrProvider && !Provider.isProvider(alchemyOrProvider)) {\n      this.alchemyProviderPromise = alchemyOrProvider.config.getProvider();\n    }\n  }\n  //////////////////////////////////////////////////////////////////\n  // Set of overrides from Signer to handle async provider retrieval.\n  //////////////////////////////////////////////////////////////////\n  /**\r\n   * Returns the balance of this wallet at blockTag.\r\n   *\r\n   * @param blockTag The block to check the balance of\r\n   * @override\r\n   */\n  getBalance(blockTag) {\n    return this.getWallet().then(wallet => wallet.getBalance(blockTag));\n  }\n  /**\r\n   * Returns the number of transactions this account has ever sent. This is the\r\n   * value required to be included in transactions as the nonce.\r\n   *\r\n   * @param blockTag The block to check the transaction count on\r\n   * @override\r\n   */\n  getTransactionCount(blockTag) {\n    return this.getWallet().then(wallet => wallet.getTransactionCount(blockTag));\n  }\n  /**\r\n   * Returns the result of estimating the cost to send the transactionRequest,\r\n   * with this account address being used as the from field.\r\n   *\r\n   * @param transaction Transaction to estimate the gas on\r\n   * @override\r\n   */\n  estimateGas(transaction) {\n    return this.getWallet().then(wallet => wallet.estimateGas(transaction));\n  }\n  /**\r\n   * Returns the result of calling using the transactionRequest, with this\r\n   * account address being used as the from field.\r\n   *\r\n   * @param transaction To make a call on\r\n   * @param blockTag The block to make the call on\r\n   * @override\r\n   */\n  call(transaction, blockTag) {\n    return this.getWallet().then(wallet => wallet.call(transaction, blockTag));\n  }\n  /**\r\n   * Populates ALL keys for a transaction and checks that `from` matches this\r\n   * `Signer`. Resolves ENS names and populates fields like `gasPrice`, `gasLimit`,\r\n   * `nonce`, and `chainId` if they are not provided.\r\n   *\r\n   * @param transaction The transaction to populate.\r\n   * @override\r\n   */\n  populateTransaction(transaction) {\n    return this.getWallet().then(wallet => wallet.populateTransaction(transaction));\n  }\n  /**\r\n   * Populates all fields in a transaction, signs it and sends it to the network\r\n   *\r\n   * @param transaction The transaction to send.\r\n   * @override\r\n   */\n  sendTransaction(transaction) {\n    return this.getWallet().then(wallet => wallet.sendTransaction(transaction));\n  }\n  /**\r\n   * Returns the chain ID this wallet is connected to.\r\n   *\r\n   * @override\r\n   */\n  getChainId() {\n    return this.getWallet().then(wallet => wallet.getChainId());\n  }\n  /**\r\n   * Returns the current gas price.\r\n   *\r\n   * @override\r\n   */\n  getGasPrice() {\n    return this.getWallet().then(wallet => wallet.getGasPrice());\n  }\n  /**\r\n   * Returns the current recommended FeeData to use in a transaction.\r\n   *\r\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\r\n   * should be used.\r\n   *\r\n   * For legacy transactions and networks which do not support EIP-1559, the\r\n   * gasPrice should be used.\r\n   *\r\n   * @override\r\n   */\n  getFeeData() {\n    return this.getWallet().then(wallet => wallet.getFeeData());\n  }\n  /**\r\n   * Looks up the address of name. If the name is not owned, or does not have a\r\n   * Resolver configured, or the Resolver does not have an address configured,\r\n   * null is returned.\r\n   *\r\n   * @param name Name of the ENS address\r\n   * @override\r\n   */\n  resolveName(name) {\n    return this.getWallet().then(wallet => wallet.resolveName(name));\n  }\n  getWallet() {\n    return __awaiter$1(this, void 0, void 0, function* () {\n      if (!this.alchemyProviderPromise) {\n        return this.connect(this.provider);\n      }\n      return this.connect(yield this.alchemyProviderPromise);\n    });\n  }\n}\n\n/**\r\n * The Contract class is a wrapper around the Contract class from ethers.js and\r\n * is exported here for convenience.\r\n *\r\n * @public\r\n */\n// TODO: support passing in Alchemy instance into the contract.\nclass Contract extends Contract$1 {}\n/**\r\n * The ContractFactory class is a wrapper around the ContractFactory class from\r\n * ethers.js and is exported here for convenience.\r\n *\r\n * @public\r\n */\nclass ContractFactory extends ContractFactory$1 {}\nexport { ALCHEMY_EVENT_TYPES as A, NftOrdering as B, CustomNetworks as C, DEFAULT_ALCHEMY_API_KEY as D, EthersNetwork as E, NftSaleMarketplace as F, GetTransfersForOwnerTransferType as G, NftSaleTakerType as H, IS_BROWSER as I, SimulateAssetType as J, SimulateChangeType as K, DecodingAuthority as L, DebugCallType as M, Network as N, OpenSeaSafelistRequestStatus as O, GasOptimizedTransactionStatus as P, WebhookVersion as Q, RefreshState as R, SortingOrder as S, TokenBalanceType as T, WebhookType as U, VERSION as V, Wallet as W, CommitmentLevel as X, DebugTracerType as Y, __awaiter$1 as _, DEFAULT_NETWORK as a, getAlchemyWsUrl as b, EthersEvent as c, deepCopy as d, getAlchemyEventTag as e, fromHex as f, getAlchemyHttpUrl as g, ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE as h, isAlchemyEvent as i, AlchemySubscription as j, ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE as k, logWarn as l, Alchemy as m, noop as n, Contract as o, ContractFactory as p, isHex as q, AssetTransfersCategory as r, setLogLevel as s, toHex as t, AssetTransfersOrder as u, verifyAlchemyEventName as v, NftTokenType as w, NftSpamClassification as x, NftExcludeFilters as y, NftFilters as z };","map":{"version":3,"mappings":"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","names":["Network","TokenBalanceType","AssetTransfersCategory","AssetTransfersOrder","NftTokenType","NftSpamClassification","NftExcludeFilters","NftFilters","NftOrdering","GetTransfersForOwnerTransferType","SortingOrder","NftSaleMarketplace","NftSaleTakerType","RefreshState","OpenSeaSafelistRequestStatus","AlchemySubscription","SimulateAssetType","SimulateChangeType","DecodingAuthority","DebugCallType","GasOptimizedTransactionStatus","WebhookVersion","WebhookType","CommitmentLevel","DebugTracerType","DEFAULT_ALCHEMY_API_KEY","ETH_MAINNET","DEFAULT_MAX_RETRIES","DEFAULT_REQUEST_TIMEOUT","getAlchemyHttpUrl","network","apiKey","getAlchemyNftHttpUrl","getAlchemyWsUrl","getAlchemyWebhookHttpUrl","AlchemyApiType","ETH_ROPSTEN","ETH_GOERLI","ETH_KOVAN","ETH_RINKEBY","ETH_SEPOLIA","OPT_MAINNET","OPT_KOVAN","OPT_GOERLI","OPT_SEPOLIA","ARB_MAINNET","ARB_RINKEBY","ARB_GOERLI","ARB_SEPOLIA","MATIC_MAINNET","MATIC_MUMBAI","ASTAR_MAINNET","POLYGONZKEVM_MAINNET","POLYGONZKEVM_TESTNET","BASE_MAINNET","BASE_GOERLI","BASE_SEPOLIA","chainId","name","sepolia","noop","ETH_NULL_VALUE","ETH_NULL_ADDRESS","AlchemyConfig","constructor","config","DEFAULT_NETWORK","maxRetries","url","authToken","batchRequests","requestTimeout","_getRequestUrl","apiType","undefined","NFT","WEBHOOK","getProvider","_baseAlchemyProvider","__awaiter","AlchemyProvider","getWebSocketProvider","_baseAlchemyWssProvider","AlchemyWebSocketProvider","version","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","Object","defineProperty","enumerable","value","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","from","this","thisArg","_arguments","P","generator","adopt","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","logger","defineReadOnly","object","resolveProperties","promises","map","v","results","all","reduce","accum","opaque","bigint","boolean","number","string","_isFrozen","Array","isArray","isFrozen","_deepCopy","freeze","item","deepCopy","fromHex","hexString","BigNumber","toNumber","toHex","num","toHexString","isHex","possibleHexString","test","formatBlock","block","Number","isInteger","stringToEnum","x","enumb","values","includes","getNftContractFromRaw","rawNftContract","address","contractMetadata","symbol","totalSupply","tokenType","parseNftTokenType","openSea","parseOpenSeaMetadata","contractDeployer","deployedBlockNumber","getBaseNftFromRaw","rawBaseNft","contractAddress","contract","tokenId","id","tokenMetadata","getNftFromRaw","rawNft","spamInfo","parseSpamInfo","parseNftTokenId","title","description","parseNftDescription","timeLastUpdated","metadataError","rawMetadata","metadata","tokenUri","parseNftTokenUri","media","parseNftTokenUriArray","acquiredAt","getNftSalesFromRaw","rawNftSales","nftSales","rawNftSale","marketplace","parseNftSaleMarketplace","quantity","buyerAddress","sellerAddress","taker","parseNftTaker","sellerFee","marketplaceFee","protocolFee","royaltyFee","blockNumber","logIndex","bundleIndex","transactionHash","validAt","blockHash","blockTimestamp","pageKey","LOOKSRARE","SEAPORT","X2Y2","WYVERN","CRYPTOPUNKS","BLUR","UNKNOWN","BUYER","SELLER","getNftRarityFromRaw","rawNftRarity","_ref","prevalence","trait_type","traitType","getContractsForOwnerFromRaw","rawContractsForOwner","totalCount","contracts","isSpam","numDistinctTokensOwned","totalBalance","opensea","ERC721","ERC1155","NO_SUPPORTED_NFT_STANDARD","NOT_A_CONTRACT","classifications","uri","raw","gateway","arr","filter","floorPrice","collectionName","safelistRequestStatus","imageUrl","externalUrl","twitterUsername","discordUrl","lastIngestedAt","IS_BROWSER","window","nullsToUndefined","obj","getAssetTransfers","srcMethod","provider","fromAddress","_getAddress","toAddress","_send","fromBlock","toBlock","maxCount","getTransactionReceipts","getLogs","getNetwork","getFilter","logs","send","removed","arrayOf","formatter","filterLog","bind","resolvedFilter","_getBlockTag","format","array","CoreNamespace","getBalance","addressOrName","blockTag","isContractAddress","getCode","getStorageAt","position","getTransactionCount","getBlock","blockHashOrBlockTag","getBlockWithTransactions","getBlockNumber","getGasPrice","getFeeData","ready","call","transaction","estimateGas","getTransaction","getTransactionReceipt","sendTransaction","signedTransaction","waitForTransaction","confirmations","timeout","method","findContractDeployer","currentBlockNum","firstBlock","binarySearchFirstBlock","txReceipts","matchingReceipt","receipts","find","receipt","deployerAddress","getTokenBalances","contractAddressesOrOptions","ERC20","type","getTokensForOwner","options","contractAddresses","response","formattedBalances","tokenBalances","balance","rawBalance","tokenBalance","metadataPromises","allSettled","token","p","status","decimals","logo","ownedTokens","index","formatUnits","tokens","getTokenMetadata","resolveName","lookupAddress","start","end","mid","Math","floor","DebugNamespace","traceCall","blockIdentifier","tracer","parseTracerParams","traceTransaction","traceBlock","isHexString","hexStripZeros","hexValue","onlyTopCall","tracerConfig","sanitizeTokenType","logLevelStringToEnum","WARN","ERROR","silent","SILENT","logLevelToConsoleFn","DEFAULT_LOG_LEVEL","loggerClient","logDebug","logInfo","logWarn","val","TypeError","now","Date","toISOString","VERSION","sendAxiosRequest","baseUrl","restApiName","methodName","overrides","requestUrl","headers","axios","DEFAULT_BACKOFF_INITIAL_DELAY_MS","DEFAULT_BACKOFF_MULTIPLIER","DEFAULT_BACKOFF_MAX_DELAY_MS","DEFAULT_BACKOFF_MAX_ATTEMPTS","ExponentialBackoff","maxAttempts","backoff","numAttempts","isInBackoff","backoffDelayWithJitterMs","withJitterMs","currentDelayMs","backoffMultiplier","max","initialDelayMs","min","maxDelayMs","setTimeout","delayMs","random","requestHttpWithBackoff","lastError","attempt","err","data","isAxiosError","isRetryableHttpError","retryableCodes","paginateEndpoint","reqPageKey","resPageKey","hasNext","requestParams","getNftMetadata","tokenUriTimeoutInMs","refreshCache","getNftMetadataBatch","getContractMetadata","getContractMetadataBatch","getNftsForOwnerIterator","owner","withMetadata","omitMetadataToWithMetadata","omitMetadata","filters","excludeFilters","ownedNft","ownedNfts","nftFromGetNftResponse","parseInt","getNftsForOwner","includeFilters","pageSize","orderBy","res","getNftsForContract","startToken","limit","nfts","nftFromGetNftContractResponse","nextToken","getNftsForContractIterator","nft","getOwnersForContract","owners","ownerAddresses","getContractsForOwner","getOwnersForNft","getMintedNfts","ownerAddress","category","nftTokenTypeToCategory","excludeZeroValue","getNftsForTransfers","getTransfersForOwner","transferType","TO","transfersResponse","getTransfersForContract","SPECIALNFT","order","parse1155Transfer","transfer","erc1155Metadata","rawContract","checkNftOwnership","verifyNftOwnership","acc","curr","isSpamContract","getSpamContracts","getFloorPrice","getNftSales","computeRarity","searchContractMetadata","query","summarizeNftAttributes","refreshNftMetadata","tokenIdString","first","second","refresh","refreshContract","refreshState","parseReingestionState","reingestionState","progress","isNftWithMetadata","metadataTransfers","transfers","flatMap","getTokensFromTransfer","to","hash","blockNum","batchSize","requestBatches","slice","responseBatches","batch","flat","nftsByTokenId","Map","set","transferredNfts","t","get","DOES_NOT_EXIST","ALREADY_QUEUED","IN_PROGRESS","FINISHED","QUEUED","QUEUE_FAILED","NftNamespace","optionsOrTokenType","NotifyNamespace","getAllWebhooks","verifyConfig","sendWebhookRequest","webhooks","parseRawWebhookResponse","getAddresses","webhookOrId","webhookId","webhook_id","after","parseRawAddressActivityResponse","getGraphqlQuery","parseRawCustomGraphqlWebhookResponse","getNftFilters","parseRawNftFiltersResponse","updateWebhook","update","is_active","isActive","nft_filters_to_add","addFilters","nftFilterToParam","nft_filters_to_remove","removeFilters","nft_metadata_filters_to_add","addMetadataFilters","nft_metadata_filters_to_remove","removeMetadataFilters","addresses_to_add","resolveAddresses","addAddresses","addresses_to_remove","removeAddresses","addresses","newAddresses","createWebhook","appId","MINED_TRANSACTION","DROPPED_TRANSACTION","NETWORK_TO_WEBHOOK_NETWORK","nftFilterObj","graphqlQuery","NFT_ACTIVITY","NFT_METADATA_UPDATE","contract_address","token_id","nft_filters","nft_metadata_filters","ADDRESS_ACTIVITY","GRAPHQL","webhook_type","webhook_url","app_id","graphql_query","parseRawWebhook","deleteWebhook","resolvedAddresses","rawAddress","WEBHOOK_NETWORK_TO_NETWORK","rawWebhook","timeCreated","time_created","signingKey","signing_key","pagination","total_count","cursors","f","GAS_OPTIMIZED_TX_FEE_MULTIPLES","TransactNamespace","sendPrivateTransaction","maxBlockNumber","hexBlockNumber","tx","preferences","cancelPrivateTransaction","txHash","simulateAssetChangesBundle","transactions","simulateAssetChanges","simulateExecutionBundle","simulateExecution","getMaxPriorityFeePerGas","feeHex","sendGasOptimizedTransaction","transactionOrSignedTxs","wallet","_sendGasOptimizedTransaction","gasLimit","priorityFee","baseFee","currentBlock","baseFeePerGas","gasSpreadTransactions","generateGasSpreadTransactions","signedTransactions","signTransaction","getGasOptimizedTransactionStatus","trackingId","rawTransactions","feeMultiplier","maxFeePerGas","round","maxPriorityFeePerGas","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","Event","tag","listener","once","_lastBlockNumber","_inflight","event","split","comps","topics","deserializeTopics","pollable","PollableEvents","indexOf","EthersEvent","deserializeAddressField","hashesOnly","ALCHEMY_EVENT_TYPES","includeRemoved","deserializeAddressesField","isAlchemyEvent","getAlchemyEventTag","PENDING_TRANSACTIONS","serializePendingTransactionsEvent","MINED_TRANSACTIONS","serializeMinedTransactionsEvent","verifyAlchemyEventName","eventName","serializeAddressField","serializeBooleanField","serializeAddressesField","field","topic","addressStr","addressPair","WebSocketNamespace","on","processedEvent","_resolveEnsAlchemyEvent","removeAllListeners","listenerCount","listeners","processedAddresses","_resolveNameOrError","resolved","Alchemy","settings","core","ws","transact","notify","Wallet","EthersWallet","alchemyOrProvider","superProvider","Provider","isProvider","privateKey","alchemyProviderPromise","getWallet","populateTransaction","getChainId","connect","Contract","EthersContract","ContractFactory","EthersContractFactory"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\types\\types.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\util\\const.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\alchemy-config.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\node_modules\\@ethersproject\\logger\\lib.esm\\_version.js","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\node_modules\\@ethersproject\\logger\\lib.esm\\index.js","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\node_modules\\@ethersproject\\properties\\lib.esm\\_version.js","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\node_modules\\@ethersproject\\properties\\lib.esm\\index.js","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\util.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\util\\util.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\internal\\core-api.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\core-namespace.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\debug-namespace.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\util\\inputSanitization.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\util\\logger.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\version.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\util\\sendRest.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\internal\\backoff.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\internal\\dispatch.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\internal\\nft-api.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\nft-namespace.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\notify-namespace.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\transact-namespace.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\internal\\internal-types.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\internal\\ethers-event.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\websocket-namespace.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\alchemy.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\alchemy-wallet.ts","D:\\Alchemy\\blockexplorer\\node_modules\\alchemy-sdk\\src\\api\\alchemy-contract.ts"],"sourcesContent":["import {\n  BlockTag,\n  EventType,\n  TransactionReceipt\n} from '@ethersproject/abstract-provider';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nimport { BaseNft, Nft, NftContract } from '../api/nft';\n\nexport * from './ethers-types';\n\n// TODO: separate this file into other files.\n\n/**\n * Options object used to configure the Alchemy SDK.\n *\n * @public\n */\nexport interface AlchemySettings {\n  /**\n   * The Alchemy API key that can be found in the Alchemy dashboard.\n   *\n   * Defaults to: \"demo\" (a rate-limited public API key)\n   */\n  apiKey?: string;\n\n  /**\n   * The name of the network. Once configured, the network cannot be changed. To\n   * use a different network, instantiate a new `Alchemy` instance.\n   *\n   * Defaults to: Network.ETH_MAINNET\n   */\n  network?: Network;\n\n  /** The maximum number of retries to attempt if a request fails. Defaults to 5. */\n  maxRetries?: number;\n\n  /**\n   * Optional URL endpoint to use for all requests. Setting this field will\n   * override the URL generated by the {@link network} and {@link apiKey} fields.\n   *\n   * This field is useful for testing or for using a custom node endpoint. Note\n   * that not all methods will work with custom URLs.\n   */\n  url?: string;\n\n  /**\n   * Alchemy auth token required to use the Notify API. This token can be found\n   * in the Alchemy Dashboard on the Notify tab.\n   */\n  authToken?: string;\n\n  /**\n   * Optional Request timeout provided in `ms` while using NFT and NOTIFY API.\n   * Default to 0 (No timeout).\n   */\n  requestTimeout?: number;\n\n  /**\n   * Optional setting that automatically batches and sends json-rpc requests for\n   * higher throughput and reduced network IO. Defaults to false.\n   *\n   * This implementation is based on the `JsonRpcBatchProvider` in ethers.\n   */\n  batchRequests?: boolean;\n}\n\n/**\n * The supported networks by Alchemy. Note that some functions are not available\n * on all networks. Please refer to the Alchemy documentation for which APIs are\n * available on which networks\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\n *\n * @public\n */\nexport enum Network {\n  ETH_MAINNET = 'eth-mainnet',\n  /** @deprecated - Will be removed in subsequent versions */\n  ETH_ROPSTEN = 'eth-ropsten',\n  ETH_GOERLI = 'eth-goerli',\n  /** @deprecated - Will be removed in subsequent versions */\n  ETH_KOVAN = 'eth-kovan',\n  /** @deprecated - Will be removed in subsequent versions */\n  ETH_RINKEBY = 'eth-rinkeby',\n  ETH_SEPOLIA = 'eth-sepolia',\n  OPT_MAINNET = 'opt-mainnet',\n  /** @deprecated - Will be removed in subsequent versions */\n  OPT_KOVAN = 'opt-kovan',\n  OPT_GOERLI = 'opt-goerli',\n  OPT_SEPOLIA = 'opt-sepolia',\n  ARB_MAINNET = 'arb-mainnet',\n  /** @deprecated - Will be removed in subsequent versions */\n  ARB_RINKEBY = 'arb-rinkeby',\n  ARB_GOERLI = 'arb-goerli',\n  ARB_SEPOLIA = 'arb-sepolia',\n  MATIC_MAINNET = 'polygon-mainnet',\n  MATIC_MUMBAI = 'polygon-mumbai',\n  ASTAR_MAINNET = 'astar-mainnet',\n  POLYGONZKEVM_MAINNET = 'polygonzkevm-mainnet',\n  POLYGONZKEVM_TESTNET = 'polygonzkevm-testnet',\n  BASE_MAINNET = 'base-mainnet',\n  BASE_GOERLI = 'base-goerli',\n  BASE_SEPOLIA = 'base-sepolia'\n}\n\n/** Token Types for the `getTokenBalances()` endpoint. */\nexport enum TokenBalanceType {\n  /**\n   * Option to fetch the top 100 tokens by 24-hour volume. This option is only\n   * available on Mainnet in Ethereum, Polygon, and Arbitrum.\n   */\n  DEFAULT_TOKENS = 'DEFAULT_TOKENS',\n\n  /**\n   * Option to fetch the set of ERC-20 tokens that the address as ever held. his\n   * list is produced by an address's historical transfer activity and includes\n   * all tokens that the address has ever received.\n   */\n  ERC20 = 'erc20'\n}\n\n/**\n * Optional params to pass into `getTokenBalances()` to fetch all ERC-20 tokens\n * instead of passing in an array of contract addresses to fetch balances for.\n */\nexport interface TokenBalancesOptionsErc20 {\n  /** The ERC-20 token type. */\n  type: TokenBalanceType.ERC20;\n\n  /** Optional page key for pagination (only applicable to TokenBalanceType.ERC20) */\n  pageKey?: string;\n}\n\n/**\n * Optional params to pass into `getTokenBalances()` to fetch the top 100 tokens\n * instead of passing in an array of contract addresses to fetch balances for.\n */\nexport interface TokenBalancesOptionsDefaultTokens {\n  /** The top 100 token type. */\n  type: TokenBalanceType.DEFAULT_TOKENS;\n}\n\n/**\n * Response object for when the {@link TokenBalancesOptionsErc20} options are\n * used. A page key may be returned if the provided address has many transfers.\n */\nexport interface TokenBalancesResponseErc20 extends TokenBalancesResponse {\n  /**\n   * An optional page key to passed into the next request to fetch the next page\n   * of token balances.\n   */\n  pageKey?: string;\n}\n\n/** @public */\nexport interface TokenBalancesResponse {\n  address: string;\n  tokenBalances: TokenBalance[];\n}\n\n/** @public */\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\n\n/** @public */\nexport interface TokenBalanceSuccess {\n  contractAddress: string;\n  tokenBalance: string;\n  error: null;\n}\n\n/** @public */\nexport interface TokenBalanceFailure {\n  contractAddress: string;\n  tokenBalance: null;\n  error: string;\n}\n\n/**\n * Optional params to pass into {@link CoreNamespace.getTokensForOwner}.\n */\nexport interface GetTokensForOwnerOptions {\n  /**\n   * List of contract addresses to filter by. If omitted, defaults to\n   * {@link TokenBalanceType.ERC20}.\n   */\n  contractAddresses?: string[] | TokenBalanceType;\n  /**\n   * Optional page key from an existing {@link GetTokensForOwnerResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Response object for {@link CoreNamespace.getTokensForOwner}.\n */\nexport interface GetTokensForOwnerResponse {\n  /** Owned tokens for the provided addresses along with relevant metadata. */\n  tokens: OwnedToken[];\n  /** Page key for the next page of results, if one exists. */\n  pageKey?: string;\n}\n\n/**\n * Represents an owned token on a {@link GetTokensForOwnerResponse}.\n */\nexport interface OwnedToken {\n  /** The contract address of the token. */\n  contractAddress: string;\n  /**\n   * The raw value of the balance field as a hex string. This value is undefined\n   * if the {@link error} field is present.\n   */\n  rawBalance?: string;\n  /**\n   * The formatted value of the balance field as a hex string. This value is\n   * undefined if the {@link error} field is present, or if the `decimals` field=\n   * is undefined.\n   */\n  balance?: string;\n  /** */\n  /**\n   * The token's name. Is undefined if the name is not defined in the contract and\n   * not available from other sources.\n   */\n  name?: string;\n  /**\n   * The token's symbol. Is undefined if the symbol is not defined in the contract\n   * and not available from other sources.\n   */\n  symbol?: string;\n  /**\n   * The number of decimals of the token. Is undefined if not defined in the\n   * contract and not available from other sources.\n   */\n  decimals?: number;\n  /** URL link to the token's logo. Is undefined if the logo is not available. */\n  logo?: string;\n  /**\n   * Error from fetching the token balances. If this field is defined, none of\n   * the other fields will be defined.\n   */\n  error?: string;\n}\n\n/**\n * Response object for the {@link CoreNamespace.getTokenMetadata} method.\n *\n * @public\n */\nexport interface TokenMetadataResponse {\n  /**\n   * The token's name. Is `null` if the name is not defined in the contract and\n   * not available from other sources.\n   */\n  name: string | null;\n\n  /**\n   * The token's symbol. Is `null` if the symbol is not defined in the contract\n   * and not available from other sources.\n   */\n  symbol: string | null;\n\n  /**\n   * The number of decimals of the token. Returns `null` if not defined in the\n   * contract and not available from other sources.\n   */\n  decimals: number | null;\n\n  /** URL link to the token's logo. Is `null` if the logo is not available. */\n  logo: string | null;\n}\n\n/**\n * Parameters for the {@link CoreNamespace.getAssetTransfers} method.\n *\n * @public\n */\nexport interface AssetTransfersParams {\n  /**\n   * The starting block to check for transfers. This value is inclusive and\n   * defaults to `0x0` if omitted.\n   */\n  fromBlock?: string;\n\n  /**\n   * The ending block to check for transfers. This value is inclusive and\n   * defaults to the latest block if omitted.\n   */\n  toBlock?: string;\n\n  /**\n   * Whether to return results in ascending or descending order by block number.\n   * Defaults to ascending if omitted.\n   */\n  order?: SortingOrder;\n\n  /**\n   * The from address to filter transfers by. This value defaults to a wildcard\n   * for all addresses if omitted.\n   */\n  fromAddress?: string;\n\n  /**\n   * The to address to filter transfers by. This value defaults to a wildcard\n   * for all address if omitted.\n   */\n  toAddress?: string;\n\n  /**\n   * List of contract addresses to filter for - only applies to \"erc20\",\n   * \"erc721\", \"erc1155\" transfers. Defaults to all address if omitted.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Whether to exclude transfers with zero value. Note that zero value is\n   * different than null value. Defaults to `true` if omitted.\n   */\n  excludeZeroValue?: boolean;\n\n  /** REQUIRED field. An array of categories to get transfers for. */\n  category: AssetTransfersCategory[];\n\n  /** The maximum number of results to return per page. Defaults to 1000 if omitted. */\n  maxCount?: number;\n\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse}\n   * {@link AssetTransfersResult}to use for pagination.\n   */\n  pageKey?: string;\n\n  /**\n   * Whether to include additional metadata about each transfer event. Defaults\n   * to `false` if omitted.\n   */\n  withMetadata?: boolean;\n}\n\n/**\n * Parameters for the {@link CoreNamespace.getAssetTransfers} method that\n * includes metadata.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataParams extends AssetTransfersParams {\n  withMetadata: true;\n}\n\n/**\n * Categories of transfers to use with the {@link AssetTransfersParams} request\n * object when using {@link CoreNamespace.getAssetTransfers}.\n *\n * @public\n */\nexport enum AssetTransfersCategory {\n  /**\n   * Top level ETH transactions that occur where the `fromAddress` is an\n   * external user-created address. External addresses have private keys and are\n   * accessed by users.\n   */\n  EXTERNAL = 'external',\n\n  /**\n   * Top level ETH transactions that occur where the `fromAddress` is an\n   * internal, smart contract address. For example, a smart contract calling\n   * another smart contract or sending\n   */\n  INTERNAL = 'internal',\n\n  /** ERC20 transfers. */\n  ERC20 = 'erc20',\n\n  /** ERC721 transfers. */\n  ERC721 = 'erc721',\n\n  /** ERC1155 transfers. */\n  ERC1155 = 'erc1155',\n\n  /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */\n  SPECIALNFT = 'specialnft'\n}\n\n/**\n * Enum for the order of the {@link AssetTransfersParams} request object when\n * using {@link CoreNamespace.getAssetTransfers}.\n *\n * @deprecated Use {@link SortingOrder} instead. This enum will be removed in a\n *   future version.\n * @public\n */\nexport enum AssetTransfersOrder {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * An enum for specifying the token type on NFTs.\n *\n * @public\n */\nexport enum NftTokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  NO_SUPPORTED_NFT_STANDARD = 'NO_SUPPORTED_NFT_STANDARD',\n  NOT_A_CONTRACT = 'NOT_A_CONTRACT',\n  UNKNOWN = 'UNKNOWN'\n}\n\n/**\n * Response object for the {@link CoreNamespace.getAssetTransfers} method.\n *\n * @public\n */\nexport interface AssetTransfersResponse {\n  transfers: AssetTransfersResult[];\n  /** Page key for the next page of results, if one exists. */\n  pageKey?: string;\n}\n\n/**\n * Response object for the {@link CoreNamespace.getAssetTransfers} method when\n * the {@link AssetTransfersWithMetadataParams} are used.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataResponse {\n  transfers: AssetTransfersWithMetadataResult[];\n  pageKey?: string;\n}\n\n/**\n * Represents a transfer event that is returned in a {@link AssetTransfersResponse}.\n *\n * @public\n */\nexport interface AssetTransfersResult {\n  /** The unique ID of the transfer. */\n  uniqueId: string;\n\n  /** The category of the transfer. */\n  category: AssetTransfersCategory;\n\n  /** The block number where the transfer occurred. */\n  blockNum: string;\n\n  /** The from address of the transfer. */\n  from: string;\n\n  /** The to address of the transfer. */\n  to: string | null;\n\n  /**\n   * Converted asset transfer value as a number (raw value divided by contract\n   * decimal). `null` if ERC721 transfer or contract decimal not available.\n   */\n  value: number | null;\n\n  /**\n   * The raw ERC721 token id of the transfer as a hex string. `null` if not an\n   * ERC721 transfer.\n   */\n  erc721TokenId: string | null;\n\n  /**\n   * A list of ERC1155 metadata objects if the asset transferred is an ERC1155\n   * token. `null` if not an ERC1155 transfer.\n   */\n  erc1155Metadata: ERC1155Metadata[] | null;\n\n  /** The token id of the token transferred. */\n  tokenId: string | null;\n\n  /**\n   * Returns the token's symbol or ETH for other transfers. `null` if the\n   * information was not available.\n   */\n  asset: string | null;\n\n  /** The transaction hash of the transfer transaction. */\n  hash: string;\n\n  /** Information about the raw contract of the asset transferred. */\n  rawContract: RawContract;\n}\n\n/**\n * Represents a transfer event that is returned in a\n * {@link AssetTransfersResponse} when {@link AssetTransfersWithMetadataParams} are used.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataResult extends AssetTransfersResult {\n  /** Additional metadata about the transfer event. */\n  metadata: AssetTransfersMetadata;\n}\n\n/**\n * The metadata object for a {@link AssetTransfersResult} when the\n * {@link AssetTransfersParams.withMetadata} field is set to true.\n *\n * @public\n */\nexport interface AssetTransfersMetadata {\n  /** Timestamp of the block from which the transaction event originated. */\n  blockTimestamp: string;\n}\n\n/**\n * Represents NFT metadata that holds fields. Note that since there is no\n * standard metadata format, the fields are not guaranteed to be present.\n *\n * @public\n */\nexport interface NftMetadata extends Record<string, any> {\n  /** Name of the NFT asset. */\n  name?: string;\n\n  /** A human-readable description of the NFT asset. */\n  description?: string;\n\n  /** URL to the NFT asset image. */\n  image?: string;\n\n  /**\n   * The image URL that appears along the top of the NFT asset page. This tends\n   * to be the highest resolution image.\n   */\n  external_url?: string;\n\n  /** Background color of the NFT item. Usually defined as a 6 character hex string. */\n  background_color?: string;\n\n  /** The traits, attributes, and characteristics for the NFT asset. */\n  attributes?: Array<Record<string, any>>;\n}\n\n/**\n * Represents the URI information the NFT's metadata.\n *\n * @public\n */\nexport interface TokenUri {\n  /**\n   * URI for the location of the NFT's original metadata blob (ex: the original\n   * IPFS link).\n   */\n  raw: string;\n\n  /** Public gateway URI for the raw URI. Generally offers better performance. */\n  gateway: string;\n}\n\n/**\n * Represents the URI information for the NFT's media assets.\n *\n * @public\n */\nexport interface Media {\n  /**\n   * URI for the location of the NFT's original metadata blob for media (ex: the\n   * original IPFS link).\n   */\n  raw: string;\n\n  /** Public gateway URI for the raw URI. Generally offers better performance. */\n  gateway: string;\n\n  /** URL for a resized thumbnail of the NFT media asset. */\n  thumbnail?: string;\n\n  /**\n   * The media format (ex: jpg, gif, png) of the {@link gateway} and\n   * {@link thumbnail} assets.\n   */\n  format?: string;\n\n  /**\n   * DEPRECATED - The size of the media asset in bytes\n   *\n   * @deprecated - Please use {@link bytes} instead. This field will be removed\n   *   in a subsequent release.\n   */\n  size?: number;\n\n  /** The size of the media asset in bytes. */\n  bytes?: number;\n}\n\n/** Potential reasons why an NFT contract was classified as spam. */\nexport enum NftSpamClassification {\n  Erc721TooManyOwners = 'Erc721TooManyOwners',\n  Erc721TooManyTokens = 'Erc721TooManyTokens',\n  Erc721DishonestTotalSupply = 'Erc721DishonestTotalSupply',\n  MostlyHoneyPotOwners = 'MostlyHoneyPotOwners',\n  OwnedByMostHoneyPots = 'OwnedByMostHoneyPots'\n}\n\n/** Detailed information on whether and why an NFT contract was classified as spam. */\nexport interface SpamInfo {\n  isSpam: boolean;\n\n  /** A list of reasons why an NFT contract was marked as spam. */\n  classifications: NftSpamClassification[];\n}\n\n/** Block time and number at which an NFT was acquired. */\nexport interface AcquiredAt {\n  /** Timestamp of the block at which an NFT was last acquired. */\n  blockTimestamp?: string;\n\n  /** Block number of the block at which an NFT was last acquired. */\n  blockNumber?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions.\n *\n * This interface is used to fetch NFTs with their associated metadata. To get\n * Nfts without their associated metadata, use {@link GetBaseNftsForOwnerOptions}.\n *\n * @public\n */\nexport interface GetNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse} or\n   * {@link OwnedNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional list of contract addresses to filter the results by. Limit is 20. */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata?: boolean;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: NftOrdering;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions.\n *\n * This interface is used to fetch NFTs without their associated metadata. To\n * get Nfts with their associated metadata, use {@link GetNftsForOwnerOptions}.\n *\n * @public\n */\nexport interface GetBaseNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse} or\n   * {@link OwnedNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional list of contract addresses to filter the results by. Limit is 20. */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /** Optional boolean flag to include NFT metadata. Defaults to `false`. */\n  omitMetadata: true;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: NftOrdering;\n}\n\n/**\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} request.\n * NFTs that match one or more of these filters are excluded from the response.\n *\n * @deprecated Use {@link NftFilters} instead. This enum will be removed in a\n *   future version.\n *\n * @beta\n */\nexport enum NftExcludeFilters {\n  /** Exclude NFTs that have been classified as spam. */\n  SPAM = 'SPAM',\n\n  /** Exclude NFTs that have been airdropped to a user. */\n  AIRDROPS = 'AIRDROPS'\n}\n\n/**\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} or a\n * {@link getContractsForOwner} request.\n *\n * @beta\n */\nexport enum NftFilters {\n  /** NFTs that have been classified as spam. */\n  SPAM = 'SPAM',\n\n  /** NFTs that have been airdropped to a user. */\n  AIRDROPS = 'AIRDROPS'\n}\n\n/**\n * Enum of ordering that can be applied to a {@link getNftsForOwner} or a\n * {@link getContractsForOwner} response.\n *\n * @beta\n */\nexport enum NftOrdering {\n  TRANSFERTIME = 'TRANSFERTIME'\n}\n\n/**\n * The response object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions. The object contains the NFTs with\n * metadata owned by the provided address, along with pagination information and\n * the total count.\n *\n * @public\n */\nexport interface OwnedNftsResponse {\n  /** The NFTs owned by the provided address. */\n  readonly ownedNfts: OwnedNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  readonly pageKey?: string;\n\n  /** The total count of NFTs owned by the provided address. */\n  readonly totalCount: number;\n\n  /** The canonical head block hash of when your request was received. */\n  blockHash: string;\n}\n\n/**\n * The response object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions. The object contains the NFTs\n * without metadata owned by the provided address, along with pagination\n * information and the total count.\n *\n * @public\n */\nexport interface OwnedBaseNftsResponse {\n  /** The NFTs owned by the provided address. */\n  readonly ownedNfts: OwnedBaseNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  readonly pageKey?: string;\n\n  /** The total count of NFTs owned by the provided address. */\n  readonly totalCount: number;\n\n  /** The canonical head block hash of when your request was received. */\n  blockHash: string;\n}\n\n/**\n * Represents an NFT with metadata owned by an address.\n *\n * @public\n */\nexport interface OwnedNft extends Nft {\n  /** The token balance of the NFT. */\n  readonly balance: number;\n}\n\n/**\n * Represents an NFT without metadata owned by an address.\n *\n * @public\n */\nexport interface OwnedBaseNft extends BaseNft {\n  /** The token balance of the NFT. */\n  readonly balance: number;\n}\n\n/**\n * The response object for the {@link getOwnersForNft}.\n *\n * @public\n */\nexport interface GetOwnersForNftResponse {\n  /** An array of owner addresses for the provided token. */\n  readonly owners: string[];\n\n  /** Optional The key for the next page of results, if applicable. */\n  readonly pageKey?: string;\n}\n\n/**\n * The response object for the {@link getOwnersForContract}.\n *\n * @public\n */\nexport interface GetOwnersForContractResponse {\n  /** An array of owner addresses for the provided contract address */\n  owners: string[];\n\n  /**\n   * Total count of unique owners. Only present if\n   * {@link GetOwnersForContractOptions.includeCount} is true. */\n  totalCount?: number;\n\n  /** Optional page key that is returned when a collection has more than 50,000 owners. */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getOwnersForContract}.\n *\n * @public\n */\nexport interface GetOwnersForContractWithTokenBalancesResponse {\n  /** An array of owner addresses for the provided contract address */\n  owners: NftContractOwner[];\n\n  /** Optional page key that is returned when a collection has more than 50,000 owners. */\n  pageKey: string;\n}\n\n/**\n * An object representing the owner of an NFT and its corresponding token\n * balances in a {@link GetOwnersForContractWithTokenBalancesResponse} object.\n */\nexport interface NftContractOwner {\n  /** The NFT's owner address. */\n  ownerAddress: string;\n\n  /** A list of objects containing token balances for the provided NFT contract. */\n  tokenBalances: NftContractTokenBalance[];\n}\n\n/**\n * An object representing the owned token and balance values in a\n * {@link GetOwnersForContractWithTokenBalancesResponse} object.\n */\nexport interface NftContractTokenBalance {\n  /** The token id owned in the NFT contract. */\n  tokenId: string;\n\n  /** The token Id balance for the provided owner. */\n  balance: number;\n}\n\n/**\n * Additional options for the {@link NftNamespace.getNftMetadata} method.\n */\nexport interface GetNftMetadataOptions {\n  /** Optional field to specify the type of token to speed up the query. */\n  tokenType?: NftTokenType;\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Whether to refresh the metadata for the given NFT token before returning\n   * the response. Defaults to false for faster response times.\n   */\n  refreshCache?: boolean;\n}\n\n/**\n * Represents an NFT token to fetch metadata for in a\n * {@link NftNamespace.getNftMetadataBatch} method.\n */\nexport interface NftMetadataBatchToken {\n  /** The NFT contract address. Limited to ERC721 and ERC1155 tokens. */\n  contractAddress: string;\n\n  /** The id of the NFT. */\n  tokenId: BigNumberish;\n\n  /** Optional field to specify the type of token to speed up the query. */\n  tokenType?: NftTokenType.ERC1155 | NftTokenType.ERC721;\n}\n\n/** Additional options for the {@link NftNamespace.getNftMetadataBatch} method. */\nexport interface NftMetadataBatchOptions {\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n\n  /**\n   * Whether to refresh the metadata for the given NFT token before returning\n   * the response. Defaults to false for faster response times.\n   */\n  refreshCache?: boolean;\n}\n\n/**\n * The successful object returned by the {@link getFloorPrice} call for each\n * marketplace (e.g. looksRare).\n *\n * @public\n */\nexport interface FloorPriceMarketplace {\n  /** The floor price of the collection on the given marketplace */\n  readonly floorPrice: number;\n  /** The currency in which the floor price is denominated */\n  readonly priceCurrency: string;\n  /** The link to the collection on the given marketplace */\n  readonly collectionUrl: string;\n  /** UTC timestamp of when the floor price was retrieved from the marketplace */\n  readonly retrievedAt: string;\n}\n\n/**\n * The failing object returned by the {@link getFloorPrice} call for each\n * marketplace (e.g. looksRare).\n *\n * @public\n */\nexport interface FloorPriceError {\n  /** Error fetching floor prices from the given marketplace */\n  readonly error: string;\n}\n\n/**\n * The response object for the {@link getFloorPrice} method.\n *\n * @public\n */\nexport interface GetFloorPriceResponse {\n  /**\n   * Name of the NFT marketplace where the collection is listed. Current\n   * marketplaces supported: OpenSea, LooksRare\n   */\n  readonly openSea: FloorPriceMarketplace | FloorPriceError;\n  readonly looksRare: FloorPriceMarketplace | FloorPriceError;\n}\n\n/**\n * Optional parameters object for the the {@link getContractsForOwner} method\n *\n * @public\n */\nexport interface GetContractsForOwnerOptions {\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n\n  /**\n   * Configure the number of NFTs to return in each response. Maximum pages size\n   * is 100. Defaults to 100.\n   */\n  pageSize?: number;\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are included in the response. May not be used in\n   * conjunction with {@link excludeFilters}.\n   */\n  includeFilters?: NftFilters[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response. May not be used in\n   * conjunction with {@link includeFilters}\n   */\n  excludeFilters?: NftFilters[];\n\n  /**\n   * Order in which to return results. By default, results are ordered by\n   * contract address and token ID in lexicographic order.\n   */\n  orderBy?: NftOrdering;\n}\n\n/**\n * The response for the {@link NftNamespace.getContractsForOwner} method.\n *\n * @public\n */\nexport interface GetContractsForOwnerResponse {\n  /** The list of contracts, that match the query, held by the given address. */\n  contracts: ContractForOwner[];\n\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n\n  /** Total number of NFT contracts held by the given address. */\n  totalCount: number;\n}\n\n/** Represents a single NFT contract data in the {@link GetContractsForOwnerResponse}. */\nexport interface ContractForOwner extends NftContract {\n  /**\n   * Sum of NFT balances across all token IDs held by the owner. For\n   * non-fungible tokens this will be equal to the numDistinctTokensOwned, but\n   * it may be higher if the user holds some fungible ERC1155 tokens.\n   */\n  totalBalance: number;\n\n  /** The title of the token held by the owner. */\n  title: string;\n\n  /**\n   * Number of distinct token IDs held by the owner. For non-fungible tokens\n   * this will be equal to the totalBalance, but it may be lower if the user\n   * holds some fungible ERC1155 tokens.\n   */\n  numDistinctTokensOwned: number;\n\n  isSpam: boolean;\n\n  /** One of the tokens from this contract held by the owner. */\n  tokenId: string;\n\n  /** Alternative NFT metadata for this contract to be parsed manually. */\n  media: Media[];\n}\n\n/**\n * The type of transfer for the request. Note that using `TO` will also include\n * NFTs that were minted by the owner.\n */\nexport enum GetTransfersForOwnerTransferType {\n  'TO' = 'TO',\n  'FROM' = 'FROM'\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getTransfersForOwner} method.\n */\nexport interface GetTransfersForOwnerOptions {\n  /**\n   * List of NFT contract addresses to filter mints by. If omitted, defaults to\n   * all contract addresses.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Filter mints by ERC721 vs ERC1155 contracts. If omitted, defaults to all\n   * NFTs.\n   */\n  tokenType?: NftTokenType.ERC1155 | NftTokenType.ERC721;\n\n  /**\n   * Optional page key from an existing {@link TransfersNftResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getTransfersForOwner}\n * method.\n */\nexport interface GetTransfersForContractOptions {\n  /** Starting block (inclusive) to get transfers from. */\n  fromBlock?: BlockTag;\n  /** Ending block (inclusive) to get transfers from. */\n  toBlock?: BlockTag;\n  /**\n   * Whether to return results in ascending or descending order by block number.\n   * Defaults to ascending if omitted.\n   */\n  order?: SortingOrder;\n  /**\n   * Optional page key from an existing {@link TransfersNftResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * Response object for NFT methods that fetch NFTs that were transferred or\n * minted (ex: {@link NftNamespace.getTransfersForOwner} or\n * {@link NftNamespace.getMintedNfts}).\n */\nexport interface TransfersNftResponse {\n  /** An array of NFTs.*/\n  nfts: TransferredNft[];\n  /** Optional page key to use to fetch the next group of NFTs. */\n  pageKey?: string;\n}\n\n/**\n * NFT with extra data for a single NFT that was transferred or minted.\n */\nexport interface TransferredNft extends Nft {\n  /**\n   * The address the NFT was from. For minted NFTs, this field is the set to\n   * `0x0000000000000000000000000000000000000000`.\n   **/\n  from: string;\n  /** The address the NFT was sent or minted to. */\n  to?: string;\n  /** The transaction hash where the transfer or mint occurred. */\n  transactionHash: string;\n  /** The block number as a hex string of when the transfer or mint occurred. */\n  blockNumber: string;\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getMintedNfts} method.\n */\nexport interface GetMintedNftsOptions {\n  /**\n   * List of NFT contract addresses to filter mints by. If omitted, defaults to\n   * all contract addresses.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Filter mints by ERC721 vs ERC1155 contracts. If omitted, defaults to all\n   * NFTs.\n   */\n  tokenType?: NftTokenType.ERC1155 | NftTokenType.ERC721;\n\n  /**\n   * Optional page key from an existing {@link TransfersNftResponse} to use for\n   * pagination.\n   */\n  pageKey?: string;\n}\n\n/**\n * @deprecated Use {@link TransfersNftResponse} instead.\n */\nexport interface GetMintedNftsResponse {\n  /** An array of the minted NFTs for the provided owner address. */\n  nfts: Nft[];\n\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n}\n\n/**\n * Optional parameters object for the {@link NftNamespace.getNftSales} method.\n *\n * This interface is used to filter the NFT sales data.\n *\n * @public\n */\nexport interface GetNftSalesOptions {\n  /** The block number to start fetching NFT sales data from. */\n  fromBlock?: number | 'latest';\n\n  /** The block number limit to fetch NFT sales data from. */\n  toBlock?: number | 'latest';\n\n  /** Whether to return the results in ascending or descending order by block number. */\n  order?: SortingOrder;\n\n  /** The NFT marketplace to filter sales by. */\n  marketplace?: NftSaleMarketplace;\n\n  /** The address of the NFT buyer to filter sales by. */\n  buyerAddress?: string;\n\n  /** The address of the NFT seller to filter sales by. */\n  sellerAddress?: string;\n\n  /**\n   * Filter by whether the buyer or seller was the taker in the NFT trade.\n   * Defaults to returning both buyer and seller taker trades.\n   */\n  taker?: NftSaleTakerType;\n\n  /** The maximum number of NFT sales to return. */\n  limit?: number;\n\n  /** Key for pagination to use to fetch results from the next page if available. */\n  pageKey?: string;\n}\n\n/**\n * Alternative optional parameters object for the {@link NftNamespace.getNftSales}\n * method that allows filtering results by contractAddress.\n *\n * This interface is used to filter the NFT sales data.\n *\n * @public\n */\nexport interface GetNftSalesOptionsByContractAddress\n  extends GetNftSalesOptions {\n  /** The contract address of a NFT collection to filter sales by. */\n  contractAddress: string;\n\n  /** The token ID of an NFT within the specified contractAddress to filter sales by. */\n  tokenId?: BigNumberish;\n}\n\n/**\n * The response for the {@link NftNamespace.getNftSales} method.\n *\n * @public\n */\nexport interface GetNftSalesResponse {\n  /** List of NFT sales that match the query */\n  nftSales: NftSale[];\n\n  /** Block Information of the block as of which the corresponding data is valid. */\n  validAt: NftSaleValidAt;\n\n  /** The page key to use to fetch the next page if more results are available. */\n  pageKey?: string;\n}\n\n/** Represents a single NFT sale data in the {@link GetNftSalesResponse}. */\nexport interface NftSale {\n  /** The marketplace the sale took place on. */\n  marketplace: NftSaleMarketplace;\n\n  /** The NFT contract address. */\n  contractAddress: string;\n\n  /** The decimal token ID of the NFT being sold. */\n  tokenId: string;\n\n  /** The number of tokens sold in the sale as a decimal integer string. */\n  quantity: string;\n\n  /** The address of the buyer in the NFT sale. */\n  buyerAddress: string;\n\n  /** The address of the seller in the NFT sale. */\n  sellerAddress: string;\n\n  /** Whether the price taker in the trade was the buyer or the seller. */\n  taker: NftSaleTakerType;\n\n  /** The payment from buyer to the seller. */\n  sellerFee: NftSaleFeeData;\n\n  /**\n   * The payment from buyer to the marketplace.\n   * @deprecated Please use `protocolFee` instead.\n   */\n  marketplaceFee?: NftSaleFeeData;\n\n  /** The payment from buyer to the marketplace. */\n  protocolFee?: NftSaleFeeData;\n\n  /** The payment from buyer to the royalty address of the NFT collection. */\n  royaltyFee?: NftSaleFeeData;\n\n  /** The block number the NFT sale took place in. */\n  blockNumber: number;\n\n  /** The log number of the sale event emitted within the block. */\n  logIndex: number;\n\n  /** The index of the token within the bundle of NFTs sold in the sale. */\n  bundleIndex: number;\n\n  /** The transactionHash of the NFT sale. */\n  transactionHash: string;\n}\n\n/** The block information at which the NFT sale information is valid at. */\nexport interface NftSaleValidAt {\n  /** The block number the sale information is valid at. */\n  blockNumber: number;\n  /** The block hash. Used to detect reorgs. */\n  blockHash?: string;\n  /** The timestamp for the block. */\n  blockTimestamp?: string;\n}\n\n/**\n * Fee detail for an NFT sale.\n *\n * @public\n */\nexport interface NftSaleFeeData {\n  /** The fee payment amount as a decimal integer string. */\n  amount: string;\n\n  /** The symbol of the token used for the payment. */\n  symbol: string;\n\n  /**\n   * The number of decimals of the token used for the payment.\n   * @deprecated Please use `decimals` instead. This field contains a typo\n   * and will always be undefined. It's been marked as deprecated to avoid\n   * breaking changes.\n   */\n  decimal: number;\n\n  /** The number of decimals of the token used for the payment. */\n  decimals: number;\n}\n\n/**\n * Enum for representing the supported sorting orders of the API.\n *\n * @public\n */\nexport enum SortingOrder {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * Enum representing the supported NFT marketplaces by the\n * {@link NftNamespace.getNftSales} method.\n *\n * @public\n */\nexport enum NftSaleMarketplace {\n  SEAPORT = 'seaport',\n  LOOKSRARE = 'looksrare',\n  X2Y2 = 'x2y2',\n  WYVERN = 'wyvern',\n  CRYPTOPUNKS = 'cryptopunks',\n  BLUR = 'blur',\n  UNKNOWN = 'unknown'\n}\n\n/**\n * Enum for specifying the taker type for the {@link NftNamespace.getNftSales}\n * method.\n *\n * @public\n */\nexport enum NftSaleTakerType {\n  BUYER = 'buyer',\n  SELLER = 'seller'\n}\n\n/**\n * Information about the rarity of an NFT's attribute in the specified collection.\n *\n * @public\n */\nexport interface NftAttributeRarity {\n  /** Name of the NFT's attribute. */\n  value: string;\n\n  /** The type of NFT attribute. */\n  traitType: string;\n\n  /**\n   * A number from 0 to 1 representing the prevalence of this value for this\n   * trait type in the current collection.\n   */\n  prevalence: number;\n}\n\n/**\n * Summary of the attribute prevalence for the specified NFT contract.\n *\n * @public\n */\nexport interface NftAttributesResponse {\n  /** The specified NFT contract's address. */\n  contractAddress: string;\n\n  /** The specified NFT contract's total supply. */\n  totalSupply: number;\n\n  /**\n   * The attribute prevalence of each trait grouped by the trait type for the\n   * provided NFT.\n   */\n  summary: Record<string, Record<string, number>>;\n}\n\n/** The refresh result response object returned by {@link refreshContract}. */\nexport interface RefreshContractResult {\n  /** The NFT contract address that was passed in to be refreshed. */\n  contractAddress: string;\n\n  /** The current state of the refresh request. */\n  refreshState: RefreshState;\n\n  /**\n   * Percentage of tokens currently refreshed, represented as an integer string.\n   * Field can be null if the refresh has not occurred.\n   */\n  progress: string | null;\n}\n\n/** The current state of the NFT contract refresh process. */\nexport enum RefreshState {\n  /** The provided contract is not an NFT or does not contain metadata. */\n  DOES_NOT_EXIST = 'does_not_exist',\n\n  /** The contract has already been queued for refresh. */\n  ALREADY_QUEUED = 'already_queued',\n\n  /** The contract is currently being refreshed. */\n  IN_PROGRESS = 'in_progress',\n\n  /** The contract refresh is complete. */\n  FINISHED = 'finished',\n\n  /** The contract refresh has been queued and await execution. */\n  QUEUED = 'queued',\n\n  /** The contract was unable to be queued due to an internal error. */\n  QUEUE_FAILED = 'queue_failed'\n}\n\n/**\n * The parameter field of {@link TransactionReceiptsParams}.\n *\n * @public\n */\nexport interface TransactionReceiptsBlockNumber {\n  /** The block number to get transaction receipts for. */\n  blockNumber: string;\n}\n\n/**\n * The parameter field of {@link TransactionReceiptsParams}.\n *\n * @public\n */\nexport interface TransactionReceiptsBlockHash {\n  /** The block hash to get transaction receipts for. */\n  blockHash: string;\n}\n\n/**\n * The parameters to use with the {@link CoreNamespace.getTransactionReceipts} method.\n *\n * @public\n */\nexport type TransactionReceiptsParams =\n  | TransactionReceiptsBlockNumber\n  | TransactionReceiptsBlockHash;\n\n/**\n * Response object for a {@link CoreNamespace.getTransactionReceipts} call.\n *\n * @public\n */\nexport interface TransactionReceiptsResponse {\n  /** A list of transaction receipts for the queried block. */\n  receipts: TransactionReceipt[] | null;\n}\n\n/**\n * Metadata object returned in a {@link AssetTransfersResult} object if the asset\n * transferred is an ERC1155.\n *\n * @public\n */\nexport interface ERC1155Metadata {\n  tokenId: string;\n  value: string;\n}\n\n/**\n * Information about the underlying contract for the asset that was transferred\n * in a {@link AssetTransfersResult} object.\n *\n * @public\n */\nexport interface RawContract {\n  /**\n   * The raw transfer value as a hex string. `null` if the transfer was for an\n   * ERC721 or ERC1155 token.\n   */\n  value: string | null;\n\n  /** The contract address. `null` if it was an internal or external transfer. */\n  address: string | null;\n\n  /**\n   * The number of decimals in the contract as a hex string. `null` if the value\n   * is not in the contract and not available from other sources.\n   */\n  decimal: string | null;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} and\n * {@link getNftsForContractIterator} functions.\n *\n * This interface is used to fetch NFTs with their associated metadata. To get\n * Nfts without their associated metadata, use {@link GetBaseNftsForContractOptions}.\n *\n * @public\n */\nexport interface GetNftsForContractOptions {\n  /**\n   * Optional page key from an existing {@link NftContractBaseNftsResponse} or\n   * {@link NftContractNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata?: boolean;\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} and\n * {@link getNftsForContractIterator} functions.\n *\n * This interface is used to fetch NFTs without their associated metadata. To\n * get Nfts with their associated metadata, use {@link GetNftsForContractOptions}.\n *\n * @public\n */\nexport interface GetBaseNftsForContractOptions {\n  /**\n   * Optional page key from an existing {@link NftContractBaseNftsResponse} or\n   * {@link NftContractNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata: false;\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided contract.\n *\n * @public\n */\nexport interface GetOwnersForContractOptions {\n  /**\n   * Whether to include the token balances per token id for each owner. Defaults\n   * to false when omitted.\n   */\n  withTokenBalances?: boolean;\n\n  /** The block number in hex or decimal to fetch owners for. */\n  block?: string;\n\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n\n  /**\n   * If true, include total count of owners in the response. Only applicable\n   * when `withTokenBalances` is not set to `true`.\n   */\n  includeCount?: boolean;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided contract.\n *\n * @public\n */\nexport interface GetOwnersForContractWithTokenBalancesOptions {\n  /**\n   * Whether to include the token balances per token id for each owner. Defaults\n   * to false when omitted.\n   */\n  withTokenBalances: true;\n\n  /** The block number in hex or decimal to fetch owners for. */\n  block?: string;\n\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n}\n\n/**\n * Optional parameters object for the {@link getOwnersForNft} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided NFT contract.\n *\n * @public\n */\nexport interface GetOwnersForNftOptions {\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n\n  /**\n   * Sets the total number of owners to return in the response.\n   */\n  pageSize?: number;\n}\n\n/**\n * The response object for the {@link getNftsForContract} function. The object\n * contains the NFTs without metadata inside the NFT contract.\n *\n * @public\n */\nexport interface NftContractBaseNftsResponse {\n  /** An array of NFTs without metadata. */\n  nfts: BaseNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getNftsForContract} function. The object\n * contains the NFTs with metadata inside the NFT contract.\n *\n * @public\n */\nexport interface NftContractNftsResponse {\n  /** An array of NFTs with metadata. */\n  nfts: Nft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n}\n\n/** OpenSea's metadata for an NFT collection. */\nexport interface OpenSeaCollectionMetadata {\n  /** The floor price of the NFT. */\n  floorPrice?: number;\n  /** The name of the collection on OpenSea. */\n  collectionName?: string;\n  /** The approval status of the collection on OpenSea. */\n  safelistRequestStatus?: OpenSeaSafelistRequestStatus;\n  /** The image URL determined by OpenSea. */\n  imageUrl?: string;\n  /** The description of the collection on OpenSea. */\n  description?: string;\n  /** The homepage of the collection as determined by OpenSea. */\n  externalUrl?: string;\n  /** The Twitter handle of the collection. */\n  twitterUsername?: string;\n  /** The Discord URL of the collection. */\n  discordUrl?: string;\n  /** Timestamp of when the OpenSea metadata was last ingested by Alchemy. */\n  lastIngestedAt?: string;\n}\n\n/** An OpenSea collection's approval status. */\nexport enum OpenSeaSafelistRequestStatus {\n  /** Verified collection. */\n  VERIFIED = 'verified',\n  /** Collections that are approved on open sea and can be found in search results. */\n  APPROVED = 'approved',\n  /** Collections that requested safelisting on OpenSea. */\n  REQUESTED = 'requested',\n  /** Brand new collections. */\n  NOT_REQUESTED = 'not_requested'\n}\n\n/**\n * The response object for the {@link findContractDeployer} function.\n *\n * @public\n */\nexport interface DeployResult {\n  /** The address of the contract deployer, if it is available. */\n  readonly deployerAddress?: string;\n\n  /** The block number the contract was deployed in. */\n  readonly blockNumber: number;\n}\n\n/**\n * Method names for Alchemy's custom Subscription API endpoints.\n *\n * This value is provided in the `method` field when creating an event filter on\n * the Websocket Namespace.\n */\nexport enum AlchemySubscription {\n  PENDING_TRANSACTIONS = 'alchemy_pendingTransactions',\n  MINED_TRANSACTIONS = 'alchemy_minedTransactions'\n}\n\n/**\n * Event filter for the {@link AlchemyWebSocketProvider.on} and\n * {@link AlchemyWebSocketProvider.once} methods to use Alchemy's custom\n * `alchemy_pendingTransactions` endpoint.\n *\n * Returns the transaction information for all pending transactions that match a\n * given filter. For full documentation, see:\n * {@link https://docs.alchemy.com/reference/alchemy-pendingtransactions}\n *\n * Note that excluding all optional parameters will return transaction\n * information for ALL pending transactions that are added to the mempool.\n *\n * @public\n */\nexport interface AlchemyPendingTransactionsEventFilter {\n  method: AlchemySubscription.PENDING_TRANSACTIONS;\n\n  /**\n   * Filter pending transactions sent FROM the provided address or array of\n   * addresses.\n   *\n   * If a {@link AlchemyPendingTransactionsEventFilter.toAddress} is also\n   * present, then this filter will return transactions sent from the\n   * `fromAddress` OR transactions received by the `toAddress`.\n   */\n  fromAddress?: string | string[];\n\n  /**\n   * Filter pending transactions sent TO the provided address or array of\n   * addresses.\n   *\n   * If a {@link AlchemyPendingTransactionsEventFilter.fromAddress} is also\n   * present, then this filter will return transactions sent from the\n   * `fromAddress` OR transactions received by the `toAddress`.\n   */\n  toAddress?: string | string[];\n\n  /**\n   * Whether to only include transaction hashes and exclude the rest of the\n   * transaction response for a smaller payload. Defaults to false (by default,\n   * the entire transaction response is included).\n   *\n   * Note that setting only {@link hashesOnly} to true will return the same\n   * response as subscribing to `newPendingTransactions`.\n   */\n  hashesOnly?: boolean;\n}\n\n/**\n * Event filter for the {@link AlchemyWebSocketProvider.on} and\n * {@link AlchemyWebSocketProvider.once} methods to use Alchemy's custom\n * `alchemy_minedTransactions` endpoint.\n *\n * Returns the transaction information for all mined transactions that match the\n * provided filter. For full documentation, see:\n * {@link https://docs.alchemy.com/reference/alchemy-minedtransactions}\n *\n * Note that excluding all optional parameters will return transaction\n * information for ALL mined transactions.\n *\n * @public\n */\nexport interface AlchemyMinedTransactionsEventFilter {\n  method: AlchemySubscription.MINED_TRANSACTIONS;\n\n  /**\n   * Address filters to subscribe to. Defaults to all transactions if omitted.\n   * Limit 100 address filters. Requires a non-empty array.\n   */\n  addresses?: NonEmptyArray<AlchemyMinedTransactionsAddress>;\n\n  /**\n   * Whether to include transactions that were removed from the mempool.\n   * Defaults to false.\n   */\n  includeRemoved?: boolean;\n\n  /**\n   * Whether to only include transaction hashes and exclude the rest of the\n   * transaction response for a smaller payload. Defaults to false (by default,\n   * the entire transaction response is included).\n   */\n  hashesOnly?: boolean;\n}\n\n/**\n * Address filters for {@link AlchemyMinedTransactionsEventFilter}. Requires at\n * least one of the fields to be set.\n */\nexport type AlchemyMinedTransactionsAddress = RequireAtLeastOne<{\n  to?: string;\n  from?: string;\n}>;\n\n/**\n * Alchemy's event type that extends the default {@link EventType} interface to\n * also include Alchemy's Subscription API.\n *\n * @public\n */\nexport type AlchemyEventType = EventType | AlchemyEventFilter;\n\n/**\n * This type represents the Alchemy's Subscription API endpoints as event\n * filters compatible with other ethers events.\n */\nexport type AlchemyEventFilter =\n  | AlchemyMinedTransactionsEventFilter\n  | AlchemyPendingTransactionsEventFilter;\n\n/** Options for the {@link TransactNamespace.sendPrivateTransaction} method. */\nexport interface SendPrivateTransactionOptions {\n  /**\n   * Whether to use fast-mode. Defaults to false. Please note that fast mode\n   * transactions cannot be cancelled using\n   * {@link TransactNamespace.cancelPrivateTransaction}. method.\n   *\n   * See {@link https://docs.flashbots.net/flashbots-protect/rpc/fast-mode} for\n   * more details.\n   */\n  fast: boolean;\n}\n\n/**\n * Asset type returned when calling {@link TransactNamespace.simulateAssetChanges}.\n * Allows you to determine if the assets approved or / and transferred are\n * native, tokens or NFTs.\n */\nexport enum SimulateAssetType {\n  /**\n   * Native transfers that involve the currency of the chain the simulation is\n   * run on (ex: ETH for Ethereum, MATIC for Polygon, ETH for Arbitrum).\n   */\n  NATIVE = 'NATIVE',\n  /** ERC20 approval or transfers. */\n  ERC20 = 'ERC20',\n  /** ERC721 approval or transfers. */\n  ERC721 = 'ERC721',\n  /** ERC1155 approval or transfers. */\n  ERC1155 = 'ERC1155',\n  /**\n   * Special contracts that don't follow ERC 721/1155.Currently limited to\n   * CryptoKitties and CryptoPunks.\n   */\n  SPECIAL_NFT = 'SPECIAL_NFT'\n}\n\n/**\n * Change type returned when calling {@link TransactNamespace.simulateAssetChanges}.\n */\nexport enum SimulateChangeType {\n  /**\n   * Represents a transaction that approved or disapproved permissions for a\n   * contract.\n   *\n   * APPROVE without token ID → approve all tokens\n   * APPROVE without amount → approve all amount\n   * APPROVE with zero amount → approval being cleared\n   */\n  APPROVE = 'APPROVE',\n\n  /**\n   * Represents a transaction that transferred tokens from one address to another.\n   */\n  TRANSFER = 'TRANSFER'\n}\n\n/**\n * The error field returned in a {@link SimulateAssetChangesResponse} if the\n * simulation failed.\n */\nexport interface SimulateAssetChangesError extends Record<string, any> {\n  /** The error message. */\n  message: string;\n}\n\n/**\n * Represents an asset change from a call to\n * {@link TransactNamespace.simulateAssetChanges}.\n */\nexport interface SimulateAssetChangesChange {\n  /** The type of asset from the transaction. */\n  assetType: SimulateAssetType;\n\n  /** The type of change from the transaction. */\n  changeType: SimulateChangeType;\n\n  /** The from address. */\n  from: string;\n\n  /** The to address. */\n  to: string;\n\n  /**\n   * The raw amount as an integer string. Only available on TRANSFER changes for\n   * NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes (field set to\n   * '0').\n   */\n  rawAmount?: string;\n\n  /**\n   * The amount as an integer string. This value is calculated by applying the\n   * `decimals` field to the `rawAmount` field. Only available on TRANSFER\n   * changes for NATIVE and ERC20 assets, or ERC721/ERC1155 disapprove changes\n   * (field set to '0').\n   */\n  amount?: string;\n\n  /** The name of the asset transferred, if available. */\n  name?: string;\n\n  /** The symbol of the asset transferred if available. */\n  symbol?: string;\n\n  /**\n   * The number of decimals used by the ERC20 token. Set to 0 for APPROVE\n   * changes. Field is undefined if it's not defined in the contract and not\n   * available from other sources.\n   */\n  decimals?: number;\n\n  /**\n   * The contract address of the asset. Only applicable to ERC20, ERC721,\n   * ERC1155, NFT and SPECIAL_NFT transactions.\n   */\n  contractAddress?: string;\n\n  /**\n   * URL for the logo of the asset, if available. Only applicable to ERC20 transactions.\n   */\n  logo?: string;\n\n  /**\n   * The token id of the asset transferred. Only applicable to ERC721,\n   * ERC1155 and SPECIAL_NFT NFTs.\n   */\n  tokenId?: string;\n}\n\n/**\n * Response object for the {@link TransactNamespace.simulateAssetChanges} method.\n */\nexport interface SimulateAssetChangesResponse {\n  /** An array of asset changes that resulted from the transaction. */\n  changes: SimulateAssetChangesChange[];\n  /**\n   * The amount of gas used by the transaction represented as a hex string. The\n   * field is undefined if an error occurred.\n   */\n  gasUsed?: string;\n  /** Optional error field that is present if an error occurred. */\n  error?: SimulateAssetChangesError;\n}\n\n/**\n * Authority used to decode calls and logs when using the\n * {@link TransactNamespace.simulateExecution} method.\n */\nexport enum DecodingAuthority {\n  ETHERSCAN = 'ETHERSCAN'\n}\n\n/** The input or output parameters from a {@link DecodedDebugCallTrace}. */\nexport interface DecodedCallParam {\n  /** Value of the parameter. */\n  value: string;\n  /** The name of the parameter. */\n  name: string;\n  /** The type of the parameter.*/\n  type: string;\n}\n\n/** The input parameters from a {@link DecodedLog}. */\nexport interface DecodedLogInput extends DecodedCallParam {\n  /** Whether the log is marked as indexed in the smart contract. */\n  indexed: boolean;\n}\n\n/**\n * Decoded representation of the call trace that is part of a\n * {@link SimulationCallTrace}.\n */\nexport interface DecodedDebugCallTrace {\n  /** The smart contract method called. */\n  methodName: string;\n  /** Method inputs. */\n  inputs: DecodedCallParam[];\n  /** Method outputs. */\n  outputs: DecodedCallParam[];\n  /** The source used to provide the decoded call trace. */\n  authority: DecodingAuthority;\n}\n\n/** The type of call in a debug call trace. */\nexport enum DebugCallType {\n  CREATE = 'CREATE',\n  CALL = 'CALL',\n  STATICCALL = 'STATICCALL',\n  DELEGATECALL = 'DELEGATECALL'\n}\n\n/**\n * Debug call trace in a {@link SimulateExecutionResponse}.\n */\nexport interface SimulationCallTrace\n  extends Omit<DebugCallTrace, 'revertReason' | 'calls'> {\n  /** The type of call. */\n  type: DebugCallType;\n  /** A decoded version of the call. Provided on a best-effort basis. */\n  decoded?: DecodedDebugCallTrace;\n}\n\n/**\n * Decoded representation of the debug log that is part of a\n * {@link SimulationDebugLog}.\n */\n\nexport interface DecodedLog {\n  /** The decoded name of the log event. */\n  eventName: string;\n  /** The decoded inputs to the log. */\n  inputs: DecodedLogInput[];\n  /** The source used to provide the decoded log. */\n  authority: DecodingAuthority;\n}\n\n/**\n * Debug log in a {@link SimulateExecutionResponse}.\n */\nexport interface SimulationDebugLog {\n  /** An array of topics in the log. */\n  topics: string[];\n  /** The address of the contract that generated the log. */\n  address: string;\n  /** The data included the log. */\n  data: string;\n  /** A decoded version of the log. Provided on a best-effort basis. */\n  decoded?: DecodedLog;\n}\n\n/** Response object for the {@link TransactNamespace.simulateExecution} method. */\nexport interface SimulateExecutionResponse {\n  /**\n   * An array of traces generated during simulation that represent the execution\n   * of the transaction along with the decoded calls if available.\n   */\n  calls: SimulationCallTrace[];\n\n  /**\n   * An array of logs emitted during simulation along with the decoded logs if\n   * available.\n   */\n  logs: SimulationDebugLog[];\n}\n\n/**\n * Response object for the {@link TransactNamespace.sendGasOptimizedTransaction} method.\n *\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport interface GasOptimizedTransactionResponse {\n  /**\n   * The tracking id. This can be used to check the status of the transaction\n   * via {@link TransactNamespace.getGasOptimizedTransactionStatus}.\n   */\n  trackingId: string;\n\n  /* An array of the transaction hashes from submitted transactions. */\n  transactionHashes: string[];\n}\n\n/**\n * Response object for the\n * {@link TransactNamespace.getGasOptimizedTransactionStatus} method.\n *\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport interface GasOptimizedTransactionStatusResponse {\n  /** The status of the submitted transaction job. */\n  jobStatus: GasOptimizedTransactionStatus;\n\n  /** An array of the submitted transactions hashes that have been attempted. */\n  transactionHashesAttempted: string[];\n\n  /** The final mined transaction hash if the job was completed successfully. */\n  minedTransactionHash?: string;\n}\n\n/**\n * Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\n *\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport enum GasOptimizedTransactionStatus {\n  UNSPECIFIED = 'TRANSACTION_JOB_STATUS_UNSPECIFIED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETE = 'COMPLETE',\n  ABANDONED = 'ABANDONED'\n}\n\n/** SDK representation of a Webhook in the Notify API. */\nexport interface Webhook {\n  /** The webhook's unique id. */\n  id: string;\n  /** The network the webhook is on. */\n  network: Network;\n  /** The type of webhook. */\n  type: WebhookType;\n  /** The url that the webhook sends its payload to. */\n  url: string;\n  /** Whether the webhook is currently active */\n  isActive: boolean;\n  /** The creation time of the webhook as an ISO string. */\n  timeCreated: string;\n  /** The signing key used to verify payloads for the webhook. */\n  signingKey: string;\n  /** The webhook version. All newly created webhooks default to V2. */\n  version: WebhookVersion;\n  /**\n   * The app id of the app used for the webhook. This field is only present on\n   * {@link MinedTransactionWebhook} and {@link DroppedTransactionWebhook}\n   */\n  appId?: string;\n}\n\n/** The version of the webhook. All newly created webhooks default to V2. */\nexport enum WebhookVersion {\n  V1 = 'V1',\n  V2 = 'V2'\n}\n\n/** The type of {@link Webhook}. */\nexport enum WebhookType {\n  MINED_TRANSACTION = 'MINED_TRANSACTION',\n  DROPPED_TRANSACTION = 'DROPPED_TRANSACTION',\n  ADDRESS_ACTIVITY = 'ADDRESS_ACTIVITY',\n  NFT_ACTIVITY = 'NFT_ACTIVITY',\n  NFT_METADATA_UPDATE = 'NFT_METADATA_UPDATE',\n  GRAPHQL = 'GRAPHQL'\n}\n\n/**\n * A Mined Transaction Webhook is used to notify your app whenever a transaction\n * sent through your API key gets successfully mined. This is useful if you want\n * to notify customers that their transaction went through.\n */\nexport interface MinedTransactionWebhook extends Webhook {\n  type: WebhookType.MINED_TRANSACTION;\n}\n\n/**\n * A Dropped Transaction webhook is used to notify your app whenever a\n * transaction sent through your API key gets dropped. This can be useful if you\n * want to notify customers that their transactions were dropped.\n */\nexport interface DroppedTransactionWebhook extends Webhook {\n  type: WebhookType.DROPPED_TRANSACTION;\n}\n\n/**\n * An Address Activity Webhook tracks ETH, ERC20, ERC721, and ERC1155 transfers\n * for the provided addresses. This can be used to notify your app with\n * real-time state changes when your tracked addresses send or receive tokens.\n */\nexport interface AddressActivityWebhook extends Webhook {\n  type: WebhookType.ADDRESS_ACTIVITY;\n}\n\n/**\n * The NFT Activity Webhook tracks all ERC721 and ERC1155 activity. This can be\n * used to notify your app with real time state changes when an NFT is\n * transferred between addresses.\n */\nexport interface NftActivityWebhook extends Webhook {\n  type: WebhookType.NFT_ACTIVITY;\n}\n\n/**\n * The NFT Metadata Update Webhook tracks all ERC721 and ERC1155 metadata updates.\n * This can be used to notify your app with real time state changes when an NFT's\n * metadata changes.\n */\nexport interface NftMetadataUpdateWebhook extends Webhook {\n  type: WebhookType.NFT_METADATA_UPDATE;\n}\n\n/**\n * The Custom Webhook can track any event on every block (think transfers, staking,\n * minting, burning, approvals, etc.)\n * This can be used to notify your app with real time changes whenever an\n * EOA or a smart contract performs any action on-chain.\n */\nexport interface CustomGraphqlWebhook extends Webhook {\n  type: WebhookType.GRAPHQL;\n}\n\n/** The response for a {@link NotifyNamespace.getAllWebhooks} method. */\nexport interface GetAllWebhooksResponse {\n  /** All webhooks attached to the provided auth token. */\n  webhooks: Webhook[];\n  /** The total number of webhooks. */\n  totalCount: number;\n}\n\n/** Options object for the {@link NotifyNamespace.getAddresses} method. */\nexport interface GetAddressesOptions {\n  /** Number of addresses to fetch. */\n  limit?: number;\n\n  /** Page */\n  pageKey?: string;\n}\n\n/** Response object for the {@link NotifyNamespace.getAddresses} method. */\nexport interface AddressActivityResponse {\n  /** The addresses for the webhook. */\n  addresses: string[];\n  /** The total number of addresses. */\n  totalCount: number;\n  /** Optional page key used to fetch the remaining addresses. */\n  pageKey?: string;\n}\n\n/** Response object for the {@link NotifyNamespace.getGraphqlQuery} method. */\nexport interface CustomGraphqlWebhookConfig {\n  /** The graphql query for the webhook. */\n  graphqlQuery: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link MinedTransactionWebhook} or {@link DroppedTransactionWebhook}.\n *\n * The webhook will be created on the app and network associated with the appId.\n * To find the app id of a project, go to the Alchemy Dashboard in the Apps tab.\n * After clicking on an app, the app id is the string in the URL following 'apps/'.\n *\n * This is a temporary workaround for now. We're planning on detecting the app\n * id from the provided api key directly. Stay tuned!\n */\nexport interface TransactionWebhookParams {\n  /** The app id of the project to create the webhook on. */\n  appId: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link NftActivityWebhook} or {@link NftMetadataUpdateWebhook}.\n */\nexport interface NftWebhookParams {\n  /** Array of NFT filters the webhook should track. */\n  filters: NftFilter[];\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link CustomGraphqlWebhook}\n */\nexport interface CustomGraphqlWebhookParams {\n  /** GraphQL query */\n  graphqlQuery: string;\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link AddressActivityWebhook}.\n */\nexport interface AddressWebhookParams {\n  /** Array of addresses the webhook should activity for. */\n  addresses: string[];\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/** NFT to track on a {@link NftActivityWebhook} or {@link NftMetadataUpdateWebhook}. */\nexport interface NftFilter {\n  /** The contract address of the NFT. */\n  contractAddress: string;\n  /**\n   * The token id of the NFT to track. If this field is omitted, defaults to\n   * tracking all NFTs for the provided contract address.\n   */\n  tokenId?: BigNumberish;\n}\n\n/** Response object for the {@link NotifyNamespace.getNftFilters} method. */\nexport interface NftFiltersResponse {\n  /** The NFT filters on the provided webhook. */\n  filters: NftFilter[];\n  /** The total number of NFT filters on the webhook. */\n  totalCount: number;\n  /** Optional page key used to fetch the remaining filters. */\n  pageKey?: string;\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to mark a\n * webhook as active or inactive.\n */\nexport interface WebhookStatusUpdate {\n  /** Whether the webhook is active. */\n  isActive: boolean;\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove NFT filters for a {@link NftActivityWebhook}.\n */\nexport interface WebhookNftFilterUpdate {\n  /** The filters to additionally track. */\n  addFilters: NftFilter[];\n  /** Existing filters to remove. */\n  removeFilters: NftFilter[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove NFT filters for a {@link NftMetadataUpdateWebhook}.\n */\nexport interface WebhookNftMetadataFilterUpdate {\n  /** The filters to additionally track. */\n  addMetadataFilters: NftFilter[];\n  /** Existing filters to remove. */\n  removeMetadataFilters: NftFilter[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove addresses for a {@link AddressActivityWebhook}.\n */\nexport interface WebhookAddressUpdate {\n  /** The addresses to additionally track. */\n  addAddresses: string[];\n  /** Existing addresses to remove. */\n  removeAddresses: string[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to replace\n * all existing addresses for a {@link AddressActivityWebhook}.\n */\nexport interface WebhookAddressOverride {\n  /** The new addresses to track. Existing addresses will be removed. */\n  newAddresses: string[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link NftActivityWebhook}.\n */\nexport type NftWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookNftFilterUpdate>;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link NftMetadataUpdateWebhook}.\n */\nexport type NftMetadataWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookNftMetadataFilterUpdate>;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link CustomGraphqlWebhook}.\n */\nexport type CustomGraphqlWebhookUpdate = WebhookStatusUpdate;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link AddressActivityWebhook}.\n */\nexport type AddressWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookAddressUpdate>\n  | WebhookAddressOverride;\n\n/**\n * Transaction object used in {@link DebugNamespace.traceCall}, {@link TransactNamespace.simulateAssetChanges} and {@link TransactNamespace.simulateExecution}.\n */\nexport interface DebugTransaction {\n  /** The address the transaction is directed to. */\n  to?: string;\n  /** The address the transaction is sent from. */\n  from?: string;\n  /** The gas provided for the transaction execution, as a hex string. */\n  gas?: string;\n  /** The gas price to use as a hex string. */\n  gasPrice?: string;\n  /** The value associated with the transaction as a hex string. */\n  value?: string;\n  /** The data associated with the transaction. */\n  data?: string;\n}\n\n/**\n * Commitment level of the target block with using methods in the\n * {@link DebugNamespace}\n */\nexport enum CommitmentLevel {\n  /**\n   * Sample next block inferred by Alchemy built on top of the latest block.\n   * This contains the set of transactions taken from the local mempool and\n   * is a proxy for blocks that have not been mined yet.\n   */\n  PENDING = 'pending',\n  /**\n   * The most recent block in the canonical chain observed by Alchemy. Note that\n   * this block may be re-orged out of the canonical chain.\n   */\n  LATEST = 'latest',\n  /**\n   * The most recent crypto-economically secure block that cannot be re-orged\n   * outside of manual intervention driven by community coordination. This is\n   * only available on {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\n   */\n  SAFE = 'safe',\n  /**\n   * The most recent secure block that has been accepted by >2/3 of validators.\n   * This block is very unlikely to be re-orged. This is only available on\n   * {@link Network.ETH_GOERLI} and {@link Network.ETH_SEPOLIA}.\n   */\n  FINALIZED = 'finalized',\n  /**\n   * The lowest numbered block available that is usually the first block created.\n   */\n  EARLIEST = 'earliest'\n}\n\n/**\n * The block identifier to specify which block to run a debug call in, used for\n * methods in the {@link DebugNamespace}.\n */\nexport type BlockIdentifier = string | CommitmentLevel;\n\n/**\n * The type of tracer to use when running debug methods in the\n * {@link DebugNamespace}.\n */\nexport enum DebugTracerType {\n  CALL_TRACER = 'callTracer',\n  PRESTATE_TRACER = 'prestateTracer'\n}\n\n/**\n * Tracer used with debug methods in the {@link DebugNamespace}.\n *\n * This tracer tracks all call frames executed during a transaction, including\n * depth 0. The returned result {@link DebugCallTrace} is a nested list of call\n * frames executed as part of the call.\n *\n * Here are some things to note when using the call tracer:\n * - Calls to precompiles are also included in the result.\n * - In case a frame reverts, the field output will contain the raw return data.\n * - In case the top level frame reverts, its `revertReason` field will contain\n *   the parsed reason of revert as returned by the Solidity contract\n */\nexport interface DebugCallTracer {\n  /** Specified type is `CALL_TRACER`. */\n  type: DebugTracerType.CALL_TRACER;\n  /**\n   * Whether to only trace the main (top-level) calls and ignore sub-calls.\n   * Defaults to `false`.\n   */\n  onlyTopCall?: boolean;\n}\n\n/**\n * Tracer used with debug methods in the {@link DebugNamespace}.\n *\n * This tracer replays the transaction and tracks every part of state that was\n * touched during the transaction.\n *\n * Returns a {@link DebugPrestateTrace}. This contains sufficient information to\n * create a local execution of the transaction from a custom assembled genesis\n * block.\n */\nexport interface DebugPrestateTracer {\n  /** Specified type is `PRESTATE_TRACER`. */\n  type: DebugTracerType.PRESTATE_TRACER;\n  /**\n   * Whether to only trace the main (top-level) calls and ignore sub-calls.\n   * Defaults to `false`.\n   */\n  onlyTopCall?: boolean;\n}\n\n/**\n * Debug result returned when using a {@link DebugCallTracer}.\n */\nexport interface DebugCallTrace {\n  /** The type of call: `CALL` or `CREATE` for the top-level call. */\n  type: string;\n  /** From address of the transaction. */\n  from: string;\n  /** To address of the transaction. */\n  to: string;\n  /** Amount of value transfer as a hex string. */\n  value: string;\n  /** Gas provided for call as a hex string. */\n  gas: string;\n  /** Gas used during the call as a hex string. */\n  gasUsed: string;\n  /** Call data. */\n  input: string;\n  /** Return data. */\n  output: string;\n  /** Optional error field. */\n  error?: string;\n  /** Solidity revert reason, if the call reverted. */\n  revertReason?: string;\n  /** Array of sub-calls executed as part of the original call. */\n  calls?: DebugCallTrace[];\n}\n\n/**\n * Filter object used to filter logs by a specific block hash when using\n * {@link CoreNamespace.getLogs}.\n */\nexport interface FilterByBlockHash extends EventFilter {\n  /** The specific block hash to search for logs matching the filter. */\n  blockHash?: string;\n}\n\n/**\n * Filter object used to filter logs by block number range when using\n * {@link CoreNamespace.getLogs}\n */\nexport interface Filter extends EventFilter {\n  /** The starting block (inclusive) to search for logs matching the filter. */\n  fromBlock?: BlockTag;\n  /** The end block (inclusive) to search for logs matching the filter.*/\n  toBlock?: BlockTag;\n}\n\n/**\n * Filter object used to filter logs by when using {@link CoreNamespace.getLogs}\n */\nexport interface EventFilter {\n  /** The address to filter by. If omitted, filters for all addresses. */\n  address?: string | string[];\n  /** The topics to filter by, or null to match any topics. */\n  topics?: Array<string | Array<string> | null>;\n}\n\n/**\n * Debug result returned by a {@link DebugPrestateTracer}.\n *\n * The keys are the addresses of the accounts, mapped to its corresponding state.\n */\nexport type DebugPrestateTrace = Record<string, DebugPrestate>;\n\n/** The */\nexport interface DebugPrestate {\n  /** Balance of the account in wei as a hex string. */\n  balance: string;\n  /** Nonce */\n  nonce: number;\n  /** Hex-encoded bytecode. */\n  code: string;\n  /** Storage slots of the contract. */\n  storage: Record<string, string>;\n}\n\n/**\n * Requires at least one of the properties to be set.\n *\n * Implementation copied over from\n * {@link https://learn.microsoft.com/en-us/javascript/api/@azure/keyvault-certificates/requireatleastone?view=azure-node-latest}\n */\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> &\n    Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\n/** Requires an array with at least one value. */\nexport type NonEmptyArray<T> = [T, ...T[]];\n","import { Network as NetworkFromEthers } from '@ethersproject/networks';\n\nimport { Network } from '../types/types';\n\nexport const DEFAULT_ALCHEMY_API_KEY = 'demo';\nexport const DEFAULT_NETWORK = Network.ETH_MAINNET;\nexport const DEFAULT_MAX_RETRIES = 5;\nexport const DEFAULT_REQUEST_TIMEOUT = 0; // 0 = no timeout\n\n/**\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\n * endpoints only work with non eth json-rpc requests.\n *\n * @internal\n */\nexport function getAlchemyHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}.g.alchemy.com/v2/${apiKey}`;\n}\n\nexport function getAlchemyNftHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}.g.alchemy.com/nft/v2/${apiKey}`;\n}\n\nexport function getAlchemyWsUrl(network: Network, apiKey: string): string {\n  return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\n}\n\nexport function getAlchemyWebhookHttpUrl(): string {\n  return 'https://dashboard.alchemy.com/api';\n}\n\nexport enum AlchemyApiType {\n  BASE,\n  NFT,\n  WEBHOOK\n}\n\n/**\n * Mapping of network names to their corresponding Network strings used to\n * create an Ethers.js Provider instance.\n */\nexport const EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_ROPSTEN]: 'ropsten',\n  [Network.ETH_GOERLI]: 'goerli',\n  [Network.ETH_KOVAN]: 'kovan',\n  [Network.ETH_RINKEBY]: 'rinkeby',\n  [Network.ETH_SEPOLIA]: 'sepolia',\n  [Network.OPT_MAINNET]: 'optimism',\n  [Network.OPT_KOVAN]: 'optimism-kovan',\n  [Network.OPT_GOERLI]: 'optimism-goerli',\n  [Network.OPT_SEPOLIA]: 'optimism-sepolia',\n  [Network.ARB_MAINNET]: 'arbitrum',\n  [Network.ARB_RINKEBY]: 'arbitrum-rinkeby',\n  [Network.ARB_GOERLI]: 'arbitrum-goerli',\n  [Network.ARB_SEPOLIA]: 'arbitrum-sepolia',\n  [Network.MATIC_MAINNET]: 'matic',\n  [Network.MATIC_MUMBAI]: 'maticmum',\n  [Network.ASTAR_MAINNET]: 'astar-mainnet',\n  [Network.POLYGONZKEVM_MAINNET]: 'polygonzkevm-mainnet',\n  [Network.POLYGONZKEVM_TESTNET]: 'polygonzkevm-testnet',\n  [Network.BASE_MAINNET]: 'base-mainnet',\n  [Network.BASE_GOERLI]: 'base-goerli',\n  [Network.BASE_SEPOLIA]: 'base-sepolia'\n};\n\n/**\n * Mapping of network names to their corresponding Ethers Network objects. These\n * networks are not yet supported by Ethers and are listed here to be overriden\n * in the provider.\n */\nexport const CustomNetworks: { [key: string]: NetworkFromEthers } = {\n  'arbitrum-goerli': {\n    chainId: 421613,\n    name: 'arbitrum-goerli'\n  },\n  'arbitrum-sepolia': {\n    chainId: 421614,\n    name: 'arbitrum-sepolia'\n  },\n  'astar-mainnet': {\n    chainId: 592,\n    name: 'astar-mainnet'\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: 'sepolia'\n  },\n  'optimism-sepolia': {\n    chainId: 11155420,\n    name: 'optimism-sepolia'\n  },\n  'polygonzkevm-mainnet': {\n    chainId: 1101,\n    name: 'polygonzkevm-mainnet'\n  },\n  'polygonzkevm-testnet': {\n    chainId: 1442,\n    name: 'polygonzkevm-testnet'\n  },\n  'base-mainnet': {\n    chainId: 8453,\n    name: 'base-mainnet'\n  },\n  'base-goerli': {\n    chainId: 84531,\n    name: 'base-goerli'\n  },\n  'base-sepolia': {\n    chainId: 84532,\n    name: 'base-sepolia'\n  }\n};\n\nexport function noop(): void {\n  // It's a no-op\n}\n\nexport const ETH_NULL_VALUE = '0x';\n\nexport const ETH_NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\n","import { AlchemySettings, Network } from '../types/types';\nimport {\n  AlchemyApiType,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_MAX_RETRIES,\n  DEFAULT_NETWORK,\n  DEFAULT_REQUEST_TIMEOUT,\n  getAlchemyHttpUrl,\n  getAlchemyNftHttpUrl,\n  getAlchemyWebhookHttpUrl\n} from '../util/const';\nimport type { AlchemyProvider } from './alchemy-provider';\nimport type { AlchemyWebSocketProvider } from './alchemy-websocket-provider';\n\n/**\n * This class holds the config information for the SDK client instance and\n * exposes the underlying providers for more advanced use cases.\n *\n * @public\n */\nexport class AlchemyConfig {\n  /** The Alchemy API key. */\n  readonly apiKey: string;\n\n  /** The Network that this SDK is associated with. */\n  readonly network: Network;\n\n  /** The maximum number of retries to perform. */\n  readonly maxRetries: number;\n\n  /** Setting to enable automatic batching on json-rpc requests. Defaults to false.*/\n  readonly batchRequests: boolean;\n\n  /**\n   * The optional hardcoded URL to send requests to instead of using the network\n   * and apiKey.\n   */\n  readonly url?: string;\n\n  /** The optional Alchemy auth token to use when sending requests with the Notify API. */\n  readonly authToken?: string;\n\n  /**\n   * The optional Request timeout provided in `ms` for NFT and NOTIFY API. Defaults to 0.\n   */\n  readonly requestTimeout?: number;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseAlchemyProvider: Promise<AlchemyProvider> | undefined;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseAlchemyWssProvider:\n    | Promise<AlchemyWebSocketProvider>\n    | undefined;\n\n  constructor(config?: AlchemySettings) {\n    this.apiKey = config?.apiKey || DEFAULT_ALCHEMY_API_KEY;\n    this.network = config?.network || DEFAULT_NETWORK;\n    this.maxRetries = config?.maxRetries || DEFAULT_MAX_RETRIES;\n    this.url = config?.url;\n    this.authToken = config?.authToken;\n    this.batchRequests = config?.batchRequests || false;\n    this.requestTimeout = config?.requestTimeout || DEFAULT_REQUEST_TIMEOUT;\n  }\n\n  /**\n   * Returns the URL endpoint to send the HTTP request to. If a custom URL was\n   * provided in the config, that URL is returned. Otherwise, the default URL is\n   * from the network and API key.\n   *\n   * @param apiType - The type of API to get the URL for.\n   * @internal\n   */\n  _getRequestUrl(apiType: AlchemyApiType): string {\n    if (this.url !== undefined) {\n      return this.url;\n    } else if (apiType === AlchemyApiType.NFT) {\n      return getAlchemyNftHttpUrl(this.network, this.apiKey);\n    } else if (apiType === AlchemyApiType.WEBHOOK) {\n      return getAlchemyWebhookHttpUrl();\n    } else {\n      return getAlchemyHttpUrl(this.network, this.apiKey);\n    }\n  }\n\n  /**\n   * Returns an AlchemyProvider instance. Only one provider is created per\n   * Alchemy instance.\n   *\n   * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\n   * has been expanded to support Alchemy's Enhanced APIs.\n   *\n   * Most common methods on the provider are available as top-level methods on\n   * the {@link Alchemy} instance, but the provider is exposed here to access\n   * other less-common methods.\n   *\n   * @public\n   */\n  getProvider(): Promise<AlchemyProvider> {\n    if (!this._baseAlchemyProvider) {\n      this._baseAlchemyProvider = (async () => {\n        const { AlchemyProvider } = await import('./alchemy-provider');\n        return new AlchemyProvider(this);\n      })();\n    }\n    return this._baseAlchemyProvider;\n  }\n\n  /**\n   * Returns an AlchemyWebsocketProvider instance. Only one provider is created\n   * per Alchemy instance.\n   *\n   * The AlchemyWebSocketProvider is a wrapper around ether's\n   * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\n   * Subscription APIs, automatic backfilling, and other performance improvements.\n   *\n   * Most common methods on the provider are available as top-level methods on\n   * the {@link Alchemy} instance, but the provider is exposed here to access\n   * other less-common methods.\n   */\n  getWebSocketProvider(): Promise<AlchemyWebSocketProvider> {\n    if (!this._baseAlchemyWssProvider) {\n      this._baseAlchemyWssProvider = (async () => {\n        const { AlchemyWebSocketProvider } = await import(\n          './alchemy-websocket-provider'\n        );\n        return new AlchemyWebSocketProvider(this);\n      })();\n    }\n    return this._baseAlchemyWssProvider;\n  }\n}\n","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Converts a hex string to a decimal number.\n *\n * @param hexString - The hex string to convert.\n * @public\n */\nexport function fromHex(hexString: string): number {\n  return BigNumber.from(hexString).toNumber();\n}\n\n/**\n * Converts a number to a hex string.\n *\n * @param num - The number to convert to hex.\n * @public\n */\nexport function toHex(num: number): string {\n  return BigNumber.from(num).toHexString();\n}\n\n/**\n * Checks if a value is a hex string.\n *\n * @param possibleHexString - The value to check.\n * @public\n */\nexport function isHex(possibleHexString: string): boolean {\n  return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\nimport { BaseNft, Nft, NftContract } from '../api/nft';\nimport { toHex } from '../api/util';\nimport {\n  RawBaseNft,\n  RawContractBaseNft,\n  RawGetContractsForOwnerResponse,\n  RawGetNftSalesResponse,\n  RawNft,\n  RawNftAttributeRarity,\n  RawNftContract,\n  RawOpenSeaCollectionMetadata,\n  RawSpamInfo\n} from '../internal/raw-interfaces';\nimport {\n  GetContractsForOwnerResponse,\n  GetNftSalesResponse,\n  NftAttributeRarity,\n  NftSaleMarketplace,\n  NftSaleTakerType,\n  NftTokenType,\n  OpenSeaCollectionMetadata,\n  OpenSeaSafelistRequestStatus,\n  SpamInfo,\n  TokenUri\n} from '../types/types';\n\nexport function formatBlock(block: string | number): string {\n  if (typeof block === 'string') {\n    return block;\n  } else if (Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}\n\nfunction stringToEnum<T extends string>(\n  x: string,\n  enumb: Record<string, T>\n): T | undefined {\n  return Object.values(enumb).includes(x as T) ? (x as T) : undefined;\n}\n\nexport function getNftContractFromRaw(\n  rawNftContract: RawNftContract\n): NftContract {\n  return {\n    address: rawNftContract.address,\n    name: rawNftContract.contractMetadata.name,\n    symbol: rawNftContract.contractMetadata.symbol,\n    totalSupply: rawNftContract.contractMetadata.totalSupply,\n    tokenType: parseNftTokenType(rawNftContract.contractMetadata.tokenType),\n    openSea: parseOpenSeaMetadata(rawNftContract.contractMetadata.openSea),\n    contractDeployer: rawNftContract.contractMetadata.contractDeployer,\n    deployedBlockNumber: rawNftContract.contractMetadata.deployedBlockNumber\n  };\n}\n\nexport function getBaseNftFromRaw(rawBaseNft: RawBaseNft): BaseNft;\nexport function getBaseNftFromRaw(\n  rawContractBaseNft: RawContractBaseNft,\n  contractAddress: string\n): BaseNft;\nexport function getBaseNftFromRaw(\n  rawBaseNft: RawBaseNft | RawContractBaseNft,\n  contractAddress?: string\n): BaseNft {\n  return {\n    contract: contractAddress\n      ? { address: contractAddress }\n      : (rawBaseNft as RawBaseNft).contract,\n    tokenId: BigNumber.from(rawBaseNft.id.tokenId).toString(),\n    tokenType: parseNftTokenType(rawBaseNft.id.tokenMetadata?.tokenType)\n  };\n}\n\nexport function getNftFromRaw(rawNft: RawNft): Nft {\n  try {\n    const tokenType = parseNftTokenType(rawNft.id.tokenMetadata?.tokenType);\n    const spamInfo = parseSpamInfo(rawNft.spamInfo);\n\n    return {\n      contract: {\n        address: rawNft.contract.address,\n        name: rawNft.contractMetadata?.name,\n        symbol: rawNft.contractMetadata?.symbol,\n        totalSupply: rawNft.contractMetadata?.totalSupply,\n        tokenType,\n        openSea: parseOpenSeaMetadata(rawNft.contractMetadata?.openSea),\n        contractDeployer: rawNft.contractMetadata?.contractDeployer,\n        deployedBlockNumber: rawNft.contractMetadata?.deployedBlockNumber\n      },\n      tokenId: parseNftTokenId(rawNft.id.tokenId),\n      tokenType,\n      title: rawNft.title,\n      description: parseNftDescription(rawNft.description),\n      timeLastUpdated: rawNft.timeLastUpdated,\n      metadataError: rawNft.error,\n      rawMetadata: rawNft.metadata,\n      tokenUri: parseNftTokenUri(rawNft.tokenUri),\n      media: parseNftTokenUriArray(rawNft.media),\n      spamInfo,\n      acquiredAt: rawNft.acquiredAt\n    };\n  } catch (e) {\n    throw new Error('Error parsing the NFT response: ' + e);\n  }\n}\n\nexport function getNftSalesFromRaw(\n  rawNftSales: RawGetNftSalesResponse\n): GetNftSalesResponse {\n  return {\n    nftSales: rawNftSales.nftSales.map(rawNftSale => ({\n      marketplace: parseNftSaleMarketplace(rawNftSale.marketplace),\n      contractAddress: rawNftSale.contractAddress,\n      tokenId: rawNftSale.tokenId,\n      quantity: rawNftSale.quantity,\n      buyerAddress: rawNftSale.buyerAddress,\n      sellerAddress: rawNftSale.sellerAddress,\n      taker: parseNftTaker(rawNftSale.taker),\n      sellerFee: rawNftSale?.sellerFee,\n      marketplaceFee: rawNftSale?.protocolFee,\n      protocolFee: rawNftSale?.protocolFee,\n      royaltyFee: rawNftSale?.royaltyFee,\n      blockNumber: rawNftSale?.blockNumber,\n      logIndex: rawNftSale.logIndex,\n      bundleIndex: rawNftSale.bundleIndex,\n      transactionHash: rawNftSale.transactionHash\n    })),\n    validAt: {\n      blockNumber: rawNftSales.validAt.blockNumber,\n      blockHash: rawNftSales.validAt.blockHash ?? undefined,\n      blockTimestamp: rawNftSales.validAt.blockTimestamp ?? undefined\n    },\n    pageKey: rawNftSales?.pageKey\n  };\n}\n\nfunction parseNftSaleMarketplace(marketplace: string): NftSaleMarketplace {\n  switch (marketplace) {\n    case 'looksrare':\n      return NftSaleMarketplace.LOOKSRARE;\n    case 'seaport':\n      return NftSaleMarketplace.SEAPORT;\n    case 'x2y2':\n      return NftSaleMarketplace.X2Y2;\n    case 'wyvern':\n      return NftSaleMarketplace.WYVERN;\n    case 'cryptopunks':\n      return NftSaleMarketplace.CRYPTOPUNKS;\n    case 'blur':\n      return NftSaleMarketplace.BLUR;\n    default:\n      return NftSaleMarketplace.UNKNOWN;\n  }\n}\n\nfunction parseNftTaker(taker: string): NftSaleTakerType {\n  // The `.toLowerCase()` call is needed because the API returns the capitalized values\n  switch (taker.toLowerCase()) {\n    case 'buyer':\n      return NftSaleTakerType.BUYER;\n    case 'seller':\n      return NftSaleTakerType.SELLER;\n    default:\n      throw new Error(`Unsupported NftSaleTakerType ${taker}`);\n  }\n}\n\nexport function getNftRarityFromRaw(\n  rawNftRarity: RawNftAttributeRarity[]\n): NftAttributeRarity[] {\n  return rawNftRarity.map(({ prevalence, trait_type, value }) => ({\n    prevalence,\n    traitType: trait_type,\n    value\n  }));\n}\n\nexport function getContractsForOwnerFromRaw(\n  rawContractsForOwner: RawGetContractsForOwnerResponse\n): GetContractsForOwnerResponse {\n  return {\n    pageKey: rawContractsForOwner?.pageKey,\n    totalCount: rawContractsForOwner.totalCount,\n    contracts: rawContractsForOwner.contracts.map(contract => {\n      return {\n        address: contract.address,\n        totalSupply: contract.totalSupply,\n        isSpam: contract.isSpam,\n        media: contract.media,\n        numDistinctTokensOwned: contract.numDistinctTokensOwned,\n        tokenId: contract.tokenId,\n        totalBalance: contract.totalBalance,\n        name: contract.name,\n        title: contract.title,\n        openSea: parseOpenSeaMetadata(contract?.opensea),\n        symbol: contract?.symbol,\n        tokenType: parseNftTokenType(contract?.tokenType),\n        contractDeployer: contract.contractDeployer,\n        deployedBlockNumber: contract.deployedBlockNumber\n      };\n    })\n  };\n}\n\nfunction parseNftTokenId(tokenId: string): string {\n  // We have to normalize the token id here since the backend sometimes\n  // returns the token ID as a hex string and sometimes as an integer.\n  return BigNumber.from(tokenId).toString();\n}\n\nfunction parseNftTokenType(tokenType: string | undefined): NftTokenType {\n  switch (tokenType) {\n    case 'erc721':\n    case 'ERC721':\n      return NftTokenType.ERC721;\n    case 'erc1155':\n    case 'ERC1155':\n      return NftTokenType.ERC1155;\n    case 'no_supported_nft_standard':\n    case 'NO_SUPPORTED_NFT_STANDARD':\n      return NftTokenType.NO_SUPPORTED_NFT_STANDARD;\n    case 'not_a_contract':\n    case 'NOT_A_CONTRACT':\n      return NftTokenType.NOT_A_CONTRACT;\n    default:\n      return NftTokenType.UNKNOWN;\n  }\n}\n\nfunction parseSpamInfo(\n  spamInfo: RawSpamInfo | undefined\n): SpamInfo | undefined {\n  if (!spamInfo) {\n    return undefined;\n  }\n  const { isSpam, classifications } = spamInfo;\n  return {\n    isSpam: isSpam === 'true',\n    classifications\n  };\n}\n\nfunction parseNftDescription(description?: string | string[]): string {\n  if (description === undefined) {\n    return '';\n  }\n\n  // TODO: Remove after backend adds JSON stringification.\n  if (!Array.isArray(description) && typeof description === 'object') {\n    return JSON.stringify(description);\n  }\n\n  return typeof description === 'string' ? description : description.join(' ');\n}\n\nfunction parseNftTokenUri(uri: TokenUri | undefined): TokenUri | undefined {\n  if (uri && uri.raw.length === 0 && uri.gateway.length == 0) {\n    return undefined;\n  }\n  return uri;\n}\n\nfunction parseNftTokenUriArray(arr: TokenUri[] | undefined): TokenUri[] {\n  if (arr === undefined) {\n    return [];\n  }\n  return arr.filter(uri => parseNftTokenUri(uri) !== undefined);\n}\n\nexport function parseOpenSeaMetadata(\n  openSea: RawOpenSeaCollectionMetadata | undefined\n): OpenSeaCollectionMetadata | undefined {\n  if (openSea === undefined) {\n    return undefined;\n  }\n  return {\n    floorPrice: openSea.floorPrice,\n    collectionName: openSea.collectionName,\n    safelistRequestStatus:\n      openSea.safelistRequestStatus !== undefined\n        ? stringToEnum(\n            openSea.safelistRequestStatus,\n            OpenSeaSafelistRequestStatus\n          )\n        : undefined,\n    imageUrl: openSea.imageUrl,\n    description: openSea.description,\n    externalUrl: openSea.externalUrl,\n    twitterUsername: openSea.twitterUsername,\n    discordUrl: openSea.discordUrl,\n    lastIngestedAt: openSea.lastIngestedAt\n  };\n}\n\nexport const IS_BROWSER = typeof window !== 'undefined' && window !== null;\n\n/** Recursively converts all `null` fields to `undefined. */\n// TODO: Add typing support so it doesn't return `any`.\nexport function nullsToUndefined<T>(obj: T): any {\n  if (obj === null) {\n    return undefined as any;\n  }\n\n  // if `obj` is an object, recursively convert all `null` fields to `undefined`.\n  if (typeof obj === 'object') {\n    for (const key in obj) {\n      obj[key] = nullsToUndefined(obj[key]) as any;\n    }\n  }\n  return obj as any;\n}\n","import type { Log } from '@ethersproject/abstract-provider';\nimport { resolveProperties } from '@ethersproject/properties';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { toHex } from '../api/util';\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersWithMetadataParams,\n  AssetTransfersWithMetadataResponse,\n  Filter,\n  FilterByBlockHash,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse\n} from '../types/types';\nimport { formatBlock } from '../util/util';\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link CoreNamespace}. By moving the methods out into a separate file,\n * other namespaces can access these methods without depending on the entire\n * CoreNamespace, or override the `srcMethod` param used for logging.\n */\n\n/**\n * Gets the asset transfers for the provided params.\n */\nexport async function getAssetTransfers(\n  config: AlchemyConfig,\n  params: AssetTransfersWithMetadataParams | AssetTransfersParams,\n  srcMethod = 'getAssetTransfers'\n): Promise<AssetTransfersResponse | AssetTransfersWithMetadataResponse> {\n  const provider = await config.getProvider();\n  if (params.fromAddress) {\n    params.fromAddress = await provider._getAddress(params.fromAddress);\n  }\n  if (params.toAddress) {\n    params.toAddress = await provider._getAddress(params.toAddress);\n  }\n  return provider._send(\n    'alchemy_getAssetTransfers',\n    [\n      {\n        ...params,\n        fromBlock:\n          params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n        toBlock:\n          params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n        maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n      }\n    ],\n    srcMethod\n  );\n}\n\nexport async function getTransactionReceipts(\n  config: AlchemyConfig,\n  params: TransactionReceiptsParams,\n  srcMethod = 'getTransactionReceipts'\n): Promise<TransactionReceiptsResponse> {\n  const provider = await config.getProvider();\n  return provider._send('alchemy_getTransactionReceipts', [params], srcMethod);\n}\n\n/**\n * This method is based on the ethers implementation of getLogs, but is expanded\n * to support specifying an address array in the filter.\n *\n * The main modifications made to support an address array are:\n * - Custom `getFilter()` method that supports an address array\n * - Use of `arrayOf()` formatter to format the logs to avoid the `Formatter` import.\n * - Use of `provider.send()` to avoid formatting logic in `provider.perform()`.\n */\nexport async function getLogs(\n  config: AlchemyConfig,\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n): Promise<Array<Log>> {\n  const provider = await config.getProvider();\n  await provider.getNetwork();\n  const params = await resolveProperties({\n    filter: getFilter(config, filter)\n  });\n\n  const logs: Array<Log> = await provider.send('eth_getLogs', [params.filter]);\n  logs.forEach(log => {\n    if (log.removed == null) {\n      log.removed = false;\n    }\n  });\n  return arrayOf(provider.formatter.filterLog.bind(provider.formatter))(logs);\n}\n\n/**\n * This method is based on and copied from the ethers implementation of\n * `JsonRpcProvider._getFilter()`, but is extended to support an address array.\n *\n * This implementation is a hacky way to get around the ethers formatter. The\n * formatter is used to check the types of the `filter` params, but ethers does\n * not allow an array in the `address` field. To preserve the ethers formatter\n * on the other fields, we use the formatter to check the types of those other\n * fields, and then manually check the `address` field last.\n */\nasync function getFilter(\n  config: AlchemyConfig,\n  filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n): Promise<Filter | FilterByBlockHash> {\n  // START MODIFIED CODE\n  const provider = await config.getProvider();\n  const resolvedFilter = await filter;\n  let result: any = {};\n  // END MODIFIED CODE\n\n  ['blockHash', 'topics'].forEach(key => {\n    if ((resolvedFilter as any)[key] == null) {\n      return;\n    }\n    result[key] = (resolvedFilter as any)[key];\n  });\n\n  ['fromBlock', 'toBlock'].forEach(key => {\n    if ((resolvedFilter as any)[key] == null) {\n      return;\n    }\n    result[key] = provider._getBlockTag((resolvedFilter as any)[key]);\n  });\n\n  // BEGIN MODIFIED CODE\n  // Format the `result` object using the ethers formatter without the `address`\n  // field.\n  result = provider.formatter.filter(await resolveProperties(result));\n\n  // After formatting the other fields, manually format the `address` field\n  // before adding it to the `result` object.\n  if (Array.isArray(resolvedFilter.address)) {\n    result.address = await Promise.all(\n      resolvedFilter.address.map(async (address: string) =>\n        provider._getAddress(address)\n      )\n    );\n  } else if (resolvedFilter.address != null) {\n    result.address = await provider._getAddress(resolvedFilter.address);\n  }\n\n  return result;\n  // END MODIFIED CODE\n}\n\n/**\n * DO NOT MODIFY.\n *\n * This function is directly copied over from ethers implementation of\n * `Formatter.arrayOf()`. It is copied here to avoid having to import the\n * `Formatter` class or `FormatterFunc` type from ethers, that are not part of\n * the default export.\n *\n * This function returns a function that applies the formatter to an array of\n * values, and is used to format the logs returned by `getLogs()`.\n */\nfunction arrayOf(format: any): any {\n  return function (array: any): Array<any> {\n    if (!Array.isArray(array)) {\n      throw new Error('not an array');\n    }\n\n    const result: any = [];\n\n    array.forEach(value => {\n      result.push(format(value));\n    });\n\n    return result;\n  };\n}\n","import type {\n  Block,\n  BlockTag,\n  BlockWithTransactions,\n  FeeData,\n  Log,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport type { Network as EthersNetworkAlias } from '@ethersproject/networks/lib/types';\nimport type { Deferrable } from '@ethersproject/properties';\n\nimport {\n  getAssetTransfers,\n  getLogs,\n  getTransactionReceipts\n} from '../internal/core-api';\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersWithMetadataParams,\n  AssetTransfersWithMetadataResponse,\n  DeployResult,\n  Filter,\n  FilterByBlockHash,\n  GetTokensForOwnerOptions,\n  GetTokensForOwnerResponse,\n  TokenBalanceType,\n  TokenBalancesOptionsDefaultTokens,\n  TokenBalancesOptionsErc20,\n  TokenBalancesResponse,\n  TokenBalancesResponseErc20,\n  TokenMetadataResponse,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse\n} from '../types/types';\nimport { ETH_NULL_VALUE } from '../util/const';\nimport { nullsToUndefined } from '../util/util';\nimport { AlchemyConfig } from './alchemy-config';\nimport { toHex } from './util';\nimport { formatUnits } from './utils';\n\n/**\n * The core namespace contains all commonly-used [Ethers.js\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\n * methods. If you are already using Ethers.js, you should be simply able to\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\n * provider methods and it should just work.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.core`.\n */\nexport class CoreNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Returns the balance of a given address as of the provided block.\n   *\n   * @param addressOrName The address or name of the account to get the balance for.\n   * @param blockTag The optional block number or hash to get the balance for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getBalance(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.getBalance(addressOrName, blockTag);\n  }\n\n  /**\n   * Checks if the provided address is a smart contract.\n   *\n   * @param address The address to check type for.\n   * @public\n   */\n  async isContractAddress(address: string): Promise<boolean> {\n    const provider = await this.config.getProvider();\n    const code = await provider.getCode(address);\n    return code !== '0x';\n  }\n\n  /**\n   * Returns the contract code of the provided address at the block. If there is\n   * no contract deployed, the result is `0x`.\n   *\n   * @param addressOrName The address or name of the account to get the code for.\n   * @param blockTag The optional block number or hash to get the code for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getCode(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.getCode(addressOrName, blockTag);\n  }\n\n  /**\n   * Return the value of the provided position at the provided address, at the\n   * provided block in `Bytes32` format.\n   *\n   * @param addressOrName The address or name of the account to get the code for.\n   * @param position The position of the storage slot to get.\n   * @param blockTag The optional block number or hash to get the code for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getStorageAt(\n    addressOrName: string | Promise<string>,\n    position: BigNumberish | Promise<BigNumberish>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.getStorageAt(addressOrName, position, blockTag);\n  }\n\n  /**\n   * Returns the number of transactions ever sent from the provided address, as\n   * of the provided block tag. This value is used as the nonce for the next\n   * transaction from the address sent to the network.\n   *\n   * @param addressOrName The address or name of the account to get the nonce for.\n   * @param blockTag The optional block number or hash to get the nonce for.\n   * @public\n   */\n  async getTransactionCount(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<number> {\n    const provider = await this.config.getProvider();\n    return provider.getTransactionCount(addressOrName, blockTag);\n  }\n\n  /**\n   * Returns the block from the network based on the provided block number or\n   * hash. Transactions on the block are represented as an array of transaction\n   * hashes. To get the full transaction details on the block, use\n   * {@link getBlockWithTransactions} instead.\n   *\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\n   * @public\n   */\n  async getBlock(\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>\n  ): Promise<Block> {\n    const provider = await this.config.getProvider();\n    return provider.getBlock(blockHashOrBlockTag);\n  }\n\n  /**\n   * Returns the block from the network based on the provided block number or\n   * hash. Transactions on the block are represented as an array of\n   * {@link TransactionResponse} objects.\n   *\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\n   * @public\n   */\n  async getBlockWithTransactions(\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>\n  ): Promise<BlockWithTransactions> {\n    const provider = await this.config.getProvider();\n    return provider.getBlockWithTransactions(blockHashOrBlockTag);\n  }\n\n  /**\n   * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\n   *\n   * @public\n   */\n  async getNetwork(): Promise<EthersNetworkAlias> {\n    const provider = await this.config.getProvider();\n    return provider.getNetwork();\n  }\n\n  /**\n   * Returns the block number of the most recently mined block.\n   *\n   * @public\n   */\n  async getBlockNumber(): Promise<number> {\n    const provider = await this.config.getProvider();\n    return provider.getBlockNumber();\n  }\n\n  /**\n   * Returns the best guess of the current gas price to use in a transaction.\n   *\n   * @public\n   */\n  async getGasPrice(): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.getGasPrice();\n  }\n\n  /**\n   * Returns the recommended fee data to use in a transaction.\n   *\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\n   * should be used.\n   *\n   * For legacy transactions and networks which do not support EIP-1559, the\n   * gasPrice should be used.\n   *\n   * @public\n   */\n  async getFeeData(): Promise<FeeData> {\n    const provider = await this.config.getProvider();\n    return provider.getFeeData();\n  }\n\n  /**\n   * Returns a Promise which will stall until the network has heen established,\n   * ignoring errors due to the target node not being active yet.\n   *\n   * This can be used for testing or attaching scripts to wait until the node is\n   * up and running smoothly.\n   *\n   * @public\n   */\n  async ready(): Promise<EthersNetworkAlias> {\n    const provider = await this.config.getProvider();\n    return provider.ready;\n  }\n\n  /**\n   * Returns the result of executing the transaction, using call. A call does\n   * not require any ether, but cannot change any state. This is useful for\n   * calling getters on Contracts.\n   *\n   * @param transaction The transaction to execute.\n   * @param blockTag The optional block number or hash to get the call for.\n   * @public\n   */\n  async call(\n    transaction: Deferrable<TransactionRequest>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.call(transaction, blockTag);\n  }\n\n  /**\n   * Returns an estimate of the amount of gas that would be required to submit\n   * transaction to the network.\n   *\n   * An estimate may not be accurate since there could be another transaction on\n   * the network that was not accounted for, but after being mined affects the\n   * relevant state.\n   *\n   * This is an alias for {@link TransactNamespace.estimateGas}.\n   *\n   * @param transaction The transaction to estimate gas for.\n   * @public\n   */\n  async estimateGas(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.estimateGas(transaction);\n  }\n\n  /**\n   * Returns the transaction with hash or null if the transaction is unknown.\n   *\n   * If a transaction has not been mined, this method will search the\n   * transaction pool. Various backends may have more restrictive transaction\n   * pool access (e.g. if the gas price is too low or the transaction was only\n   * recently sent and not yet indexed) in which case this method may also return null.\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransaction(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionResponse | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransaction(transactionHash);\n  }\n\n  /**\n   * Returns the transaction receipt for hash or null if the transaction has not\n   * been mined.\n   *\n   * To stall until the transaction has been mined, consider the\n   * waitForTransaction method below.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransactionReceipt(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransactionReceipt(transactionHash);\n  }\n\n  /**\n   * Submits transaction to the network to be mined. The transaction must be\n   * signed, and be valid (i.e. the nonce is correct and the account has\n   * sufficient balance to pay for the transaction).\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param signedTransaction The signed transaction to send.\n   * @public\n   */\n  async sendTransaction(\n    signedTransaction: string | Promise<string>\n  ): Promise<TransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider.sendTransaction(signedTransaction);\n  }\n\n  /**\n   * Returns a promise which will not resolve until specified transaction hash is mined.\n   *\n   * If {@link confirmations} is 0, this method is non-blocking and if the\n   * transaction has not been mined returns null. Otherwise, this method will\n   * block until the transaction has confirmed blocks mined on top of the block\n   * in which it was mined.\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to wait for.\n   * @param confirmations The number of blocks to wait for.\n   * @param timeout The maximum time to wait for the transaction to confirm.\n   * @public\n   */\n  async waitForTransaction(\n    transactionHash: string,\n    confirmations?: number,\n    timeout?: number\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.waitForTransaction(transactionHash, confirmations, timeout);\n  }\n\n  /**\n   * Returns an array of logs that match the provided filter.\n   *\n   * @param filter The filter object to use.\n   * @public\n   */\n  async getLogs(\n    filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n  ): Promise<Array<Log>> {\n    return getLogs(this.config, filter);\n  }\n\n  /**\n   * Allows sending a raw message to the Alchemy backend.\n   *\n   * @param method The method to call.\n   * @param params The parameters to pass to the method.\n   * @public\n   */\n  async send(method: string, params: Array<any>): Promise<any> {\n    const provider = await this.config.getProvider();\n    return provider.send(method, params);\n  }\n\n  /**\n   * Finds the address that deployed the provided contract and block number it\n   * was deployed in.\n   *\n   * NOTE: This method performs a binary search across all blocks since genesis\n   * and can take a long time to complete. This method is a convenience method\n   * that will eventually be replaced by a single call to an Alchemy endpoint\n   * with this information cached.\n   *\n   * @param contractAddress - The contract address to find the deployer for.\n   * @beta\n   */\n  async findContractDeployer(contractAddress: string): Promise<DeployResult> {\n    const provider = await this.config.getProvider();\n    const currentBlockNum = await provider.getBlockNumber();\n    if (\n      (await provider.getCode(contractAddress, currentBlockNum)) ===\n      ETH_NULL_VALUE\n    ) {\n      throw new Error(`Contract '${contractAddress}' does not exist`);\n    }\n\n    // Binary search for the block number that the contract was deployed in.\n    const firstBlock = await binarySearchFirstBlock(\n      0,\n      currentBlockNum + 1,\n      contractAddress,\n      this.config\n    );\n\n    // Find the first transaction in the block that matches the provided address.\n    const txReceipts = await getTransactionReceipts(\n      this.config,\n      {\n        blockNumber: toHex(firstBlock)\n      },\n      'findContractDeployer'\n    );\n    const matchingReceipt = txReceipts.receipts?.find(\n      receipt => receipt.contractAddress === contractAddress.toLowerCase()\n    );\n    return {\n      deployerAddress: matchingReceipt?.from,\n      blockNumber: firstBlock\n    };\n  }\n\n  /**\n   * Returns the ERC-20 token balances for a specific owner address.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string\n  ): Promise<TokenBalancesResponseErc20>;\n\n  /**\n   * Returns the token balances for a specific owner address given a list of contracts.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @param contractAddresses A list of contract addresses to check. If omitted,\n   *   all ERC-20 tokens will be checked.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string,\n    contractAddresses?: string[]\n  ): Promise<TokenBalancesResponse>;\n\n  /**\n   * Returns the ERC-20 token balances for a specific owner.\n   *\n   * This overload covers the erc-20 token type which includes a page key in the response.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @param options Token type options set to ERC-20 with optional page key.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string,\n    options: TokenBalancesOptionsErc20\n  ): Promise<TokenBalancesResponseErc20>;\n\n  /**\n   * Returns the token balances for a specific owner, fetching from the top 100\n   * tokens by 24 hour volume.\n   *\n   * This overload covers the default token type which includes a page key in\n   * the response.\n   *\n   * @param addressOrName The owner address to get the token balances for.\n   * @param options Token type options set to ERC-20 with optional page key.\n   * @public\n   */\n  async getTokenBalances(\n    addressOrName: string,\n    options: TokenBalancesOptionsDefaultTokens\n  ): Promise<TokenBalancesResponse>;\n\n  async getTokenBalances(\n    addressOrName: string,\n    contractAddressesOrOptions?:\n      | string[]\n      | TokenBalancesOptionsDefaultTokens\n      | TokenBalancesOptionsErc20\n  ) {\n    const provider = await this.config.getProvider();\n    const address = await provider._getAddress(addressOrName);\n    if (Array.isArray(contractAddressesOrOptions)) {\n      if (contractAddressesOrOptions.length > 1500) {\n        throw new Error(\n          'You cannot pass in more than 1500 contract addresses to getTokenBalances()'\n        );\n      }\n      if (contractAddressesOrOptions.length === 0) {\n        throw new Error(\n          'getTokenBalances() requires at least one contractAddress when using an array'\n        );\n      }\n      return provider._send(\n        'alchemy_getTokenBalances',\n        [address, contractAddressesOrOptions],\n        'getTokenBalances'\n      );\n    } else {\n      const tokenType =\n        contractAddressesOrOptions === undefined\n          ? TokenBalanceType.ERC20\n          : contractAddressesOrOptions.type;\n      const params: Array<string | { pageKey: string }> = [address, tokenType];\n      if (\n        contractAddressesOrOptions?.type === TokenBalanceType.ERC20 &&\n        contractAddressesOrOptions.pageKey\n      ) {\n        params.push({ pageKey: contractAddressesOrOptions.pageKey });\n      }\n      return provider._send(\n        'alchemy_getTokenBalances',\n        params,\n        'getTokenBalances'\n      );\n    }\n  }\n\n  /**\n   * Returns the tokens that the specified address owns, along with the amount\n   * of each token and the relevant metadata.\n   *\n   * @param addressOrName The owner address to get the tokens with balances for.\n   * @param options Additional options to pass to the request.\n   * @public\n   */\n  async getTokensForOwner(\n    addressOrName: string,\n    options?: GetTokensForOwnerOptions\n  ): Promise<GetTokensForOwnerResponse> {\n    const provider = await this.config.getProvider();\n    const address = await provider._getAddress(addressOrName);\n    const params: any[] = [\n      address,\n      options?.contractAddresses ?? TokenBalanceType.ERC20\n    ];\n    if (options?.pageKey) {\n      params.push({ pageKey: options.pageKey });\n    }\n    const response = (await provider._send(\n      'alchemy_getTokenBalances',\n      params,\n      'getTokensForOwner'\n    )) as TokenBalancesResponseErc20;\n\n    const formattedBalances = response.tokenBalances.map(balance => ({\n      contractAddress: balance.contractAddress,\n      rawBalance: BigNumber.from(balance.tokenBalance!).toString()\n    }));\n\n    const metadataPromises = await Promise.allSettled(\n      response.tokenBalances.map(token =>\n        provider._send(\n          'alchemy_getTokenMetadata',\n          [token.contractAddress],\n          'getTokensForOwner',\n          /* forceBatch= */ true\n        )\n      )\n    );\n    const metadata: TokenMetadataResponse[] = metadataPromises.map(p =>\n      p.status === 'fulfilled'\n        ? p.value\n        : {\n            name: null,\n            symbol: null,\n            decimals: null,\n            logo: null\n          }\n    );\n    const ownedTokens = formattedBalances.map((balance, index) => ({\n      ...balance,\n      ...metadata[index],\n      balance:\n        metadata[index].decimals !== null\n          ? formatUnits(balance.rawBalance, metadata[index].decimals!)\n          : undefined\n    }));\n\n    return {\n      tokens: ownedTokens.map(nullsToUndefined),\n      pageKey: response.pageKey\n    };\n  }\n\n  /**\n   * Returns metadata for a given token contract address.\n   *\n   * @param address The contract address to get metadata for.\n   * @public\n   */\n  async getTokenMetadata(address: string): Promise<TokenMetadataResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getTokenMetadata',\n      [address],\n      'getTokenMetadata'\n    );\n  }\n\n  /**\n   * Get transactions for specific addresses. See the web documentation for the\n   * full details:\n   * https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers\n   *\n   * This overload requires {@link AssetTransfersWithMetadataParams.withMetadata}\n   * to be set to `true`, which results in additional metadata returned in the\n   * response object.\n   *\n   * @param params An object containing fields for the asset transfer query\n   * @public\n   */\n  async getAssetTransfers(\n    params: AssetTransfersWithMetadataParams\n  ): Promise<AssetTransfersWithMetadataResponse>;\n\n  /**\n   * Get transactions for specific addresses. See the web documentation for the\n   * full details:\n   * https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers\n   *\n   * @param params An object containing fields for the asset transfer query.\n   * @public\n   */\n  async getAssetTransfers(\n    params: AssetTransfersParams\n  ): Promise<AssetTransfersResponse>;\n  async getAssetTransfers(\n    params: AssetTransfersWithMetadataParams | AssetTransfersParams\n  ): Promise<AssetTransfersResponse | AssetTransfersWithMetadataResponse> {\n    return getAssetTransfers(this.config, params);\n  }\n\n  /**\n   * Gets all transaction receipts for a given block by number or block hash.\n   *\n   * @param params An object containing fields for the transaction receipt query.\n   * @public\n   */\n  async getTransactionReceipts(\n    params: TransactionReceiptsParams\n  ): Promise<TransactionReceiptsResponse> {\n    return getTransactionReceipts(this.config, params);\n  }\n\n  /**\n   * Returns the underlying owner address for the provided ENS address, or `null`\n   * if the ENS name does not have an underlying address.\n   *\n   * @param name The ENS address name to resolve.\n   */\n  async resolveName(name: string): Promise<string | null> {\n    const provider = await this.config.getProvider();\n    return provider.resolveName(name);\n  }\n\n  /**\n   * Performs a reverse lookup of the address in ENS using the Reverse Registrar. If the name does not exist, or the forward lookup does not match, null is returned.\n   *\n   * An ENS name requires additional configuration to setup a reverse record, so not all ENS addresses will map back to the original ENS domain.\n   *\n   * @param address The address to look up the ENS domain name for.\n   */\n  async lookupAddress(address: string): Promise<string | null> {\n    const provider = await this.config.getProvider();\n    return provider.lookupAddress(address);\n  }\n}\n\n/**\n * Perform a binary search between an integer range of block numbers to find the\n * block number where the contract was deployed.\n *\n * @internal\n */\nasync function binarySearchFirstBlock(\n  start: number,\n  end: number,\n  address: string,\n  config: AlchemyConfig\n): Promise<number> {\n  if (start >= end) {\n    return end;\n  }\n\n  const mid = Math.floor((start + end) / 2);\n  const provider = await config.getProvider();\n  const code = await provider.getCode(address, mid);\n  if (code === ETH_NULL_VALUE) {\n    return binarySearchFirstBlock(mid + 1, end, address, config);\n  }\n  return binarySearchFirstBlock(start, mid, address, config);\n}\n","import {\n  BlockIdentifier,\n  DebugCallTrace,\n  DebugCallTracer,\n  DebugPrestateTrace,\n  DebugPrestateTracer,\n  DebugTransaction\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { hexStripZeros, hexValue, isHexString } from './utils';\n\n/**\n * The Debug namespace contains methods to access the non-standard RPC methods\n * for inspecting and debugging transactions.\n *\n * For more information on the different methods and use cases please read our\n * [documentation](https://docs.alchemy.com/reference/debug-api-quickstart).\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the debug namespace\n * via `alchemy.debug`.\n */\nexport class DebugNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Runs an `eth_call` with the context of the provided block execution using the\n   * final state of the parent block as the base.\n   *\n   * @param transaction The transaction to debug trace.\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceCall(\n    transaction: DebugTransaction,\n    blockIdentifier: BlockIdentifier,\n    tracer: DebugCallTracer\n  ): Promise<DebugCallTrace>;\n\n  /**\n   * Runs an `eth_call` with the context of the provided block execution using the\n   * final state of the parent block as the base.\n   *\n   * @param transaction The transaction to debug trace.\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceCall(\n    transaction: DebugTransaction,\n    blockIdentifier: BlockIdentifier,\n    tracer: DebugPrestateTracer\n  ): Promise<DebugPrestateTrace>;\n  async traceCall(\n    transaction: DebugTransaction,\n    blockIdentifier: BlockIdentifier,\n    tracer: DebugCallTracer | DebugPrestateTracer\n  ): Promise<DebugCallTrace | DebugPrestateTrace> {\n    const provider = await this.config.getProvider();\n    const params = [transaction, blockIdentifier, parseTracerParams(tracer)];\n    return provider._send('debug_traceCall', params, 'traceCall');\n  }\n\n  /**\n   * Attempts to run the transaction in the exact same manner as it was executed\n   * on the network. It will replay any transaction that may have been executed\n   * prior to this one before it and will then attempt to execute the transaction\n   * that corresponds to the given hash.\n   *\n   * @param transactionHash The transaction hash of the transaction to trace.\n   * @param tracer Tracer type and configuration.\n   * @param timeout  A duration string of decimal numbers that overrides the\n   * default timeout of 5 seconds for JavaScript-based tracing calls. Max\n   * timeout is \"10s\". Valid time units are \"ns\", \"us\", \"ms\", \"s\" each with\n   * optional fraction, such as \"300ms\" or \"2s45ms\".\n   */\n  async traceTransaction(\n    transactionHash: string,\n    tracer: DebugCallTracer,\n    timeout?: string\n  ): Promise<DebugCallTrace>;\n\n  /**\n   * Attempts to run the transaction in the exact same manner as it was executed\n   * on the network. It will replay any transaction that may have been executed\n   * prior to this one before it and will then attempt to execute the transaction\n   * that corresponds to the given hash.\n   *\n   * @param transactionHash The transaction hash of the transaction to trace.\n   * @param tracer Tracer type and configuration.\n   * @param timeout  A duration string of decimal numbers that overrides the\n   * default timeout of 5 seconds for JavaScript-based tracing calls. Max\n   * timeout is \"10s\". Valid time units are \"ns\", \"us\", \"ms\", \"s\" each with\n   * optional fraction, such as \"300ms\" or \"2s45ms\".\n   */\n  async traceTransaction(\n    transactionHash: string,\n    tracer: DebugPrestateTracer,\n    timeout?: string\n  ): Promise<DebugPrestateTrace>;\n  async traceTransaction(\n    transactionHash: string,\n    tracer: DebugCallTracer | DebugPrestateTracer,\n    timeout?: string\n  ): Promise<DebugCallTrace | DebugPrestateTrace> {\n    const provider = await this.config.getProvider();\n    const params = [transactionHash, parseTracerParams(tracer, timeout)];\n    return provider._send('debug_traceTransaction', params, 'traceTransaction');\n  }\n\n  /**\n   * Replays a block that has already been mined.\n   *\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceBlock(\n    blockIdentifier: BlockIdentifier | number,\n    tracer: DebugCallTracer\n  ): Promise<DebugCallTrace>;\n  /**\n   * Replays a block that has already been mined.\n   *\n   * @param blockIdentifier The block to debug the transaction in. Can be a\n   * block hash, block number hex string, or commitment level.\n   * @param tracer Tracer type and configuration.\n   */\n  traceBlock(\n    blockIdentifier: BlockIdentifier | number,\n    tracer: DebugPrestateTracer\n  ): Promise<DebugPrestateTrace>;\n  async traceBlock(\n    blockIdentifier: BlockIdentifier | number,\n    tracer: DebugCallTracer | DebugPrestateTracer\n  ): Promise<DebugCallTrace | DebugPrestateTrace> {\n    const provider = await this.config.getProvider();\n    let method: string;\n    let params: [string, RawTracer];\n    if (isHexString(blockIdentifier, 32)) {\n      method = 'debug_traceBlockByHash';\n      params = [blockIdentifier as string, parseTracerParams(tracer)];\n    } else {\n      method = 'debug_traceBlockByNumber';\n      const block =\n        typeof blockIdentifier === 'number'\n          ? hexStripZeros(hexValue(blockIdentifier))\n          : blockIdentifier;\n      params = [block as string, parseTracerParams(tracer)];\n    }\n    return provider._send(method, params, 'traceBlock');\n  }\n}\n\ninterface RawTracer {\n  tracer: string;\n  tracerConfig?: {\n    onlyTopCall?: boolean;\n    timeout?: string;\n  };\n}\n\nfunction parseTracerParams(\n  tracer: DebugCallTracer | DebugPrestateTracer,\n  timeout?: string\n): RawTracer {\n  return {\n    tracer: tracer.type,\n    ...(tracer.onlyTopCall !== undefined && {\n      tracerConfig: {\n        onlyTopCall: tracer.onlyTopCall,\n        timeout\n      }\n    })\n  };\n}\n","import { InputNftTokenType } from '../internal/nft-api';\nimport { NftTokenType } from '../types/types';\n\nexport function sanitizeTokenType(tokenType?: NftTokenType): InputNftTokenType {\n  if (tokenType === NftTokenType.ERC1155 || tokenType === NftTokenType.ERC721) {\n    return tokenType;\n  }\n  return undefined;\n}\n","/**\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\n * default, the log level is set to INFO.\n *\n * The order is a follows: DEBUG < INFO < WARN < ERROR\n *\n * All log types above the current log level will be outputted.\n */\nexport enum LogLevel {\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The level of verbosity for the logger.\n *\n * @public\n */\nexport type LogLevelString = 'debug' | 'info' | 'warn' | 'error' | 'silent';\n\nconst logLevelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT\n};\n\n// HACKY: Use the console method as a string rather than the function itself\n// in order to allow for mocking in tests.\nconst logLevelToConsoleFn = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\n\n/**\n * Configures the verbosity of logging. The default log level is `info`.\n *\n * @param logLevel - The verbosity of logging. Can be any of the following values:\n *\n *   - `debug`: The most verbose logging level.\n *   - `info`: The default logging level.\n *   - `warn`: A logging level for non-critical issues.\n *   - `error`: A logging level for critical issues.\n *   - `silent`: Turn off all logging.\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  loggerClient.logLevel = logLevelStringToEnum[logLevel];\n}\n\nexport function logDebug(message: string, ...args: unknown[]): void {\n  loggerClient.debug(message, args);\n}\n\nexport function logInfo(message: string, ...args: unknown[]): void {\n  loggerClient.info(message, args);\n}\n\nexport function logWarn(message: string, ...args: unknown[]): void {\n  loggerClient.warn(message, args);\n}\n\nexport function logError(message: string, ...args: unknown[]): void {\n  loggerClient.error(message, args);\n}\n\nexport class Logger {\n  /** The log level of the given Logger instance. */\n  private _logLevel = DEFAULT_LOG_LEVEL;\n\n  constructor() {}\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  debug(...args: unknown[]): void {\n    this._log(LogLevel.DEBUG, ...args);\n  }\n\n  info(...args: unknown[]): void {\n    this._log(LogLevel.INFO, ...args);\n  }\n\n  warn(...args: unknown[]): void {\n    this._log(LogLevel.WARN, ...args);\n  }\n\n  error(...args: unknown[]): void {\n    this._log(LogLevel.ERROR, ...args);\n  }\n\n  /**\n   * Forwards log messages to their corresponding console counterparts if the\n   * log level allows it.\n   */\n  private _log(logLevel: LogLevel, ...args: unknown[]): void {\n    if (logLevel < this._logLevel) {\n      return;\n    }\n    const now = new Date().toISOString();\n    const method =\n      logLevelToConsoleFn[logLevel as keyof typeof logLevelToConsoleFn];\n    if (method) {\n      console[method as 'log' | 'info' | 'warn' | 'error'](\n        `[${now}] Alchemy:`,\n        ...args.map(stringify)\n      );\n    } else {\n      throw new Error(\n        `Logger received an invalid logLevel (value: ${logLevel})`\n      );\n    }\n  }\n}\n\nfunction stringify(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return JSON.stringify(obj);\n    } catch (e) {\n      // Failed to convert to JSON, log the object directly.\n      return obj;\n    }\n  }\n}\n\n// Instantiate default logger for the SDK.\nconst loggerClient: Logger = new Logger();\n","// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nexport const VERSION = '2.12.0';\n","/**\n * Given a REST endpoint, method, and params, sends the request with axios and\n * returns the response.\n */\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nimport { VERSION } from '../version';\nimport { IS_BROWSER } from './util';\n\n/**\n * Helper function to send http requests using Axis.\n *\n * @private\n */\nexport function sendAxiosRequest<Req, Res>(\n  baseUrl: string,\n  restApiName: string,\n  methodName: string,\n  params: Req,\n  overrides?: AxiosRequestConfig\n): Promise<AxiosResponse<Res>> {\n  const requestUrl = baseUrl + '/' + restApiName;\n  const config: AxiosRequestConfig = {\n    ...overrides,\n    headers: {\n      ...overrides?.headers,\n      ...(!IS_BROWSER && { 'Accept-Encoding': 'gzip' }),\n      'Alchemy-Ethers-Sdk-Version': VERSION,\n      'Alchemy-Ethers-Sdk-Method': methodName\n    },\n    method: overrides?.method ?? 'GET',\n    url: requestUrl,\n    params\n  };\n  return axios(config);\n}\n","import { logDebug } from '../util/logger';\n\nexport const DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nexport const DEFAULT_BACKOFF_MULTIPLIER = 1.5;\nexport const DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\nexport const DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\n\n/**\n * Helper class for implementing exponential backoff and max retry attempts.\n *\n * @private\n * @internal\n */\nexport class ExponentialBackoff {\n  private readonly initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n  private readonly backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\n  private readonly maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n\n  private numAttempts = 0;\n  private currentDelayMs = 0;\n  private isInBackoff = false;\n\n  constructor(private readonly maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS) {}\n\n  /**\n   * Returns a promise that resolves after the the backoff delay. The delay is\n   * increased for each attempt. The promise is rejected if the maximum number\n   * of attempts is exceeded.\n   */\n  // TODO: beautify this into an async iterator.\n  backoff(): Promise<void> {\n    if (this.numAttempts >= this.maxAttempts) {\n      return Promise.reject(\n        new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`)\n      );\n    }\n    if (this.isInBackoff) {\n      return Promise.reject(\n        new Error('A backoff operation is already in progress')\n      );\n    }\n\n    const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\n    if (backoffDelayWithJitterMs > 0) {\n      logDebug(\n        'ExponentialBackoff.backoff',\n        `Backing off for ${backoffDelayWithJitterMs}ms`\n      );\n    }\n\n    // Calculate the next delay.\n    this.currentDelayMs *= this.backoffMultiplier;\n    this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\n    this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\n    this.numAttempts += 1;\n\n    return new Promise(resolve => {\n      this.isInBackoff = true;\n      setTimeout(() => {\n        this.isInBackoff = false;\n        resolve();\n      }, backoffDelayWithJitterMs);\n    });\n  }\n\n  /**\n   * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\n   *\n   * @private\n   * @param delayMs\n   */\n  private withJitterMs(delayMs: number): number {\n    return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\n  }\n}\n","import axios, { AxiosError, AxiosRequestConfig } from 'axios';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { AlchemyApiType } from '../util/const';\nimport { logDebug, logInfo } from '../util/logger';\nimport { sendAxiosRequest } from '../util/sendRest';\nimport { ExponentialBackoff } from './backoff';\n\n/**\n * A wrapper function to make http requests and retry if the request fails.\n *\n * @internal\n */\n// TODO: Wrap Axios error in AlchemyError.\nexport async function requestHttpWithBackoff<Req, Res>(\n  config: AlchemyConfig,\n  apiType: AlchemyApiType,\n  restApiName: string,\n  methodName: string,\n  params: Req,\n  overrides?: AxiosRequestConfig\n): Promise<Res> {\n  let lastError: Error | undefined = undefined;\n  const backoff = new ExponentialBackoff(config.maxRetries);\n  for (let attempt = 0; attempt < config.maxRetries + 1; attempt++) {\n    try {\n      if (lastError !== undefined) {\n        logInfo('requestHttp', `Retrying after error: ${lastError.message}`);\n      }\n\n      try {\n        await backoff.backoff();\n      } catch (err) {\n        // Backoff errors when the maximum number of attempts is reached. Break\n        // out of the loop to preserve the last error.\n        break;\n      }\n\n      const response = await sendAxiosRequest<Req, Res>(\n        config._getRequestUrl(apiType),\n        restApiName,\n        methodName,\n        params,\n        {\n          ...overrides,\n          timeout: config.requestTimeout\n        }\n      );\n\n      if (response.status === 200) {\n        logDebug(restApiName, `Successful request: ${restApiName}`);\n        return response.data;\n      } else {\n        logInfo(\n          restApiName,\n          `Request failed: ${restApiName}, ${response.status}, ${response.data}`\n        );\n        lastError = new Error(response.status + ': ' + response.data);\n      }\n    } catch (err) {\n      if (!axios.isAxiosError(err) || err.response === undefined) {\n        throw err;\n      }\n      // TODO: Standardize all errors into AlchemyError\n      lastError = new Error(err.response.status + ': ' + err.response.data);\n      if (!isRetryableHttpError(err, apiType)) {\n        break;\n      }\n    }\n  }\n  return Promise.reject(lastError);\n}\n\nfunction isRetryableHttpError(\n  err: AxiosError,\n  apiType: AlchemyApiType\n): boolean {\n  // TODO: remove 500s after webhooks are more stable.\n  const retryableCodes =\n    apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];\n  return (\n    err.response !== undefined && retryableCodes.includes(err.response.status)\n  );\n}\n\n/**\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\n * represents the property name containing the next page token.\n *\n * @internal\n */\nexport async function* paginateEndpoint<\n  ReqPageKey extends string,\n  ResPageKey extends string,\n  Req extends Partial<Record<string, any> & Record<ReqPageKey, string>>,\n  Res extends Partial<Record<string, any> & Record<ResPageKey, string>>\n>(\n  config: AlchemyConfig,\n  apiType: AlchemyApiType,\n  restApiName: string,\n  methodName: string,\n  reqPageKey: ReqPageKey,\n  resPageKey: ResPageKey,\n  params: Req\n): AsyncIterable<Res> {\n  let hasNext = true;\n  const requestParams = { ...params };\n  while (hasNext) {\n    const response = await requestHttpWithBackoff<Req, Res>(\n      config,\n      apiType,\n      restApiName,\n      methodName,\n      requestParams\n    );\n    yield response;\n    if (response[resPageKey] !== undefined) {\n      requestParams[reqPageKey] = response[resPageKey] as any;\n    } else {\n      hasNext = false;\n    }\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { BaseNft, Nft, NftContract } from '../api/nft';\nimport {\n  AssetTransfersCategory,\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersResult,\n  GetBaseNftsForContractOptions,\n  GetBaseNftsForOwnerOptions,\n  GetContractsForOwnerOptions,\n  GetContractsForOwnerResponse,\n  GetFloorPriceResponse,\n  GetMintedNftsOptions,\n  GetNftMetadataOptions,\n  GetNftSalesOptions,\n  GetNftSalesOptionsByContractAddress,\n  GetNftSalesResponse,\n  GetNftsForContractOptions,\n  GetNftsForOwnerOptions,\n  GetOwnersForContractOptions,\n  GetOwnersForContractResponse,\n  GetOwnersForContractWithTokenBalancesOptions,\n  GetOwnersForContractWithTokenBalancesResponse,\n  GetOwnersForNftResponse,\n  GetTransfersForContractOptions,\n  GetTransfersForOwnerOptions,\n  GetTransfersForOwnerTransferType,\n  NftAttributeRarity,\n  NftAttributesResponse,\n  NftContractBaseNftsResponse,\n  NftContractNftsResponse,\n  NftFilters,\n  NftMetadataBatchOptions,\n  NftMetadataBatchToken,\n  NftOrdering,\n  NftSaleMarketplace,\n  NftSaleTakerType,\n  NftTokenType,\n  OwnedBaseNft,\n  OwnedBaseNftsResponse,\n  OwnedNft,\n  OwnedNftsResponse,\n  RefreshContractResult,\n  RefreshState,\n  SortingOrder,\n  TransfersNftResponse\n} from '../types/types';\nimport { AlchemyApiType, ETH_NULL_ADDRESS } from '../util/const';\nimport { sanitizeTokenType } from '../util/inputSanitization';\nimport {\n  getBaseNftFromRaw,\n  getContractsForOwnerFromRaw,\n  getNftContractFromRaw,\n  getNftFromRaw,\n  getNftRarityFromRaw,\n  getNftSalesFromRaw\n} from '../util/util';\nimport { getAssetTransfers } from './core-api';\nimport { paginateEndpoint, requestHttpWithBackoff } from './dispatch';\nimport {\n  RawBaseNft,\n  RawContractBaseNft,\n  RawGetBaseNftsForContractResponse,\n  RawGetBaseNftsResponse,\n  RawGetContractsForOwnerResponse,\n  RawGetNftSalesResponse,\n  RawGetNftsForContractResponse,\n  RawGetNftsResponse,\n  RawGetOwnersForContractResponse,\n  RawNft,\n  RawNftAttributeRarity,\n  RawNftContract,\n  RawOwnedBaseNft,\n  RawOwnedNft,\n  RawReingestContractResponse\n} from './raw-interfaces';\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link NftNamespace}. By moving the methods out into a separate file,\n * other namespaces can access these methods without depending on the entire\n * NftNamespace.\n */\n\n/**\n * Get the NFT metadata for the provided contract address.\n */\nexport async function getNftMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  options?: GetNftMetadataOptions,\n  srcMethod = 'getNftMetadata'\n): Promise<Nft> {\n  const response = await requestHttpWithBackoff<GetNftMetadataParams, RawNft>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadata',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      tokenType: sanitizeTokenType(options?.tokenType),\n      tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n      refreshCache: options?.refreshCache\n    }\n  );\n  return getNftFromRaw(response);\n}\n\nexport async function getNftMetadataBatch(\n  config: AlchemyConfig,\n  tokens: Array<NftMetadataBatchToken>,\n  options?: NftMetadataBatchOptions\n): Promise<Nft[]> {\n  const data = {\n    tokens,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n    refreshCache: options?.refreshCache\n  };\n  const response = await requestHttpWithBackoff<{}, RawNft[]>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadataBatch',\n    'getNftMetadataBatch',\n    {},\n    {\n      method: 'POST',\n      data\n    }\n  );\n  return response.map(getNftFromRaw);\n}\n\nexport async function getContractMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'getContractMetadata'\n): Promise<NftContract> {\n  const response = await requestHttpWithBackoff<\n    GetContractMetadataParams,\n    RawNftContract\n  >(config, AlchemyApiType.NFT, 'getContractMetadata', srcMethod, {\n    contractAddress\n  });\n\n  return getNftContractFromRaw(response);\n}\n\nexport async function getContractMetadataBatch(\n  config: AlchemyConfig,\n  contractAddresses: string[]\n): Promise<NftContract[]> {\n  const response = await requestHttpWithBackoff<{}, RawNftContract[]>(\n    config,\n    AlchemyApiType.NFT,\n    'getContractMetadataBatch',\n    'getContractMetadataBatch',\n    {},\n    {\n      method: 'POST',\n      data: { contractAddresses }\n    }\n  );\n\n  return response.map(getNftContractFromRaw);\n}\n\nexport async function* getNftsForOwnerIterator(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions,\n  srcMethod = 'getNftsForOwnerIterator'\n): AsyncIterable<OwnedBaseNft | OwnedNft> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  for await (const response of paginateEndpoint(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTs',\n    srcMethod,\n    'pageKey',\n    'pageKey',\n    {\n      contractAddresses: options?.contractAddresses,\n      pageKey: options?.pageKey,\n      filters: options?.excludeFilters,\n      owner,\n      withMetadata\n    }\n  )) {\n    for (const ownedNft of response.ownedNfts as\n      | RawOwnedNft[]\n      | RawOwnedBaseNft[]) {\n      yield {\n        ...nftFromGetNftResponse(ownedNft),\n        balance: parseInt(ownedNft.balance)\n      };\n    }\n  }\n}\n\nexport async function getNftsForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions,\n  srcMethod = 'getNftsForOwner'\n): Promise<OwnedNftsResponse | OwnedBaseNftsResponse> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  const response = await requestHttpWithBackoff<\n    GetNftsAlchemyParams,\n    RawGetBaseNftsResponse | RawGetNftsResponse\n  >(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, {\n    contractAddresses: options?.contractAddresses,\n    pageKey: options?.pageKey,\n    filters: options?.excludeFilters,\n    excludeFilters: options?.excludeFilters,\n    includeFilters: options?.includeFilters,\n    owner,\n    pageSize: options?.pageSize,\n    withMetadata,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs,\n    orderBy: options?.orderBy\n  });\n  return {\n    ownedNfts: response.ownedNfts.map(res => ({\n      ...nftFromGetNftResponse(res),\n      balance: parseInt(res.balance)\n    })),\n    pageKey: response.pageKey,\n    totalCount: response.totalCount,\n    blockHash: response.blockHash\n  };\n}\n\nexport async function getNftsForContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?: GetBaseNftsForContractOptions | GetNftsForContractOptions,\n  srcMethod = 'getNftsForContract'\n): Promise<NftContractNftsResponse | NftContractBaseNftsResponse> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  const response = await requestHttpWithBackoff<\n    GetNftsForContractAlchemyParams,\n    RawGetBaseNftsForContractResponse | RawGetNftsForContractResponse\n  >(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, {\n    contractAddress,\n    startToken: options?.pageKey,\n    withMetadata,\n    limit: options?.pageSize ?? undefined,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs\n  });\n\n  return {\n    nfts: response.nfts.map(res =>\n      nftFromGetNftContractResponse(res, contractAddress)\n    ),\n    pageKey: response.nextToken\n  };\n}\n\nexport async function* getNftsForContractIterator(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?: GetBaseNftsForContractOptions | GetNftsForContractOptions,\n  srcMethod = 'getNftsForContractIterator'\n): AsyncIterable<BaseNft | Nft> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  for await (const response of paginateEndpoint(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTsForCollection',\n    srcMethod,\n    'startToken',\n    'nextToken',\n    {\n      contractAddress,\n      startToken: options?.pageKey,\n      withMetadata\n    }\n  )) {\n    for (const nft of response.nfts as RawContractBaseNft[] | RawNft[]) {\n      yield nftFromGetNftContractResponse(nft, contractAddress);\n    }\n  }\n}\n\nexport async function getOwnersForContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?:\n    | GetOwnersForContractWithTokenBalancesOptions\n    | GetOwnersForContractOptions,\n  srcMethod = 'getOwnersForContract'\n): Promise<\n  GetOwnersForContractResponse | GetOwnersForContractWithTokenBalancesResponse\n> {\n  // Cast to `any` to avoid more type wrangling.\n  const response: any = await requestHttpWithBackoff<\n    GetOwnersForNftContractAlchemyParams,\n    RawGetOwnersForContractResponse\n  >(config, AlchemyApiType.NFT, 'getOwnersForCollection', srcMethod, {\n    ...options,\n    contractAddress\n  });\n\n  return {\n    owners: response.ownerAddresses,\n    totalCount: response.totalCount,\n\n    // Only include the pageKey in the final response if it's defined\n    ...(response.pageKey !== undefined && { pageKey: response.pageKey })\n  };\n}\n\nexport async function getContractsForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetContractsForOwnerOptions,\n  srcMethod = 'getContractsForOwner'\n): Promise<GetContractsForOwnerResponse> {\n  const response = await requestHttpWithBackoff<\n    GetContractsForOwnerParams,\n    RawGetContractsForOwnerResponse\n  >(config, AlchemyApiType.NFT, 'getContractsForOwner', srcMethod, {\n    owner,\n    excludeFilters: options?.excludeFilters,\n    includeFilters: options?.includeFilters,\n    pageKey: options?.pageKey,\n    pageSize: options?.pageSize,\n    orderBy: options?.orderBy\n  });\n\n  return getContractsForOwnerFromRaw(response);\n}\n\nexport async function getOwnersForNft(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  options?: GetOwnersForContractOptions,\n  srcMethod = 'getOwnersForNft'\n): Promise<GetOwnersForNftResponse> {\n  return requestHttpWithBackoff(\n    config,\n    AlchemyApiType.NFT,\n    'getOwnersForToken',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      ...options\n    }\n  );\n}\n\nexport async function getMintedNfts(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetMintedNftsOptions\n): Promise<TransfersNftResponse> {\n  const provider = await config.getProvider();\n  const ownerAddress = await provider._getAddress(owner);\n  const category = nftTokenTypeToCategory(options?.tokenType);\n  const params: AssetTransfersParams = {\n    fromBlock: '0x0',\n    fromAddress: ETH_NULL_ADDRESS,\n    toAddress: ownerAddress,\n    excludeZeroValue: true,\n    contractAddresses: options?.contractAddresses,\n    category,\n    maxCount: 100,\n    pageKey: options?.pageKey\n  };\n  const response = await getAssetTransfers(config, params, 'getMintedNfts');\n  return getNftsForTransfers(config, response);\n}\n\nexport async function getTransfersForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  transferType: GetTransfersForOwnerTransferType,\n  options?: GetTransfersForOwnerOptions\n): Promise<TransfersNftResponse> {\n  const provider = await config.getProvider();\n  const ownerAddress = await provider._getAddress(owner);\n  const category = nftTokenTypeToCategory(options?.tokenType);\n  const params: AssetTransfersParams = {\n    fromBlock: '0x0',\n    excludeZeroValue: true,\n    contractAddresses: options?.contractAddresses,\n    category,\n    maxCount: 100,\n    pageKey: options?.pageKey\n  };\n\n  if (transferType === GetTransfersForOwnerTransferType.TO) {\n    params.toAddress = ownerAddress;\n  } else {\n    params.fromAddress = ownerAddress;\n  }\n  const transfersResponse = await getAssetTransfers(\n    config,\n    params,\n    'getTransfersForOwner'\n  );\n\n  return getNftsForTransfers(config, transfersResponse);\n}\n\nexport async function getTransfersForContract(\n  config: AlchemyConfig,\n  contract: string,\n  options?: GetTransfersForContractOptions\n): Promise<TransfersNftResponse> {\n  const category = [\n    AssetTransfersCategory.ERC721,\n    AssetTransfersCategory.ERC1155,\n    AssetTransfersCategory.SPECIALNFT\n  ];\n  const provider = await config.getProvider();\n  const fromBlock = options?.fromBlock\n    ? provider.formatter.blockTag(\n        await provider._getBlockTag(options.fromBlock)\n      )\n    : '0x0';\n  const toBlock = options?.toBlock\n    ? provider.formatter.blockTag(await provider._getBlockTag(options.toBlock))\n    : undefined;\n  const params: AssetTransfersParams = {\n    fromBlock,\n    toBlock,\n    excludeZeroValue: true,\n    contractAddresses: [contract],\n    order: options?.order,\n    category,\n    maxCount: 100,\n    pageKey: options?.pageKey\n  };\n\n  const transfersResponse = await getAssetTransfers(\n    config,\n    params,\n    'getTransfersForContract'\n  );\n\n  return getNftsForTransfers(config, transfersResponse);\n}\n\nfunction nftTokenTypeToCategory(\n  tokenType: NftTokenType | undefined\n): AssetTransfersCategory[] {\n  switch (tokenType) {\n    case NftTokenType.ERC721:\n      return [AssetTransfersCategory.ERC721];\n    case NftTokenType.ERC1155:\n      return [AssetTransfersCategory.ERC1155];\n    default:\n      return [\n        AssetTransfersCategory.ERC721,\n        AssetTransfersCategory.ERC1155,\n        AssetTransfersCategory.SPECIALNFT\n      ];\n  }\n}\n\nfunction parse1155Transfer(\n  transfer: AssetTransfersResult\n): NftMetadataBatchToken[] {\n  return transfer.erc1155Metadata!.map(metadata => ({\n    contractAddress: transfer.rawContract.address!,\n    tokenId: metadata.tokenId,\n    tokenType: NftTokenType.ERC1155\n  }));\n}\n\nexport async function checkNftOwnership(\n  config: AlchemyConfig,\n  owner: string,\n  contractAddresses: string[],\n  srcMethod = 'checkNftOwnership'\n): Promise<boolean> {\n  if (contractAddresses.length === 0) {\n    throw new Error('Must provide at least one contract address');\n  }\n  const response = await getNftsForOwner(\n    config,\n    owner,\n    {\n      contractAddresses,\n      omitMetadata: true\n    },\n    srcMethod\n  );\n  return response.ownedNfts.length > 0;\n}\n\nexport async function verifyNftOwnership(\n  config: AlchemyConfig,\n  owner: string,\n  contractAddresses: string | string[],\n  srcMethod = 'verifyNftOwnership'\n): Promise<boolean | { [contractAddress: string]: boolean }> {\n  if (typeof contractAddresses === 'string') {\n    const response = await getNftsForOwner(\n      config,\n      owner,\n      {\n        contractAddresses: [contractAddresses],\n        omitMetadata: true\n      },\n      srcMethod\n    );\n    return response.ownedNfts.length > 0;\n  } else {\n    if (contractAddresses.length === 0) {\n      throw new Error('Must provide at least one contract address');\n    }\n    const response = await getNftsForOwner(\n      config,\n      owner,\n      {\n        contractAddresses,\n        omitMetadata: true\n      },\n      srcMethod\n    );\n\n    // Create map where all input contract addresses are set to false, then flip\n    // owned nfts to true.\n    const result = contractAddresses.reduce(\n      (acc: { [contractAddress: string]: boolean }, curr) => {\n        acc[curr] = false;\n        return acc;\n      },\n      {}\n    );\n    for (const nft of response.ownedNfts) {\n      result[nft.contract.address] = true;\n    }\n    return result;\n  }\n}\n\nexport async function isSpamContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'isSpamContract'\n): Promise<boolean> {\n  return requestHttpWithBackoff<IsSpamContractParams, boolean>(\n    config,\n    AlchemyApiType.NFT,\n    'isSpamContract',\n    srcMethod,\n    {\n      contractAddress\n    }\n  );\n}\n\nexport async function getSpamContracts(\n  config: AlchemyConfig,\n  srcMethod = 'getSpamContracts'\n): Promise<string[]> {\n  return requestHttpWithBackoff<undefined, string[]>(\n    config,\n    AlchemyApiType.NFT,\n    'getSpamContracts',\n    srcMethod,\n    undefined\n  );\n}\n\nexport async function getFloorPrice(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'getFloorPrice'\n): Promise<GetFloorPriceResponse> {\n  return requestHttpWithBackoff<GetFloorPriceParams, GetFloorPriceResponse>(\n    config,\n    AlchemyApiType.NFT,\n    'getFloorPrice',\n    srcMethod,\n    {\n      contractAddress\n    }\n  );\n}\n\nexport async function getNftSales(\n  config: AlchemyConfig,\n  options: GetNftSalesOptions | GetNftSalesOptionsByContractAddress = {},\n  srcMethod = 'getNftSales'\n): Promise<GetNftSalesResponse> {\n  // Avoid ts compiler complaining about the contractAddress field.\n  const params: Partial<GetNftSalesOptionsByContractAddress> = {\n    ...options\n  };\n\n  const response = await requestHttpWithBackoff<\n    GetNftSalesParams,\n    RawGetNftSalesResponse\n  >(config, AlchemyApiType.NFT, 'getNFTSales', srcMethod, {\n    fromBlock: params?.fromBlock,\n    toBlock: params?.toBlock,\n    order: params?.order,\n    marketplace: params?.marketplace,\n    contractAddress: params?.contractAddress,\n    tokenId: params?.tokenId\n      ? BigNumber.from(params?.tokenId).toString()\n      : undefined,\n    sellerAddress: params?.sellerAddress,\n    buyerAddress: params?.buyerAddress,\n    taker: params?.taker,\n    limit: params?.limit,\n    pageKey: params?.pageKey\n  });\n\n  return getNftSalesFromRaw(response);\n}\n\nexport async function computeRarity(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  refreshCache?: boolean,\n  srcMethod = 'computeRarity'\n): Promise<NftAttributeRarity[]> {\n  const response = await requestHttpWithBackoff<\n    ComputeRarityParams,\n    RawNftAttributeRarity[]\n  >(config, AlchemyApiType.NFT, 'computeRarity', srcMethod, {\n    contractAddress,\n    tokenId: BigNumber.from(tokenId).toString(),\n    refreshCache\n  });\n\n  return getNftRarityFromRaw(response);\n}\n\nexport async function searchContractMetadata(\n  config: AlchemyConfig,\n  query: string,\n  srcMethod = 'searchContractMetadata'\n): Promise<NftContract[]> {\n  const response = await requestHttpWithBackoff<\n    SearchContractMetadataParams,\n    RawNftContract[]\n  >(config, AlchemyApiType.NFT, 'searchContractMetadata', srcMethod, {\n    query\n  });\n\n  return response.map(getNftContractFromRaw);\n}\n\nexport async function summarizeNftAttributes(\n  config: AlchemyConfig,\n  contractAddress: string,\n  refreshCache?: boolean,\n  srcMethod = 'summarizeNftAttributes'\n): Promise<NftAttributesResponse> {\n  return requestHttpWithBackoff<\n    SummarizeNftAttributesParams,\n    NftAttributesResponse\n  >(config, AlchemyApiType.NFT, 'summarizeNftAttributes', srcMethod, {\n    contractAddress,\n    refreshCache\n  });\n}\n\nexport async function refreshNftMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod = 'refreshNftMetadata'\n): Promise<boolean> {\n  const tokenIdString = BigNumber.from(tokenId!).toString();\n  const first = await getNftMetadata(\n    config,\n    contractAddress,\n    tokenIdString,\n    undefined,\n    srcMethod\n  );\n  const second = await refresh(\n    config,\n    contractAddress,\n    tokenIdString,\n    srcMethod\n  );\n  return first.timeLastUpdated !== second.timeLastUpdated;\n}\n\nexport async function refreshContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'refreshContract'\n): Promise<RefreshContractResult> {\n  const response = await requestHttpWithBackoff<\n    ReingestContractParams,\n    RawReingestContractResponse\n  >(config, AlchemyApiType.NFT, 'reingestContract', srcMethod, {\n    contractAddress\n  });\n\n  return {\n    contractAddress: response.contractAddress,\n    refreshState: parseReingestionState(response.reingestionState),\n    progress: response.progress\n  };\n}\n\nasync function refresh(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod: string\n): Promise<Nft> {\n  const response = await requestHttpWithBackoff<GetNftMetadataParams, RawNft>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadata',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      refreshCache: true\n    }\n  );\n  return getNftFromRaw(response);\n}\n\n/**\n * Helper method to convert a NFT response received from Alchemy backend to an\n * SDK NFT type.\n *\n * @internal\n */\nfunction nftFromGetNftResponse(\n  ownedNft: RawOwnedBaseNft | RawOwnedNft\n): Nft | BaseNft {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft);\n  }\n}\n\n/**\n * Helper method to convert a NFT response received from Alchemy backend to an\n * SDK NFT type.\n *\n * @internal\n */\nfunction nftFromGetNftContractResponse(\n  ownedNft: RawContractBaseNft | RawNft,\n  contractAddress: string\n): Nft | BaseNft {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft);\n  } else {\n    return getBaseNftFromRaw(ownedNft, contractAddress);\n  }\n}\n\n/** @internal */\n// TODO: more comprehensive type check\nfunction isNftWithMetadata(\n  response: RawBaseNft | RawContractBaseNft | RawNft\n): response is RawNft {\n  return (response as RawNft).title !== undefined;\n}\n\n/**\n * Given an AssetTransfersResponse, fetches the NFTs associated with the\n * transfers and collates them with transfer metadata.\n *\n * VISIBLE FOR TESTING\n */\nexport async function getNftsForTransfers(\n  config: AlchemyConfig,\n  response: AssetTransfersResponse\n): Promise<TransfersNftResponse> {\n  const metadataTransfers = response.transfers\n    .filter(transfer => transfer.rawContract.address !== null)\n    // Use flatMap to flatten 1155 transfers that contain multiple NFTs.\n    .flatMap(transfer => {\n      const tokens = getTokensFromTransfer(transfer);\n\n      const metadata = {\n        from: transfer.from,\n        to: transfer.to ?? undefined,\n        transactionHash: transfer.hash,\n        blockNumber: transfer.blockNum\n      };\n      return tokens.map(token => ({ metadata, token }));\n    });\n\n  if (metadataTransfers.length === 0) {\n    return { nfts: [] };\n  }\n\n  // If we have more than 100 elements after unrolling 1155 transfers, split\n  // transfers into batches of 100 to stay under endpoint batch size limit.\n  const batchSize = 100;\n  const requestBatches = [];\n  for (let i = 0; i < metadataTransfers.length; i += batchSize) {\n    requestBatches.push(metadataTransfers.slice(i, i + batchSize));\n  }\n  const responseBatches = await Promise.all(\n    requestBatches.map(batch =>\n      getNftMetadataBatch(\n        config,\n        batch.map(transfer => transfer.token)\n      )\n    )\n  );\n  const nfts = responseBatches.flat();\n\n  // The same NFT can be transferred multiple times in the same transfers response.\n  // We want to return one NFT for each transfer, so we create a mapping for\n  // each NFT to pair with the transfer metadata.\n  const nftsByTokenId = new Map<string, Nft>();\n  nfts.forEach(nft => {\n    const key = `${nft.contract.address}-${BigNumber.from(\n      nft.tokenId\n    ).toString()}`;\n    nftsByTokenId.set(key, nft);\n  });\n\n  const transferredNfts = metadataTransfers.map(t => {\n    const key = `${t.token.contractAddress}-${BigNumber.from(\n      t.token.tokenId\n    ).toString()}`;\n    return {\n      ...nftsByTokenId.get(key)!,\n      ...t.metadata\n    };\n  });\n\n  return {\n    nfts: transferredNfts,\n    pageKey: response.pageKey\n  };\n}\n\n/**\n * Returns the underlying NFT tokens from a transfer as the params for a\n * `getNftMetadataBatch` call. Handles the 1155 case where multiple NFTs can be\n * transferred in a single transaction.\n */\nfunction getTokensFromTransfer(\n  transfer: AssetTransfersResult\n): NftMetadataBatchToken[] {\n  // ERC1155 NFTs can contain multiple tokens in a single transfer, which\n  // requires special logic.\n  if (transfer.category === AssetTransfersCategory.ERC1155) {\n    return parse1155Transfer(transfer);\n  } else {\n    return [\n      {\n        contractAddress: transfer.rawContract.address!,\n        tokenId: transfer.tokenId!,\n        tokenType:\n          transfer.category === AssetTransfersCategory.ERC721\n            ? NftTokenType.ERC721\n            : undefined\n      }\n    ];\n  }\n}\n\n/**\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\n * to including metadata.\n *\n * @internal\n */\nfunction omitMetadataToWithMetadata(\n  omitMetadata: boolean | undefined\n): boolean {\n  return omitMetadata === undefined ? true : !omitMetadata;\n}\n\nfunction parseReingestionState(reingestionState: string): RefreshState {\n  switch (reingestionState) {\n    case 'does_not_exist':\n      return RefreshState.DOES_NOT_EXIST;\n    case 'already_queued':\n      return RefreshState.ALREADY_QUEUED;\n    case 'in_progress':\n      return RefreshState.IN_PROGRESS;\n    case 'finished':\n      return RefreshState.FINISHED;\n    case 'queued':\n      return RefreshState.QUEUED;\n    case 'queue_failed':\n      return RefreshState.QUEUE_FAILED;\n    default:\n      throw new Error('Unknown reingestion state: ' + reingestionState);\n  }\n}\n\n/**\n * Interface for the `getNftsForNftContract` endpoint. The main difference is\n * that the endpoint has a `startToken` parameter, but the SDK standardizes all\n * pagination parameters to `pageKey`.\n *\n * @internal\n */\ninterface GetNftsForContractAlchemyParams {\n  contractAddress: string;\n  startToken?: string;\n  withMetadata: boolean;\n  limit?: number;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `getNfts` endpoint. The main difference is that the\n * endpoint has a `withMetadata` parameter, but the SDK exposes the parameter as\n * `omitMetadata`.\n *\n * @internal\n */\ninterface GetNftsAlchemyParams {\n  owner: string;\n  pageKey?: string;\n  contractAddresses?: string[];\n  /** @deprecated - Please use `excludeFilters` instead. */\n  filters?: string[];\n  excludeFilters?: NftFilters[];\n  includeFilters?: NftFilters[];\n  pageSize?: number;\n  withMetadata: boolean;\n  tokenUriTimeoutInMs?: number;\n  orderBy?: string;\n}\n\n/**\n * NftTokenTypes that are allowed as request inputs.\n *\n * @internal\n */\nexport type InputNftTokenType =\n  | NftTokenType.ERC1155\n  | NftTokenType.ERC721\n  | undefined;\n\n/**\n * Interface for the `getNftMetadata` endpoint.\n *\n * @internal\n */\ninterface GetNftMetadataParams {\n  contractAddress: string;\n  tokenId: string;\n  tokenType?: InputNftTokenType;\n  refreshCache?: boolean;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `isSpamContract` endpoint.\n *\n * @internal\n */\ninterface IsSpamContractParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getNftContractMetadata` endpoint.\n *\n * @internal\n */\ninterface GetContractMetadataParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getOwnersForNftContract` endpoint.\n *\n * @internal\n */\ninterface GetOwnersForNftContractAlchemyParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getOwnersForContract` endpoint.\n *\n * @internal\n */\ninterface GetContractsForOwnerParams {\n  owner: string;\n  pageKey?: string;\n  pageSize?: number;\n  includeFilters?: NftFilters[];\n  excludeFilters?: NftFilters[];\n  orderBy?: NftOrdering;\n}\n\n/**\n * Interface for the `getFloorPrice` endpoint.\n *\n * @internal\n */\ninterface GetFloorPriceParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getNftSales` endpoint.\n *\n * @internal\n */\ninterface GetNftSalesParams {\n  fromBlock?: number | 'latest';\n  toBlock?: number | 'latest';\n  order?: SortingOrder;\n  marketplace?: NftSaleMarketplace;\n  contractAddress?: string;\n  tokenId?: string;\n  sellerAddress?: string;\n  buyerAddress?: string;\n  taker?: NftSaleTakerType;\n  limit?: number;\n  pageKey?: string;\n}\n\n/**\n * Interface for the `computeRarity` endpoint.\n *\n * @internal\n */\ninterface ComputeRarityParams {\n  contractAddress: string;\n  tokenId: string;\n  refreshCache?: boolean;\n}\n\n/**\n * Interface for the `searchContractMetadata` endpoint.\n *\n * @internal\n */\ninterface SearchContractMetadataParams {\n  query: string;\n}\n\n/**\n * Interface for the `summarizeNFTAttributes` endpoint.\n *\n * @internal\n */\ninterface SummarizeNftAttributesParams {\n  contractAddress: string;\n  refreshCache?: boolean;\n}\n\ninterface ReingestContractParams {\n  contractAddress: string;\n}\n","import type { BigNumberish } from '@ethersproject/bignumber';\n\nimport {\n  checkNftOwnership,\n  computeRarity,\n  getContractMetadata,\n  getContractMetadataBatch,\n  getContractsForOwner,\n  getFloorPrice,\n  getMintedNfts,\n  getNftMetadata,\n  getNftMetadataBatch,\n  getNftSales,\n  getNftsForContract,\n  getNftsForContractIterator,\n  getNftsForOwner,\n  getNftsForOwnerIterator,\n  getOwnersForContract,\n  getOwnersForNft,\n  getSpamContracts,\n  getTransfersForContract,\n  getTransfersForOwner,\n  isSpamContract,\n  refreshContract,\n  refreshNftMetadata,\n  searchContractMetadata,\n  summarizeNftAttributes,\n  verifyNftOwnership\n} from '../internal/nft-api';\nimport {\n  GetBaseNftsForContractOptions,\n  GetBaseNftsForOwnerOptions,\n  GetContractsForOwnerOptions,\n  GetContractsForOwnerResponse,\n  GetFloorPriceResponse,\n  GetMintedNftsOptions,\n  GetNftMetadataOptions,\n  GetNftSalesOptions,\n  GetNftSalesOptionsByContractAddress,\n  GetNftSalesResponse,\n  GetNftsForContractOptions,\n  GetNftsForOwnerOptions,\n  GetOwnersForContractOptions,\n  GetOwnersForContractResponse,\n  GetOwnersForContractWithTokenBalancesOptions,\n  GetOwnersForContractWithTokenBalancesResponse,\n  GetOwnersForNftOptions,\n  GetOwnersForNftResponse,\n  GetTransfersForContractOptions,\n  GetTransfersForOwnerOptions,\n  GetTransfersForOwnerTransferType,\n  NftAttributeRarity,\n  NftAttributesResponse,\n  NftContractBaseNftsResponse,\n  NftContractNftsResponse,\n  NftMetadataBatchOptions,\n  NftMetadataBatchToken,\n  NftTokenType,\n  OwnedBaseNft,\n  OwnedBaseNftsResponse,\n  OwnedNft,\n  OwnedNftsResponse,\n  RefreshContractResult,\n  TransfersNftResponse\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { BaseNft, Nft, NftContract } from './nft';\n\n/**\n * The NFT namespace contains all the functionality related to NFTs.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.nft`.\n */\nexport class NftNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get the NFT metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - Token id of the NFT.\n   * @param tokenType - Optionally specify the type of token to speed up the query.\n   * @param tokenUriTimeoutInMs - No set timeout by default - When metadata is\n   *   requested, this parameter is the timeout (in milliseconds) for the\n   *   website hosting the metadata to respond. If you want to only access the\n   *   cache and not live fetch any metadata for cache misses then set this value to 0.\n   * @public\n   * @deprecated Please use the method with the `options` overload. This method\n   * will be removed in a subsequent release.\n   */\n  getNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    tokenType?: NftTokenType,\n    tokenUriTimeoutInMs?: number\n  ): Promise<Nft>;\n\n  /**\n   * Get the NFT metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - Token id of the NFT.\n   * @param options - Options for the request.\n   * @public\n   */\n  getNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    options?: GetNftMetadataOptions\n  ): Promise<Nft>;\n  getNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    optionsOrTokenType?: GetNftMetadataOptions | NftTokenType,\n    tokenUriTimeoutInMs?: number\n  ): Promise<Nft> {\n    let options: GetNftMetadataOptions;\n    if (typeof optionsOrTokenType === 'object') {\n      options = {\n        tokenType: optionsOrTokenType.tokenType,\n        tokenUriTimeoutInMs: optionsOrTokenType.tokenUriTimeoutInMs,\n        refreshCache: optionsOrTokenType.refreshCache\n      };\n    } else {\n      options = {\n        tokenType: optionsOrTokenType,\n        tokenUriTimeoutInMs\n      };\n    }\n    return getNftMetadata(this.config, contractAddress, tokenId, options);\n  }\n\n  /**\n   * Gets the NFT metadata for multiple NFT tokens.\n   *\n   * @param tokens An array of NFT tokens to fetch metadata for.\n   * @param options Configuration options for making the request.\n   */\n  getNftMetadataBatch(\n    tokens: Array<NftMetadataBatchToken>,\n    options?: NftMetadataBatchOptions\n  ): Promise<Nft[]> {\n    return getNftMetadataBatch(this.config, tokens, options);\n  }\n\n  /**\n   * Get the NFT contract metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @public\n   */\n  getContractMetadata(contractAddress: string): Promise<NftContract> {\n    return getContractMetadata(this.config, contractAddress);\n  }\n\n  /**\n   * Get the NFT contract metadata for multiple NFT contracts in a single request.\n   *\n   * @param contractAddresses - An array of contract addresses to fetch metadata for.\n   */\n  getContractMetadataBatch(\n    contractAddresses: string[]\n  ): Promise<NftContract[]> {\n    return getContractMetadataBatch(this.config, contractAddresses);\n  }\n\n  /**\n   * Fetches all NFTs for a given owner and yields them in an async iterable.\n   *\n   * This method returns the full NFT for the owner and pages through all page\n   * keys until all NFTs have been fetched.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetNftsForOwnerOptions\n  ): AsyncIterable<OwnedNft>;\n  /**\n   * Fetches all NFTs for a given owner and yields them in an async iterable.\n   *\n   * This method returns the base NFTs that omit the associated metadata and\n   * pages through all page keys until all NFTs have been fetched.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetBaseNftsForOwnerOptions\n  ): AsyncIterable<OwnedBaseNft>;\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions\n  ): AsyncIterable<OwnedBaseNft | OwnedNft> {\n    return getNftsForOwnerIterator(this.config, owner, options);\n  }\n\n  /**\n   * Get all NFTs for an owner.\n   *\n   * This method returns the full NFTs in the contract. To get all NFTs without\n   * their associated metadata, use {@link GetBaseNftsForOwnerOptions}.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwner(\n    owner: string,\n    options?: GetNftsForOwnerOptions\n  ): Promise<OwnedNftsResponse>;\n  /**\n   * Get all base NFTs for an owner.\n   *\n   * This method returns the base NFTs that omit the associated metadata. To get\n   * all NFTs with their associated metadata, use {@link GetNftsForOwnerOptions}.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwner(\n    owner: string,\n    options?: GetBaseNftsForOwnerOptions\n  ): Promise<OwnedBaseNftsResponse>;\n  getNftsForOwner(\n    owner: string,\n    options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions\n  ): Promise<OwnedNftsResponse | OwnedBaseNftsResponse> {\n    return getNftsForOwner(this.config, owner, options);\n  }\n\n  /**\n   * Get all NFTs for a given contract address.\n   *\n   * This method returns the full NFTs in the contract. To get all NFTs without\n   * their associated metadata, use {@link GetBaseNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The parameters to use for the request. or\n   *   {@link NftContractNftsResponse} response.\n   * @beta\n   */\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetNftsForContractOptions\n  ): Promise<NftContractNftsResponse>;\n  /**\n   * Get all base NFTs for a given contract address.\n   *\n   * This method returns the base NFTs that omit the associated metadata. To get\n   * all NFTs with their associated metadata, use {@link GetNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions\n  ): Promise<NftContractBaseNftsResponse>;\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions | GetNftsForContractOptions\n  ): Promise<NftContractNftsResponse | NftContractBaseNftsResponse> {\n    return getNftsForContract(this.config, contractAddress, options);\n  }\n\n  /**\n   * Fetches all NFTs for a given contract address and yields them in an async iterable.\n   *\n   * This method returns the full NFTs in the contract and pages through all\n   * page keys until all NFTs have been fetched. To get all NFTs without their\n   * associated metadata, use {@link GetBaseNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetNftsForContractOptions\n  ): AsyncIterable<Nft>;\n  /**\n   * Fetches all base NFTs for a given contract address and yields them in an\n   * async iterable.\n   *\n   * This method returns the base NFTs that omit the associated metadata and\n   * pages through all page keys until all NFTs have been fetched. To get all\n   * NFTs with their associated metadata, use {@link GetNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions\n  ): AsyncIterable<BaseNft>;\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions | GetNftsForContractOptions\n  ): AsyncIterable<BaseNft | Nft> {\n    return getNftsForContractIterator(this.config, contractAddress, options);\n  }\n\n  /**\n   * Gets all the owners for a given NFT contract along with the token balance.\n   *\n   * @param contractAddress - The NFT contract to get the owners for.\n   * @param options Optional parameters to use for the request.\n   * @public\n   */\n  getOwnersForContract(\n    contractAddress: string,\n    options: GetOwnersForContractWithTokenBalancesOptions\n  ): Promise<GetOwnersForContractWithTokenBalancesResponse>;\n\n  /**\n   * Gets all the owners for a given NFT contract.\n   *\n   * Note that token balances are omitted by default. To include token balances\n   * for each owner, use {@link GetOwnersForContractWithTokenBalancesOptions},\n   * which has the `withTokenBalances` field set to `true`.\n   *\n   * @param contractAddress - The NFT contract to get the owners for.\n   * @param options Optional parameters to use for the request.\n   * @public\n   */\n  getOwnersForContract(\n    contractAddress: string,\n    options?: GetOwnersForContractOptions\n  ): Promise<GetOwnersForContractResponse>;\n  getOwnersForContract(\n    contractAddress: string,\n    options?:\n      | GetOwnersForContractOptions\n      | GetOwnersForContractWithTokenBalancesOptions\n  ): Promise<\n    GetOwnersForContractResponse | GetOwnersForContractWithTokenBalancesResponse\n  > {\n    return getOwnersForContract(this.config, contractAddress, options);\n  }\n\n  /**\n   * Gets all the owners for a given NFT contract address and token ID.\n   *\n   * @param contractAddress - The NFT contract address.\n   * @param tokenId - Token id of the NFT.\n   * @param options - Optional parameters to use for the request.\n   * @beta\n   */\n  getOwnersForNft(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    options?: GetOwnersForNftOptions\n  ): Promise<GetOwnersForNftResponse> {\n    return getOwnersForNft(this.config, contractAddress, tokenId, options);\n  }\n\n  /**\n   * Gets all NFT contracts held by the specified owner address.\n   *\n   * @param owner - Address for NFT owner (can be in ENS format!).\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getContractsForOwner(\n    owner: string,\n    options?: GetContractsForOwnerOptions\n  ): Promise<GetContractsForOwnerResponse> {\n    return getContractsForOwner(this.config, owner, options);\n  }\n\n  /**\n   * Gets all NFT transfers for a given owner's address.\n   *\n   * @param owner The owner to get transfers for.\n   * @param category Whether to get transfers to or from the owner address.\n   * @param options Additional options for the request.\n   */\n  getTransfersForOwner(\n    owner: string,\n    category: GetTransfersForOwnerTransferType,\n    options?: GetTransfersForOwnerOptions\n  ): Promise<TransfersNftResponse> {\n    return getTransfersForOwner(this.config, owner, category, options);\n  }\n\n  /**\n   * Gets all NFT transfers for a given NFT contract address.\n   *\n   * Defaults to all transfers for the contract. To get transfers for a specific\n   * block range, use {@link GetTransfersForContractOptions}.\n   *\n   * @param contract The NFT contract to get transfers for.\n   * @param options Additional options for the request.\n   */\n  getTransfersForContract(\n    contract: string,\n    options?: GetTransfersForContractOptions\n  ): Promise<TransfersNftResponse> {\n    return getTransfersForContract(this.config, contract, options);\n  }\n\n  /**\n   * Get all the NFTs minted by a specified owner address.\n   *\n   * @param owner - Address for the NFT owner (can be in ENS format).\n   * @param options - The optional parameters to use for the request.\n   */\n  async getMintedNfts(\n    owner: string,\n    options?: GetMintedNftsOptions\n  ): Promise<TransfersNftResponse> {\n    return getMintedNfts(this.config, owner, options);\n  }\n\n  /**\n   * DEPRECATED - Checks that the provided owner address owns one of more of the\n   * provided NFTs.\n   *\n   * @deprecated - Use {@link verifyNftOwnership} instead. This method will be\n   *   removed in a future release.\n   * @param owner - The owner address to check.\n   * @param contractAddresses - An array of NFT contract addresses to check ownership for.\n   */\n  checkNftOwnership(\n    owner: string,\n    contractAddresses: string[]\n  ): Promise<boolean> {\n    return checkNftOwnership(this.config, owner, contractAddresses);\n  }\n\n  /**\n   * Checks that the provided owner address owns one of more of the provided\n   * NFT. Returns a boolean indicating whether the owner address owns the provided NFT.\n   *\n   * @param owner - The owner address to check.\n   * @param contractAddress - An NFT contract address to check ownership for.\n   */\n  verifyNftOwnership(owner: string, contractAddress: string): Promise<boolean>;\n\n  /**\n   * Checks which of the provided NFTs the owner address owns. Returns a map of\n   * contract address to a boolean indicating whether the owner address owns the NFT.\n   *\n   * @param owner - The owner address to check.\n   * @param contractAddresses - An array NFT contract address to check ownership for.\n   */\n  verifyNftOwnership(\n    owner: string,\n    contractAddresses: string[]\n  ): Promise<{ [contractAddress: string]: boolean }>;\n  verifyNftOwnership(\n    owner: string,\n    contractAddress: string | string[]\n  ): Promise<boolean | { [contractAddress: string]: boolean }> {\n    return verifyNftOwnership(this.config, owner, contractAddress);\n  }\n\n  /**\n   * Returns whether a contract is marked as spam or not by Alchemy. For more\n   * information on how we classify spam, go to our NFT API FAQ at\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   *\n   * @param contractAddress - The contract address to check.\n   * @beta\n   */\n  isSpamContract(contractAddress: string): Promise<boolean> {\n    return isSpamContract(this.config, contractAddress);\n  }\n\n  /**\n   * Returns a list of all spam contracts marked by Alchemy. For details on how\n   * Alchemy marks spam contracts, go to\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   *\n   * @beta\n   */\n  getSpamContracts(): Promise<string[]> {\n    return getSpamContracts(this.config);\n  }\n\n  /**\n   * Returns the floor prices of a NFT contract by marketplace.\n   *\n   * @param contractAddress - The contract address for the NFT collection.\n   * @beta\n   */\n  getFloorPrice(contractAddress: string): Promise<GetFloorPriceResponse> {\n    return getFloorPrice(this.config, contractAddress);\n  }\n\n  /**\n   * Returns NFT sales that have happened through on-chain marketplaces.\n   *\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftSales(options?: GetNftSalesOptions): Promise<GetNftSalesResponse>;\n  getNftSales(\n    options?: GetNftSalesOptionsByContractAddress\n  ): Promise<GetNftSalesResponse>;\n  getNftSales(\n    options?: GetNftSalesOptions | GetNftSalesOptionsByContractAddress\n  ): Promise<GetNftSalesResponse> {\n    return getNftSales(this.config, options);\n  }\n\n  /**\n   * Get the rarity of each attribute of an NFT.\n   *\n   * @param contractAddress - Contract address for the NFT collection.\n   * @param tokenId - Token id of the NFT.\n   * @param refreshCache - If true, bypass cache and recompute rarity snapshot.\n   */\n  computeRarity(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    refreshCache?: boolean\n  ): Promise<NftAttributeRarity[]> {\n    return computeRarity(this.config, contractAddress, tokenId, refreshCache);\n  }\n\n  /**\n   * Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts.\n   *\n   * @param query - The search string that you want to search for in contract metadata.\n   */\n  searchContractMetadata(query: string): Promise<NftContract[]> {\n    return searchContractMetadata(this.config, query);\n  }\n\n  /**\n   * Get a summary of attribute prevalence for an NFT collection.\n   *\n   * @param contractAddress - Contract address for the NFT collection.\n   * @param refreshCache - If true, bypass cache and recompute rarity snapshot.\n   */\n  summarizeNftAttributes(\n    contractAddress: string,\n    refreshCache?: boolean\n  ): Promise<NftAttributesResponse> {\n    return summarizeNftAttributes(this.config, contractAddress, refreshCache);\n  }\n\n  /**\n   * Refreshes the cached metadata for a provided NFT contract address and token\n   * id. Returns a boolean value indicating whether the metadata was refreshed.\n   *\n   * This method is useful when you want to refresh the metadata for a NFT that\n   * has been updated since the last time it was fetched. Note that the backend\n   * only allows one refresh per token every 15 minutes, globally for all users.\n   * The last refresh time for an NFT can be accessed on the\n   * {@link Nft.timeLastUpdated} field.\n   *\n   * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - The token id of the NFT.\n   */\n  refreshNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish\n  ): Promise<boolean> {\n    return refreshNftMetadata(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * Triggers a metadata refresh all NFTs in the provided contract address. This\n   * method is useful after an NFT collection is revealed.\n   *\n   * Refreshes are queued on the Alchemy backend and may take time to fully\n   * process. To refresh the metadata for a specific token, use the\n   * {@link refreshNftMetadata} method instead.\n   *\n   * @param contractAddress - The contract address of the NFT collection.\n   * @beta\n   */\n  refreshContract(contractAddress: string): Promise<RefreshContractResult> {\n    return refreshContract(this.config, contractAddress);\n  }\n}\n","import { AxiosRequestConfig, Method } from 'axios';\n\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { requestHttpWithBackoff } from '../internal/dispatch';\nimport {\n  RawAddressActivityResponse,\n  RawCreateWebhookResponse,\n  RawCustomGraphqlWebhookConfig,\n  RawGetAllWebhooksResponse,\n  RawNftFilterParam,\n  RawNftFiltersResponse,\n  RawWebhook\n} from '../internal/raw-interfaces';\nimport {\n  AddressActivityResponse,\n  AddressActivityWebhook,\n  AddressWebhookParams,\n  AddressWebhookUpdate,\n  CustomGraphqlWebhook,\n  CustomGraphqlWebhookConfig,\n  CustomGraphqlWebhookParams,\n  CustomGraphqlWebhookUpdate,\n  DroppedTransactionWebhook,\n  GetAddressesOptions,\n  GetAllWebhooksResponse,\n  MinedTransactionWebhook,\n  Network,\n  NftActivityWebhook,\n  NftFilter,\n  NftFiltersResponse,\n  NftMetadataUpdateWebhook,\n  NftMetadataWebhookUpdate,\n  NftWebhookParams,\n  NftWebhookUpdate,\n  TransactionWebhookParams,\n  Webhook,\n  WebhookType,\n  WebhookVersion\n} from '../types/types';\nimport { AlchemyApiType } from '../util/const';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Notify namespace contains methods used for creating, reading, updating,\n * and deleting webhooks in the Notify API.\n *\n * To use the methods in the API, you must provide your team's auth token in the\n * {@link AlchemySettings.authToken} field when configuring\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\n * on the Notify tab.\n *\n * Note that not all networks are supported in the Notify API. Please consult\n * the documentation for which networks are supported.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the notify\n * namespace via `alchemy.notify`.\n */\nexport class NotifyNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get all webhooks on your team.\n   *\n   * The team is determined by the `authToken` provided into the {@link AlchemySettings}\n   * object when creating a new {@link Alchemy} instance.\n   *\n   * This method returns a response object containing all the webhooks\n   */\n  async getAllWebhooks(): Promise<GetAllWebhooksResponse> {\n    this.verifyConfig();\n    const response = await this.sendWebhookRequest<RawGetAllWebhooksResponse>(\n      'team-webhooks',\n      'getAllWebhooks',\n      {}\n    );\n    return {\n      webhooks: parseRawWebhookResponse(response),\n      totalCount: response.data.length\n    };\n  }\n\n  /**\n   * Get all addresses tracked for the provided {@link AddressActivityWebhook}.\n   *\n   * @param addressWebhook The Address Activity webhook.\n   * @param options Pagination options when fetching addresses.\n   */\n  getAddresses(\n    addressWebhook: AddressActivityWebhook,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse>;\n\n  /**\n   * Get all addresses tracked for the provided {@link AddressActivityWebhook}.\n   *\n   * @param webhookId The id of the address activity webhook. Passing in an id\n   *   of a non-address-activity webhook will result in a response object with\n   *   no addresses.\n   * @param options Pagination options when fetching addresses.\n   */\n  getAddresses(\n    webhookId: string,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse>;\n  async getAddresses(\n    webhookOrId: AddressActivityWebhook | string,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawAddressActivityResponse>(\n      'webhook-addresses',\n      'getAddresses',\n      {\n        webhook_id: webhookId,\n        limit: options?.limit,\n        after: options?.pageKey\n      }\n    );\n    return parseRawAddressActivityResponse(response);\n  }\n\n  /**\n   * Get the graphql query used for the provided {@link CustomGraphqlWebhook}.\n   *\n   * @param customGraphqlWebhook The webhook to get the graphql query for.\n   */\n  getGraphqlQuery(\n    customGraphqlWebhook: CustomGraphqlWebhook\n  ): Promise<CustomGraphqlWebhookConfig>;\n\n  /**\n   * Get the graphql query used for the provided {@link CustomGraphqlWebhook}.\n   *\n   * @param webhookId The id of the custom webhook. Passing in an id\n   *   of a non-custom webhook will result in a response object with\n   *   no graphql query.\n   */\n  getGraphqlQuery(webhookId: string): Promise<CustomGraphqlWebhookConfig>;\n  async getGraphqlQuery(\n    webhookOrId: CustomGraphqlWebhook | string\n  ): Promise<CustomGraphqlWebhookConfig> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response =\n      await this.sendWebhookRequest<RawCustomGraphqlWebhookConfig>(\n        'dashboard-webhook-graphql-query',\n        'getGraphqlQuery',\n        {\n          webhook_id: webhookId\n        }\n      );\n    return parseRawCustomGraphqlWebhookResponse(response);\n  }\n\n  /**\n   * Get all NFTs tracked for the provided {@link NftActivityWebhook}.\n   *\n   * @param nftWebhook The NFT Activity webhook.\n   * @param options Pagination options when fetching NFT filters.\n   */\n  getNftFilters(\n    nftWebhook: NftActivityWebhook,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse>;\n\n  /**\n   * Get all NFT filters tracked for the provided {@link NftActivityWebhook}.\n   *\n   * @param webhookId The id of the NFT activity webhook. Passing in an\n   *   incorrect id of a non-NFT webhook will result in a response object with\n   *   no filters.\n   * @param options Pagination options when fetching nft filters.\n   */\n  getNftFilters(\n    webhookId: string,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse>;\n  async getNftFilters(\n    webhookOrId: NftActivityWebhook | string,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawNftFiltersResponse>(\n      'webhook-nft-filters',\n      'getNftFilters',\n      {\n        webhook_id: webhookId,\n        limit: options?.limit,\n        after: options?.pageKey\n      }\n    );\n    return parseRawNftFiltersResponse(response);\n  }\n\n  /**\n   * Update a {@link NftActivityWebhook}'s active status or NFT filters.\n   *\n   * @param nftWebhook The NFT activity webhook to update.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    nftWebhook: NftActivityWebhook,\n    update: NftWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link NftActivityWebhook}'s active status or NFT filters.\n   *\n   * @param nftWebhookId The id of the NFT activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(nftWebhookId: string, update: NftWebhookUpdate): Promise<void>;\n\n  /**\n   * Update a {@link NftMetadataUpdateWebhook}'s active status or NFT filters.\n   *\n   * @param nftMetadataWebhookId The id of the NFT activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    nftMetadataWebhookId: string,\n    update: NftMetadataWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link CustomGraphqlWebhook}'s active status.\n   * The graphql query associated with the webhook is immutable.\n   *\n   * @param customGraphqlWebhookId The id of the custom webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    customGraphqlWebhookId: string,\n    update: CustomGraphqlWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link AddressActivityWebhook}'s active status or addresses.\n   *\n   * @param addressWebhook The address activity webhook to update.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    addressWebhook: AddressActivityWebhook,\n    update: AddressWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link AddressActivityWebhook}'s active status or addresses.\n   *\n   * @param addressWebhookId The id of the address activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    addressWebhookId: string,\n    update: AddressWebhookUpdate\n  ): Promise<void>;\n  async updateWebhook(\n    webhookOrId: NftActivityWebhook | AddressActivityWebhook | string,\n    update:\n      | NftWebhookUpdate\n      | AddressWebhookUpdate\n      | NftMetadataWebhookUpdate\n      | CustomGraphqlWebhookUpdate\n  ): Promise<void> {\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    let restApiName;\n    let methodName;\n    let method: Method;\n    let data;\n    if ('isActive' in update) {\n      restApiName = 'update-webhook';\n      methodName = 'updateWebhook';\n      method = 'PUT';\n      data = {\n        webhook_id: webhookId,\n        is_active: update.isActive\n      };\n    } else if ('addFilters' in update || 'removeFilters' in update) {\n      restApiName = 'update-webhook-nft-filters';\n      methodName = 'updateWebhookNftFilters';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        nft_filters_to_add: update.addFilters\n          ? update.addFilters.map(nftFilterToParam)\n          : [],\n        nft_filters_to_remove: update.removeFilters\n          ? update.removeFilters.map(nftFilterToParam)\n          : []\n      };\n    } else if (\n      'addMetadataFilters' in update ||\n      'removeMetadataFilters' in update\n    ) {\n      restApiName = 'update-webhook-nft-metadata-filters';\n      methodName = 'updateWebhookNftMetadataFilters';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        nft_metadata_filters_to_add: update.addMetadataFilters\n          ? update.addMetadataFilters.map(nftFilterToParam)\n          : [],\n        nft_metadata_filters_to_remove: update.removeMetadataFilters\n          ? update.removeMetadataFilters.map(nftFilterToParam)\n          : []\n      };\n    } else if ('addAddresses' in update || 'removeAddresses' in update) {\n      restApiName = 'update-webhook-addresses';\n      methodName = 'webhook:updateWebhookAddresses';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        addresses_to_add: await this.resolveAddresses(update.addAddresses),\n        addresses_to_remove: await this.resolveAddresses(update.removeAddresses)\n      };\n    } else if ('newAddresses' in update) {\n      restApiName = 'update-webhook-addresses';\n      methodName = 'webhook:updateWebhookAddress';\n      method = 'PUT';\n      data = {\n        webhook_id: webhookId,\n        addresses: await this.resolveAddresses(update.newAddresses)\n      };\n    } else {\n      throw new Error('Invalid `update` param passed into `updateWebhook`');\n    }\n\n    await this.sendWebhookRequest(\n      restApiName,\n      methodName,\n      {},\n      {\n        method,\n        data\n      }\n    );\n  }\n\n  /**\n   * Create a new {@link MinedTransactionWebhook} to track mined transactions\n   * sent by the app associated with the app id.\n   *\n   * Note that the webhook will be created in the app network of the provided app id.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the app id.\n   */\n  // TODO(webhook): Automatically populate app id from api key.\n  createWebhook(\n    url: string,\n    type: WebhookType.MINED_TRANSACTION,\n    params: TransactionWebhookParams\n  ): Promise<MinedTransactionWebhook>;\n\n  /**\n   * Create a new {@link DroppedTransactionWebhook} to track dropped transactions\n   * sent by the app associated with the app id.\n   *\n   * Note that the webhook will be created in the app network of the provided app id.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the app id.\n   */\n  // TODO(webhook): Automatically populate app id from api key.\n  createWebhook(\n    url: string,\n    type: WebhookType.DROPPED_TRANSACTION,\n    params: TransactionWebhookParams\n  ): Promise<DroppedTransactionWebhook>;\n\n  /**\n   * Create a new {@link NftActivityWebhook} to track NFT transfers.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the NFTs to track and the\n   *   network the webhook should be created on.\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.NFT_ACTIVITY,\n    params: NftWebhookParams\n  ): Promise<NftActivityWebhook>;\n\n  createWebhook(\n    url: string,\n    type: WebhookType.NFT_METADATA_UPDATE,\n    params: NftWebhookParams\n  ): Promise<NftMetadataUpdateWebhook>;\n\n  /**\n   * Create a new {@link CustomGraphqlWebhook} to track any event on every block.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the graphql query to be executed\n   * on every block\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.GRAPHQL,\n    params: CustomGraphqlWebhookParams\n  ): Promise<CustomGraphqlWebhook>;\n\n  /**\n   * Create a new {@link AddressActivityWebhook} to track address activity.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the addresses to track and the\n   *   network the webhook should be created on.\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.ADDRESS_ACTIVITY,\n    params: AddressWebhookParams\n  ): Promise<AddressActivityWebhook>;\n  async createWebhook(\n    url: string,\n    type: WebhookType,\n    params:\n      | NftWebhookParams\n      | AddressWebhookParams\n      | TransactionWebhookParams\n      | CustomGraphqlWebhookParams\n  ): Promise<\n    | MinedTransactionWebhook\n    | DroppedTransactionWebhook\n    | NftActivityWebhook\n    | AddressActivityWebhook\n    | NftMetadataUpdateWebhook\n    | CustomGraphqlWebhook\n  > {\n    let appId;\n    if (\n      type === WebhookType.MINED_TRANSACTION ||\n      type === WebhookType.DROPPED_TRANSACTION\n    ) {\n      if (!('appId' in params)) {\n        throw new Error('Transaction Webhooks require an app id.');\n      }\n      appId = params.appId;\n    }\n\n    let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\n    let nftFilterObj;\n    let addresses;\n    let graphqlQuery;\n    if (\n      type === WebhookType.NFT_ACTIVITY ||\n      type === WebhookType.NFT_METADATA_UPDATE\n    ) {\n      if (!('filters' in params) || params.filters.length === 0) {\n        throw new Error(\n          'Nft Activity Webhooks require a non-empty array input.'\n        );\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      const filters = (params.filters as NftFilter[]).map(filter =>\n        filter.tokenId\n          ? {\n              contract_address: filter.contractAddress,\n              token_id: BigNumber.from(filter.tokenId).toString()\n            }\n          : {\n              contract_address: filter.contractAddress\n            }\n      );\n      nftFilterObj =\n        type === WebhookType.NFT_ACTIVITY\n          ? { nft_filters: filters }\n          : { nft_metadata_filters: filters };\n    } else if (type === WebhookType.ADDRESS_ACTIVITY) {\n      if (\n        params === undefined ||\n        !('addresses' in params) ||\n        params.addresses.length === 0\n      ) {\n        throw new Error(\n          'Address Activity Webhooks require a non-empty array input.'\n        );\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      addresses = await this.resolveAddresses(params.addresses);\n    } else if (type == WebhookType.GRAPHQL) {\n      if (\n        params === undefined ||\n        !('graphqlQuery' in params) ||\n        params.graphqlQuery.length === 0\n      ) {\n        throw new Error('Custom Webhooks require a non-empty graphql query.');\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      graphqlQuery = params.graphqlQuery;\n    }\n\n    const data = {\n      network,\n      webhook_type: type,\n      webhook_url: url,\n      ...(appId && { app_id: appId }),\n\n      // Only include the filters/addresses in the final response if they're defined\n      ...nftFilterObj,\n      ...(addresses && { addresses }),\n      ...(graphqlQuery && { graphql_query: graphqlQuery })\n    };\n\n    const response = await this.sendWebhookRequest<RawCreateWebhookResponse>(\n      'create-webhook',\n      'createWebhook',\n      {},\n      {\n        method: 'POST',\n        data\n      }\n    );\n\n    return parseRawWebhook(response.data);\n  }\n\n  /**\n   * Delete the provided webhook.\n   *\n   * @param webhook The webhook to delete.\n   */\n  deleteWebhook(webhook: Webhook): Promise<void>;\n\n  /**\n   * Delete the provided webhook.\n   *\n   * @param webhookId The id of the webhook to delete.\n   */\n  deleteWebhook(webhookId: string): Promise<void>;\n  async deleteWebhook(webhookOrId: Webhook | string): Promise<void> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawNftFiltersResponse>(\n      'delete-webhook',\n      'deleteWebhook',\n      {\n        webhook_id: webhookId\n      },\n      {\n        method: 'DELETE'\n      }\n    );\n\n    if ('message' in response) {\n      throw new Error(\n        `Webhook not found. Failed to delete webhook: ${webhookId}`\n      );\n    }\n  }\n\n  private verifyConfig() {\n    if (this.config.authToken === undefined) {\n      throw new Error(\n        'Using the Notify API requires setting the Alchemy Auth Token in ' +\n          'the settings object when initializing Alchemy.'\n      );\n    }\n  }\n\n  private sendWebhookRequest<Response>(\n    restApiName: string,\n    methodName: string,\n    params: {},\n    overrides?: AxiosRequestConfig\n  ): Promise<Response> {\n    return requestHttpWithBackoff(\n      this.config,\n      AlchemyApiType.WEBHOOK,\n      restApiName,\n      methodName,\n      params,\n      {\n        ...overrides,\n        headers: {\n          'X-Alchemy-Token': this.config.authToken!,\n          ...overrides?.headers\n        }\n      }\n    );\n  }\n\n  /** Resolves ENS addresses to the raw address.\n   * @internal */\n  private async resolveAddresses(\n    addresses: string[] | undefined\n  ): Promise<string[]> {\n    if (addresses === undefined) {\n      return [];\n    }\n    const resolvedAddresses: string[] = [];\n    const provider = await this.config.getProvider();\n    for (const address of addresses) {\n      const rawAddress = await provider.resolveName(address);\n      if (rawAddress === null) {\n        throw new Error(`Unable to resolve the ENS address: ${address}`);\n      }\n      resolvedAddresses.push(rawAddress);\n    }\n\n    return resolvedAddresses;\n  }\n}\n\n/**\n * Mapping of webhook network representations to the SDK's network representation.\n *\n * @internal\n */\nconst WEBHOOK_NETWORK_TO_NETWORK: { [key: string]: Network } = {\n  ETH_MAINNET: Network.ETH_MAINNET,\n  ETH_GOERLI: Network.ETH_GOERLI,\n  ETH_SEPOLIA: Network.ETH_SEPOLIA,\n  ETH_ROPSTEN: Network.ETH_ROPSTEN,\n  ETH_RINKEBY: Network.ETH_RINKEBY,\n  ETH_KOVAN: Network.ETH_KOVAN,\n  MATIC_MAINNET: Network.MATIC_MAINNET,\n  MATIC_MUMBAI: Network.MATIC_MUMBAI,\n  ARB_MAINNET: Network.ARB_MAINNET,\n  ARB_GOERLI: Network.ARB_GOERLI,\n  ARB_RINKEBY: Network.ARB_RINKEBY,\n  OPT_MAINNET: Network.OPT_MAINNET,\n  OPT_GOERLI: Network.OPT_GOERLI,\n  OPT_KOVAN: Network.OPT_KOVAN\n};\n\n/** Mapping of the SDK's network representation the webhook API's network representation. */\nconst NETWORK_TO_WEBHOOK_NETWORK: Map<Network, string> = Object.keys(\n  Network\n).reduce((map: Map<Network, string>, key) => {\n  if (key in WEBHOOK_NETWORK_TO_NETWORK) {\n    map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\n  }\n  return map;\n}, new Map());\n\nfunction parseRawWebhookResponse(\n  response: RawGetAllWebhooksResponse\n): Webhook[] {\n  return response.data.map(parseRawWebhook);\n}\n\nfunction parseRawWebhook(rawWebhook: RawWebhook): Webhook {\n  return {\n    id: rawWebhook.id,\n    network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network],\n    type: rawWebhook.webhook_type as WebhookType,\n    url: rawWebhook.webhook_url,\n    isActive: rawWebhook.is_active,\n    timeCreated: new Date(rawWebhook.time_created).toISOString(),\n    signingKey: rawWebhook.signing_key,\n    version: rawWebhook.version as WebhookVersion,\n    // Only include the appId in the final response if it's defined\n    ...(rawWebhook.app_id !== undefined && { appId: rawWebhook.app_id })\n  };\n}\n\nfunction parseRawAddressActivityResponse(\n  response: RawAddressActivityResponse\n): AddressActivityResponse {\n  return {\n    addresses: response.data,\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\n\nfunction parseRawCustomGraphqlWebhookResponse(\n  response: RawCustomGraphqlWebhookConfig\n): CustomGraphqlWebhookConfig {\n  return {\n    graphqlQuery: response.data.graphql_query\n  };\n}\n\nfunction parseRawNftFiltersResponse(\n  response: RawNftFiltersResponse\n): NftFiltersResponse {\n  return {\n    filters: response.data.map(f =>\n      f.token_id\n        ? {\n            contractAddress: f.contract_address,\n            tokenId: BigNumber.from(f.token_id).toString()\n          }\n        : {\n            contractAddress: f.contract_address\n          }\n    ),\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\n\nfunction nftFilterToParam(filter: NftFilter): RawNftFilterParam {\n  return filter.tokenId\n    ? {\n        contract_address: filter.contractAddress,\n        token_id: BigNumber.from(filter.tokenId).toString()\n      }\n    : {\n        contract_address: filter.contractAddress\n      };\n}\n","import {\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport type { BigNumber } from '@ethersproject/bignumber';\nimport { Deferrable } from '@ethersproject/properties';\n\nimport {\n  BlockIdentifier,\n  DebugTransaction,\n  GasOptimizedTransactionResponse,\n  GasOptimizedTransactionStatusResponse,\n  SendPrivateTransactionOptions,\n  SimulateAssetChangesResponse,\n  SimulateExecutionResponse\n} from '../types/types';\nimport { nullsToUndefined } from '../util/util';\nimport { AlchemyConfig } from './alchemy-config';\nimport { Wallet } from './alchemy-wallet';\nimport { fromHex, toHex } from './util';\n\n/**\n * Multiples to increment fee per gas when using\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\n *\n * @internal\n */\nexport const GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];\n\n/**\n * The Transact namespace contains methods used for sending transactions and\n * checking on the state of submitted transactions.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the transact\n * namespace via `alchemy.transact`.\n */\nexport class TransactNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Used to send a single transaction to Flashbots. Flashbots will attempt to\n   * send the transaction to miners for the next 25 blocks.\n   *\n   * Returns the transaction hash of the submitted transaction.\n   *\n   * @param signedTransaction The raw, signed transaction as a hash.\n   * @param maxBlockNumber Optional highest block number in which the\n   *   transaction should be included.\n   * @param options Options to configure the request.\n   */\n  async sendPrivateTransaction(\n    signedTransaction: string,\n    maxBlockNumber?: number,\n    options?: SendPrivateTransactionOptions\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\n    return provider._send(\n      'eth_sendPrivateTransaction',\n      [\n        {\n          tx: signedTransaction,\n          maxBlockNumber: hexBlockNumber,\n          preferences: options\n        }\n      ],\n      'sendPrivateTransaction'\n    );\n  }\n\n  /**\n   * Stops the provided private transaction from being submitted for future\n   * blocks. A transaction can only be cancelled if the request is signed by the\n   * same key as the {@link sendPrivateTransaction} call submitting the\n   * transaction in first place.\n   *\n   * Please note that fast mode transactions cannot be cancelled using this method.\n   *\n   * Returns a boolean indicating whether the cancellation was successful.\n   *\n   * @param transactionHash Transaction hash of private tx to be cancelled\n   */\n  async cancelPrivateTransaction(transactionHash: string): Promise<boolean> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'eth_cancelPrivateTransaction',\n      [\n        {\n          txHash: transactionHash\n        }\n      ],\n      'cancelPrivateTransaction'\n    );\n  }\n\n  /**\n   * Simulates the asset changes resulting from a list of transactions simulated\n   * in sequence.\n   *\n   * Returns a list of asset changes for each transaction during simulation.\n   *\n   * @param transactions Transactions list of max 3 transactions to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateAssetChangesBundle(\n    transactions: DebugTransaction[],\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateAssetChangesResponse[]> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transactions, blockIdentifier]\n        : [transactions];\n    const res = await provider._send(\n      'alchemy_simulateAssetChangesBundle',\n      params,\n      'simulateAssetChangesBundle'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Simulates the asset changes resulting from a single transaction.\n   *\n   * Returns list of asset changes that occurred during the transaction\n   * simulation. Note that this method does not run the transaction on the\n   * blockchain.\n   *\n   * @param transaction The transaction to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateAssetChanges(\n    transaction: DebugTransaction,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateAssetChangesResponse> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transaction, blockIdentifier]\n        : [transaction];\n    const res = await provider._send(\n      'alchemy_simulateAssetChanges',\n      params,\n      'simulateAssetChanges'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Simulates a list of transactions in sequence and returns list of decoded\n   * traces and logs that occurred for each transaction during simulation.\n   *\n   * Note that this method does not run any transactions on the blockchain.\n   *\n   * @param transactions Transactions list of max 3 transactions to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateExecutionBundle(\n    transactions: DebugTransaction[],\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateExecutionResponse[]> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transactions, blockIdentifier]\n        : [transactions];\n    const res = provider._send(\n      'alchemy_simulateExecutionBundle',\n      params,\n      'simulateExecutionBundle'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Simulates a single transaction and the resulting and returns list of\n   * decoded traces and logs that occurred during the transaction simulation.\n   *\n   * Note that this method does not run the transaction on the blockchain.\n   *\n   * @param transaction The transaction to simulate.\n   * @param blockIdentifier Optional block identifier to simulate the\n   * transaction in.\n   */\n  async simulateExecution(\n    transaction: DebugTransaction,\n    blockIdentifier?: BlockIdentifier\n  ): Promise<SimulateExecutionResponse> {\n    const provider = await this.config.getProvider();\n    const params =\n      blockIdentifier !== undefined\n        ? [transaction, blockIdentifier]\n        : [transaction];\n    const res = provider._send(\n      'alchemy_simulateExecution',\n      params,\n      'simulateExecution'\n    );\n    return nullsToUndefined(res);\n  }\n\n  /**\n   * Returns the transaction with hash or null if the transaction is unknown.\n   *\n   * If a transaction has not been mined, this method will search the\n   * transaction pool. Various backends may have more restrictive transaction\n   * pool access (e.g. if the gas price is too low or the transaction was only\n   * recently sent and not yet indexed) in which case this method may also return null.\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransaction(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionResponse | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransaction(transactionHash);\n  }\n\n  /**\n   * Submits transaction to the network to be mined. The transaction must be\n   * signed, and be valid (i.e. the nonce is correct and the account has\n   * sufficient balance to pay for the transaction).\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\n   *\n   * @param signedTransaction The signed transaction to send.\n   * @public\n   */\n  async sendTransaction(\n    signedTransaction: string | Promise<string>\n  ): Promise<TransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider.sendTransaction(signedTransaction);\n  }\n\n  /**\n   * Returns an estimate of the amount of gas that would be required to submit\n   * transaction to the network.\n   *\n   * An estimate may not be accurate since there could be another transaction on\n   * the network that was not accounted for, but after being mined affects the\n   * relevant state.\n   *\n   * This is an alias for {@link CoreNamespace.estimateGas}.\n   *\n   * @param transaction The transaction to estimate gas for.\n   * @public\n   */\n  async estimateGas(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.estimateGas(transaction);\n  }\n\n  /**\n   * Returns a fee per gas (in wei) that is an estimate of how much you can pay\n   * as a priority fee, or \"tip\", to get a transaction included in the current block.\n   *\n   * This number is generally used to set the `maxPriorityFeePerGas` field in a\n   * transaction request.\n   *\n   * @public\n   */\n  async getMaxPriorityFeePerGas(): Promise<number> {\n    const provider = await this.config.getProvider();\n    const feeHex = await provider._send(\n      'eth_maxPriorityFeePerGas',\n      [],\n      'getMaxPriorityFeePerGas'\n    );\n    return fromHex(feeHex);\n  }\n\n  /**\n   * Returns a promise which will not resolve until specified transaction hash is mined.\n   *\n   * If {@link confirmations} is 0, this method is non-blocking and if the\n   * transaction has not been mined returns null. Otherwise, this method will\n   * block until the transaction has confirmed blocks mined on top of the block\n   * in which it was mined.\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to wait for.\n   * @param confirmations The number of blocks to wait for.\n   * @param timeout The maximum time to wait for the transaction to confirm.\n   * @public\n   */\n  async waitForTransaction(\n    transactionHash: string,\n    confirmations?: number,\n    timeout?: number\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.waitForTransaction(transactionHash, confirmations, timeout);\n  }\n\n  /**\n   * Instead of sending a single transaction that might not get mined, this\n   * method allows you to send the same transaction multiple times, with\n   * different gas prices and gas limits. This should result in lower fees paid.\n   *\n   * Alchemy will submit the cheapest transaction, and if it does not get mined,\n   * the next cheapest transaction will be submitted. This process will continue\n   * until one of the transactions is mined, or until all transactions are rejected.\n   *\n   * To have Alchemy automatically generate a fee and gas spread, pass in a\n   * {@link TransactionRequest} object and a {@link Wallet} as a signer.\n   *\n   * This method returns a response object containing the transaction hash for\n   * each of the signed transactions and a transaction job id that can be used\n   * to track the state of the transaction job.\n   *\n   * @param signedTransactions An array of signed transactions to send. Each\n   *   transaction in the array must have the same values, but with different\n   *   gas and fee values.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async sendGasOptimizedTransaction(\n    signedTransactions: string[]\n  ): Promise<GasOptimizedTransactionResponse>;\n\n  /**\n   * Instead of sending a single transaction that might not get mined, this\n   * method will generate a series of five EIP-1559 transactions with different\n   * gas prices in order to minimize the final fees paid.\n   *\n   * Alchemy will submit the cheapest transaction, and if it does not get mined,\n   * the next cheapest transaction will be submitted. This process will continue\n   * until one of the transactions is mined, or until all transactions are rejected.\n   *\n   * To calculate the fee, gas, and gas spread for each transaction, this method\n   * first calculates the base fee from the latest block, estimates the gas for\n   * the transaction, and then calculates the fee and gas spread for the\n   * transaction. The five transactions will have 90%, 100%, 110%, 120%, and\n   * 130% of the max priority fee per gas.\n   *\n   * Note that you can also pass in an array of pre-signed transactions with set\n   * gas levels for more granular control over gas.\n   *\n   * This method returns a response object containing the transaction hash for\n   * each of the signed transactions and a transaction job id that can be used\n   * to track the state of the transaction job.\n   *\n   * @param transaction The raw transaction to send.\n   * @param wallet A wallet to use to sign the transaction.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async sendGasOptimizedTransaction(\n    transaction: TransactionRequest,\n    wallet: Wallet\n  ): Promise<GasOptimizedTransactionResponse>;\n  async sendGasOptimizedTransaction(\n    transactionOrSignedTxs: TransactionRequest | string[],\n    wallet?: Wallet\n  ): Promise<GasOptimizedTransactionResponse> {\n    if (Array.isArray(transactionOrSignedTxs)) {\n      return this._sendGasOptimizedTransaction(\n        transactionOrSignedTxs,\n        'sendGasOptimizedTransactionPreSigned'\n      );\n    }\n\n    let gasLimit;\n    let priorityFee;\n    let baseFee;\n    const provider = await this.config.getProvider();\n    try {\n      gasLimit = await this.estimateGas(transactionOrSignedTxs);\n      priorityFee = await this.getMaxPriorityFeePerGas();\n      const currentBlock = await provider.getBlock('latest');\n      baseFee = currentBlock.baseFeePerGas!.toNumber();\n    } catch (e) {\n      throw new Error(`Failed to estimate gas for transaction: ${e}`);\n    }\n\n    const gasSpreadTransactions = generateGasSpreadTransactions(\n      transactionOrSignedTxs,\n      gasLimit.toNumber(),\n      baseFee,\n      priorityFee\n    );\n    const signedTransactions = await Promise.all(\n      gasSpreadTransactions.map(tx => wallet!.signTransaction(tx))\n    );\n\n    return this._sendGasOptimizedTransaction(\n      signedTransactions,\n      'sendGasOptimizedTransactionGenerated'\n    );\n  }\n\n  /**\n   * Returns the state of the transaction job returned by the\n   * {@link sendGasOptimizedTransaction}.\n   *\n   * @param trackingId The tracking id from the response of the sent gas optimized transaction.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async getGasOptimizedTransactionStatus(\n    trackingId: string\n  ): Promise<GasOptimizedTransactionStatusResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getGasOptimizedTransactionStatus',\n      [trackingId],\n      'getGasOptimizedTransactionStatus'\n    );\n  }\n\n  /** @internal */\n  private async _sendGasOptimizedTransaction(\n    signedTransactions: string[],\n    methodName: string\n  ): Promise<GasOptimizedTransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_sendGasOptimizedTransaction',\n      [\n        {\n          rawTransactions: signedTransactions\n        }\n      ],\n      methodName\n    );\n  }\n}\n\n/**\n * Helper method to generate the raw transaction with the given gas limit and\n * priority fee across a spread of different gas prices.\n *\n * @internal\n */\n// Visible for testing\nexport function generateGasSpreadTransactions(\n  transaction: TransactionRequest,\n  gasLimit: number,\n  baseFee: number,\n  priorityFee: number\n): TransactionRequest[] {\n  return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map(feeMultiplier => {\n    return {\n      ...transaction,\n      gasLimit,\n      maxFeePerGas: Math.round(\n        baseFee * feeMultiplier + priorityFee * feeMultiplier\n      ),\n      maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee)\n    };\n  });\n}\n","/** This file contains internal types used by the SDK and are not exposed to the end user. */\n\ntype JsonRpcId = string | number | null;\n\n/**\n * Prefix for `alchemy_pendingTransactions` subscriptions when serializing to\n * ethers events.\n *\n * This tag is used internally by ethers to track different event filters.\n */\nexport const ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE =\n  'alchemy-pending-transactions';\n\n/**\n * Prefix for `alchemy_minedTransactions` subscriptions when serializing to ethers events.\n *\n * This tag is used internally by ethers to track different event filters.\n */\nexport const ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE =\n  'alchemy-mined-transactions';\n\n/**\n * Array containing all the custom event tags used internally by ethers to track\n * event filters.\n */\nexport const ALCHEMY_EVENT_TYPES = [\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE\n];\n\nexport interface JsonRpcRequest {\n  jsonrpc: '2.0';\n  method: string;\n  params?: any[];\n  id?: JsonRpcId;\n}\n\nexport interface JsonRpcResponse<T = any> {\n  jsonrpc: '2.0';\n  result?: T;\n  error?: JsonRpcError;\n  id: JsonRpcId;\n}\n\ninterface JsonRpcError<T = any> {\n  code: number;\n  message: string;\n  data?: T;\n}\n\nexport type WebSocketMessage = SingleOrBatchResponse | SubscriptionEvent;\nexport type SingleOrBatchResponse = JsonRpcResponse | JsonRpcResponse[];\nexport interface SubscriptionEvent<T = any> {\n  jsonrpc: '2.0';\n  method: 'eth_subscription';\n  params: {\n    subscription: string;\n    result: T;\n  };\n}\n","import { EventType, Filter, Listener } from '@ethersproject/abstract-provider';\n\nimport {\n  AlchemyEventFilter,\n  AlchemyEventType,\n  AlchemyMinedTransactionsAddress,\n  AlchemyMinedTransactionsEventFilter,\n  AlchemyPendingTransactionsEventFilter,\n  AlchemySubscription,\n  NonEmptyArray\n} from '../types/types';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE\n} from './internal-types';\n\n/**\n * DO NOT MODIFY.\n *\n * Event class copied directly over from ethers.js's `BaseProvider` class.\n *\n * This class is used to represent events and their corresponding listeners. The\n * SDK needs to extend this class in order to support Alchemy's custom\n * Subscription API types. The original class is not exported by ethers. Minimal\n * changes have been made in order to get TS to compile.\n */\nclass Event {\n  readonly listener: Listener;\n  readonly once: boolean;\n  readonly tag: string;\n\n  _lastBlockNumber: number;\n  _inflight: boolean;\n\n  constructor(tag: string, listener: Listener, once: boolean) {\n    this.listener = listener;\n    this.tag = tag;\n    this.once = once;\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n\n  get event(): EventType {\n    switch (this.type) {\n      case 'tx':\n        return this.hash!;\n      case 'filter':\n        return this.filter!;\n      default:\n        return this.tag;\n    }\n  }\n\n  get type(): string {\n    return this.tag.split(':')[0];\n  }\n\n  get hash(): string {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'tx') {\n      throw new Error('Not a transaction event');\n    }\n    return comps[1];\n  }\n\n  get filter(): Filter {\n    const comps = this.tag.split(':');\n    if (comps[0] !== 'filter') {\n      throw new Error('Not a transaction event');\n    }\n    const address = comps[1];\n\n    const topics = deserializeTopics(comps[2]);\n    const filter: Filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== '*') {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable(): boolean {\n    const PollableEvents = ['block', 'network', 'pending', 'poll'];\n    return this.tag.indexOf(':') >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n\n/**\n * Wrapper class around the ethers `Event` class in order to add support for\n * Alchemy's custom subscriptions types.\n *\n * The serialization and deserialization mechanism requires the order of the\n * fields to be the same across different {@link ALCHEMY_EVENT_TYPES}. Before\n * using a getter on a new event filter, make sure that the position of the\n * field in serialization is correct.\n *\n * The getters on this class deserialize the event tag generated by\n * {@link getAlchemyEventTag} into the original fields passed into the event.\n */\nexport class EthersEvent extends Event {\n  /**\n   * Converts the event tag into the original `fromAddress` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get fromAddress(): string | string[] | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Converts the event tag into the original `toAddress` field in\n   * {@link AlchemyPendingTransactionsEventFilter}.\n   */\n  get toAddress(): string | string[] | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return deserializeAddressField(comps[2]);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * Converts the event tag into the original `hashesOnly` field in\n   * {@link AlchemyPendingTransactionsEventFilter} and {@link AlchemyMinedTransactionsEventFilter}.\n   */\n  get hashesOnly(): boolean | undefined {\n    const comps = this.tag.split(':');\n    if (!ALCHEMY_EVENT_TYPES.includes(comps[0])) {\n      return undefined;\n    }\n    if (comps[3] && comps[3] !== '*') {\n      return comps[3] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n\n  get includeRemoved(): boolean | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[2] && comps[2] !== '*') {\n      return comps[2] === 'true';\n    } else {\n      return undefined;\n    }\n  }\n\n  get addresses(): NonEmptyArray<AlchemyMinedTransactionsAddress> | undefined {\n    const comps = this.tag.split(':');\n    if (comps[0] !== ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      return undefined;\n    }\n    if (comps[1] && comps[1] !== '*') {\n      return deserializeAddressesField(comps[1]);\n    } else {\n      return undefined;\n    }\n  }\n}\n\nexport function isAlchemyEvent(\n  event: AlchemyEventType\n): event is\n  | AlchemyMinedTransactionsEventFilter\n  | AlchemyPendingTransactionsEventFilter {\n  return typeof event === 'object' && 'method' in event;\n}\n\n/**\n * Creates a string representation of an `alchemy_pendingTransaction`\n * subscription filter that is compatible with the ethers implementation of\n * `getEventTag()`. The method is not an exported function in ethers, which is\n * why the SDK has its own implementation.\n *\n * The event tag is then deserialized by the SDK's {@link EthersEvent} getters.\n *\n * @example\n *   ```js\n *   // Returns 'alchemy-pending-transactions:0xABC:0xDEF|0xGHI:true'\n *   const eventTag =  getAlchemyEventTag(\n *   {\n *     \"method\": \"alchemy_pendingTransactions\",\n *     \"fromAddress\": \"0xABC\",\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\n *     \"hashesOnly: true\n *   });\n *   ```;\n *\n * @param event\n * @internal\n */\nexport function getAlchemyEventTag(event: AlchemyEventType): string {\n  if (!isAlchemyEvent(event)) {\n    throw new Error('Event tag requires AlchemyEventType');\n  }\n\n  if (event.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n    return serializePendingTransactionsEvent(event);\n  } else if (event.method === AlchemySubscription.MINED_TRANSACTIONS) {\n    return serializeMinedTransactionsEvent(event);\n  } else {\n    throw new Error(`Unrecognized AlchemyFilterEvent: ${event}`);\n  }\n}\n\nexport function verifyAlchemyEventName(eventName: AlchemyEventFilter): void {\n  if (!Object.values(AlchemySubscription).includes(eventName.method)) {\n    throw new Error(\n      `Invalid method name ${\n        eventName.method\n      }. Accepted method names: ${Object.values(AlchemySubscription)}`\n    );\n  }\n}\n\n/**\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\n * compatible event tag.\n *\n * For the example event:\n * ```\n *  {\n *     \"method\": \"alchemy_pendingTransactions\",\n *     \"fromAddress\": \"0xABC\",\n *     \"toAddress\": [\"0xDEF\", \"0xGHI\"],\n *     \"hashesOnly: true\n *   }\n * ```\n *\n * The resulting serialization is:\n * `alchemy_pendingTransactions:0xABC:0xDEF|0xGHI:true`\n *\n * If a field is omitted, it is replaced with a `*`.\n */\nfunction serializePendingTransactionsEvent(\n  event: AlchemyPendingTransactionsEventFilter\n): string {\n  const fromAddress = serializeAddressField(event.fromAddress);\n  const toAddress = serializeAddressField(event.toAddress);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return (\n    ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE +\n    ':' +\n    fromAddress +\n    ':' +\n    toAddress +\n    ':' +\n    hashesOnly\n  );\n}\n\n/**\n * Serializes the provided {@link AlchemyPendingTransactionsEventFilter} into an ethers\n * compatible event tag.\n *\n * For the example event:\n * ```\n *  {\n *     \"method\": \"alchemy_minedTransactions\",\n *     \"addresses\": [\n *       {\n *         from: \"0xABC\"\n *       },\n *       {\n *         to: \"0xDEF\",\n *         from: \"0x123\"\n *       }\n *     ]\n *     \"includeRemoved\": false\n *     \"hashesOnly: true\n *   }\n * ```\n *\n * The resulting serialization is:\n * `alchemy_minedTransactions:*,0xABC|0xDEF,0x123:false:true`\n *\n * If a field is omitted, it is replaced with a `*`.\n *\n * The `addresses` array is split by the '|' character, and each to/from address\n * pair is separated by a ',' character.\n *\n */\nfunction serializeMinedTransactionsEvent(\n  event: AlchemyMinedTransactionsEventFilter\n): string {\n  const addresses = serializeAddressesField(event.addresses);\n  const includeRemoved = serializeBooleanField(event.includeRemoved);\n  const hashesOnly = serializeBooleanField(event.hashesOnly);\n  return (\n    ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE +\n    ':' +\n    addresses +\n    ':' +\n    includeRemoved +\n    ':' +\n    hashesOnly\n  );\n}\n\nfunction serializeAddressesField(\n  addresses: AlchemyMinedTransactionsAddress[] | undefined\n): string {\n  if (addresses === undefined) {\n    return '*';\n  }\n\n  return addresses\n    .map(\n      filter =>\n        serializeAddressField(filter.to) +\n        ',' +\n        serializeAddressField(filter.from)\n    )\n    .join('|');\n}\n\nfunction serializeAddressField(\n  field: string | Array<string> | undefined\n): string {\n  if (field === undefined) {\n    return '*';\n  } else if (Array.isArray(field)) {\n    return field.join('|');\n  } else {\n    return field;\n  }\n}\n\nfunction serializeBooleanField(field: boolean | undefined): string | undefined {\n  if (field === undefined) {\n    return '*';\n  } else {\n    return field.toString();\n  }\n}\n\nexport function deserializeTopics(data: string): any {\n  if (data === '') {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === '') {\n      return [];\n    }\n\n    const comps = topic.split('|').map(topic => {\n      return topic === 'null' ? null : topic;\n    });\n\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction deserializeAddressField(data: string): string | string[] | undefined {\n  if (data === '') {\n    return undefined;\n  }\n\n  const addresses = data.split('|');\n  return addresses.length === 1 ? addresses[0] : addresses;\n}\n\nfunction deserializeAddressesField(\n  data: string\n): NonEmptyArray<AlchemyMinedTransactionsAddress> | undefined {\n  if (data === '') {\n    return undefined;\n  }\n\n  // Perform a cast here since TS doesn't know we're guaranteed a non-empty\n  // array from deserializing.\n  return data\n    .split('|')\n    .map(addressStr => addressStr.split(','))\n    .map(addressPair => ({\n      ...(addressPair[0] !== '*' && { to: addressPair[0] }),\n      ...(addressPair[1] !== '*' && { from: addressPair[1] })\n    })) as NonEmptyArray<AlchemyMinedTransactionsAddress>;\n}\n","import type { Listener } from '@ethersproject/abstract-provider';\n\nimport { isAlchemyEvent } from '../internal/ethers-event';\nimport {\n  AlchemyEventType,\n  AlchemyMinedTransactionsAddress,\n  AlchemySubscription,\n  NonEmptyArray\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Websocket namespace contains all subscription related functions that\n * allow you to subscribe to events and receive updates as they occur. The\n * underlying WebSocket provider has additional logic to handle reconnections\n * and automatically backfills missed events.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.ws`.\n */\nexport class WebSocketNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Adds a listener to be triggered for each {@link eventName} event. Also\n   * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\n   * how to use them.\n   *\n   * @param eventName The event to listen for.\n   * @param listener The listener to call when the event is triggered.\n   * @public\n   */\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = await this._resolveEnsAlchemyEvent(eventName);\n      provider.on(processedEvent, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Adds a listener to be triggered for only the next {@link eventName} event,\n   * after which it will be removed. Also includes Alchemy's Subscription API\n   * events. See {@link AlchemyEventType} for how to use them.\n   *\n   * @param eventName The event to listen for.\n   * @param listener The listener to call when the event is triggered.\n   * @public\n   */\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = await this._resolveEnsAlchemyEvent(eventName);\n      provider.once(processedEvent, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName The event to unlisten to.\n   * @param listener The listener to remove.\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = await this._resolveEnsAlchemyEvent(eventName);\n      return provider.off(processedEvent, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      const processedEvent = eventName\n        ? await this._resolveEnsAlchemyEvent(eventName)\n        : undefined;\n      provider.removeAllListeners(processedEvent);\n    })();\n    return this;\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   */\n  async listenerCount(eventName?: AlchemyEventType): Promise<number> {\n    const provider = await this.config.getWebSocketProvider();\n    const processedEvent = eventName\n      ? await this._resolveEnsAlchemyEvent(eventName)\n      : undefined;\n    return provider.listenerCount(processedEvent);\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   */\n  async listeners(eventName?: AlchemyEventType): Promise<Listener[]> {\n    const provider = await this.config.getWebSocketProvider();\n    const processedEvent = eventName\n      ? await this._resolveEnsAlchemyEvent(eventName)\n      : undefined;\n    return provider.listeners(processedEvent);\n  }\n\n  /**\n   * Converts ENS addresses in an Alchemy Event to the underlying resolved\n   * address.\n   *\n   * VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  async _resolveEnsAlchemyEvent(\n    eventName: AlchemyEventType\n  ): Promise<AlchemyEventType> {\n    if (!isAlchemyEvent(eventName)) {\n      return eventName;\n    }\n\n    if (\n      eventName.method === AlchemySubscription.MINED_TRANSACTIONS &&\n      eventName.addresses\n    ) {\n      const processedAddresses: AlchemyMinedTransactionsAddress[] = [];\n      for (const address of eventName.addresses) {\n        if (address.to) {\n          address.to = await this._resolveNameOrError(address.to);\n        }\n        if (address.from) {\n          address.from = await this._resolveNameOrError(address.from);\n        }\n        processedAddresses.push(address);\n      }\n      eventName.addresses =\n        processedAddresses as NonEmptyArray<AlchemyMinedTransactionsAddress>;\n    } else if (eventName.method === AlchemySubscription.PENDING_TRANSACTIONS) {\n      if (eventName.fromAddress) {\n        if (typeof eventName.fromAddress === 'string') {\n          eventName.fromAddress = await this._resolveNameOrError(\n            eventName.fromAddress\n          );\n        } else {\n          eventName.fromAddress = await Promise.all(\n            eventName.fromAddress.map(address =>\n              this._resolveNameOrError(address)\n            )\n          );\n        }\n      }\n      if (eventName.toAddress) {\n        if (typeof eventName.toAddress === 'string') {\n          eventName.toAddress = await this._resolveNameOrError(\n            eventName.toAddress\n          );\n        } else {\n          eventName.toAddress = await Promise.all(\n            eventName.toAddress.map(address =>\n              this._resolveNameOrError(address)\n            )\n          );\n        }\n      }\n    }\n\n    return eventName;\n  }\n\n  /**\n   * Converts the provided ENS address or throws an error. This improves code\n   * readability and type safety in other methods.\n   *\n   * VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  async _resolveNameOrError(name: string): Promise<string> {\n    const provider = await this.config.getProvider();\n    const resolved = await provider.resolveName(name);\n    if (resolved === null) {\n      throw new Error(`Unable to resolve the ENS address: ${name}`);\n    }\n    return resolved;\n  }\n}\n","import { AlchemySettings } from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { CoreNamespace } from './core-namespace';\nimport { DebugNamespace } from './debug-namespace';\nimport { NftNamespace } from './nft-namespace';\nimport { NotifyNamespace } from './notify-namespace';\nimport { TransactNamespace } from './transact-namespace';\nimport { WebSocketNamespace } from './websocket-namespace';\n\n/**\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\n * APIs and separates functionality into different namespaces.\n *\n * Each SDK instance is associated with a specific network and API key. To use a\n * different network or API key, create a new instance of {@link Alchemy}.\n *\n * @public\n */\nexport class Alchemy {\n  /**\n   * The `core` namespace contains the core eth json-rpc calls and Alchemy's\n   * Enhanced APIs.\n   */\n  readonly core: CoreNamespace;\n\n  /** The `nft` namespace contains methods for Alchemy's NFT API. */\n  readonly nft: NftNamespace;\n\n  /** The `ws` namespace contains methods for using WebSockets and creating subscriptions. */\n  readonly ws: WebSocketNamespace;\n\n  /**\n   * The `transact` namespace contains methods for sending transactions and\n   * checking on the state of submitted transasctions.\n   */\n  readonly transact: TransactNamespace;\n\n  /**\n   * Holds the setting information for the instance of the Alchemy SDK client\n   * and allows access to the underlying providers.\n   */\n  readonly config: AlchemyConfig;\n\n  /**\n   * The `notify` namespace contains methods for creating and managing webhooks\n   * as part of the Notify API.\n   */\n  readonly notify: NotifyNamespace;\n\n  /**\n   * The `debug` namespace contains methods for inspecting and debugging\n   * transactions.\n   */\n  readonly debug: DebugNamespace;\n\n  /**\n   * @param {string} [settings.apiKey] - The API key to use for Alchemy\n   * @param {Network} [settings.network] - The network to use for Alchemy\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\n   * @param {number} [settings.requestTimeout] - The timeout after which request should fail\n   * @public\n   */\n  constructor(settings?: AlchemySettings) {\n    this.config = new AlchemyConfig(settings);\n\n    this.core = new CoreNamespace(this.config);\n    this.nft = new NftNamespace(this.config);\n    this.ws = new WebSocketNamespace(this.config);\n    this.transact = new TransactNamespace(this.config);\n    this.notify = new NotifyNamespace(this.config);\n    this.debug = new DebugNamespace(this.config);\n  }\n}\n","import {\n  BlockTag,\n  FeeData,\n  Provider,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport { ExternallyOwnedAccount } from '@ethersproject/abstract-signer';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { Deferrable } from '@ethersproject/properties';\nimport { SigningKey } from '@ethersproject/signing-key';\nimport { Wallet as EthersWallet } from '@ethersproject/wallet';\n\nimport { Alchemy } from './alchemy';\n\n/**\n * The Wallet class inherits Signer and can sign transactions and messages using\n * a private key as a standard Externally Owned Account (EOA).\n *\n * SDK's custom implementation of Ethers.js's 'Wallet'.\n *\n * Primary difference from Ethers.js 'Wallet' is that you can pass in either a\n * Provider or an Alchemy object. This implementation will intelligently detect\n * the format and set the provider accordingly.\n *\n * @public\n * @override\n */\nexport class Wallet extends EthersWallet {\n  private alchemyProviderPromise?: Promise<Provider>;\n\n  /**\n   * Overload permits users to pass in either a standard Provider or an Alchemy\n   * object. The constructor will detect the object type and handle appropriately.\n   *\n   * @override\n   */\n  constructor(\n    privateKey: BytesLike | ExternallyOwnedAccount | SigningKey,\n    alchemyOrProvider?: Alchemy | Provider\n  ) {\n    // If object passed in is a provider, send to super\n    let superProvider: Provider | undefined;\n    if (alchemyOrProvider && Provider.isProvider(alchemyOrProvider)) {\n      superProvider = alchemyOrProvider;\n    }\n    super(privateKey, superProvider);\n\n    // If object passed in is an Alchemy object, just set Alchemy\n    if (alchemyOrProvider && !Provider.isProvider(alchemyOrProvider)) {\n      this.alchemyProviderPromise = alchemyOrProvider.config.getProvider();\n    }\n  }\n\n  //////////////////////////////////////////////////////////////////\n  // Set of overrides from Signer to handle async provider retrieval.\n  //////////////////////////////////////////////////////////////////\n\n  /**\n   * Returns the balance of this wallet at blockTag.\n   *\n   * @param blockTag The block to check the balance of\n   * @override\n   */\n  getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n    return this.getWallet().then(wallet => wallet.getBalance(blockTag));\n  }\n\n  /**\n   * Returns the number of transactions this account has ever sent. This is the\n   * value required to be included in transactions as the nonce.\n   *\n   * @param blockTag The block to check the transaction count on\n   * @override\n   */\n  getTransactionCount(blockTag?: BlockTag): Promise<number> {\n    return this.getWallet().then(wallet =>\n      wallet.getTransactionCount(blockTag)\n    );\n  }\n\n  /**\n   * Returns the result of estimating the cost to send the transactionRequest,\n   * with this account address being used as the from field.\n   *\n   * @param transaction Transaction to estimate the gas on\n   * @override\n   */\n  estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n    return this.getWallet().then(wallet => wallet.estimateGas(transaction));\n  }\n\n  /**\n   * Returns the result of calling using the transactionRequest, with this\n   * account address being used as the from field.\n   *\n   * @param transaction To make a call on\n   * @param blockTag The block to make the call on\n   * @override\n   */\n  call(\n    transaction: Deferrable<TransactionRequest>,\n    blockTag?: BlockTag\n  ): Promise<string> {\n    return this.getWallet().then(wallet => wallet.call(transaction, blockTag));\n  }\n\n  /**\n   * Populates ALL keys for a transaction and checks that `from` matches this\n   * `Signer`. Resolves ENS names and populates fields like `gasPrice`, `gasLimit`,\n   * `nonce`, and `chainId` if they are not provided.\n   *\n   * @param transaction The transaction to populate.\n   * @override\n   */\n  populateTransaction(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<TransactionRequest> {\n    return this.getWallet().then(wallet =>\n      wallet.populateTransaction(transaction)\n    );\n  }\n\n  /**\n   * Populates all fields in a transaction, signs it and sends it to the network\n   *\n   * @param transaction The transaction to send.\n   * @override\n   */\n  sendTransaction(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<TransactionResponse> {\n    return this.getWallet().then(wallet => wallet.sendTransaction(transaction));\n  }\n\n  /**\n   * Returns the chain ID this wallet is connected to.\n   *\n   * @override\n   */\n  getChainId(): Promise<number> {\n    return this.getWallet().then(wallet => wallet.getChainId());\n  }\n\n  /**\n   * Returns the current gas price.\n   *\n   * @override\n   */\n  getGasPrice(): Promise<BigNumber> {\n    return this.getWallet().then(wallet => wallet.getGasPrice());\n  }\n\n  /**\n   * Returns the current recommended FeeData to use in a transaction.\n   *\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\n   * should be used.\n   *\n   * For legacy transactions and networks which do not support EIP-1559, the\n   * gasPrice should be used.\n   *\n   * @override\n   */\n  getFeeData(): Promise<FeeData> {\n    return this.getWallet().then(wallet => wallet.getFeeData());\n  }\n\n  /**\n   * Looks up the address of name. If the name is not owned, or does not have a\n   * Resolver configured, or the Resolver does not have an address configured,\n   * null is returned.\n   *\n   * @param name Name of the ENS address\n   * @override\n   */\n  resolveName(name: string): Promise<string> {\n    return this.getWallet().then(wallet => wallet.resolveName(name));\n  }\n\n  private async getWallet() {\n    if (!this.alchemyProviderPromise) {\n      return this.connect(this.provider);\n    }\n    return this.connect(await this.alchemyProviderPromise);\n  }\n}\n","import {\n  Contract as EthersContract,\n  ContractFactory as EthersContractFactory\n} from '@ethersproject/contracts';\n\n/**\n * The Contract class is a wrapper around the Contract class from ethers.js and\n * is exported here for convenience.\n *\n * @public\n */\n// TODO: support passing in Alchemy instance into the contract.\nexport class Contract extends EthersContract {}\n\n/**\n * The ContractFactory class is a wrapper around the ContractFactory class from\n * ethers.js and is exported here for convenience.\n *\n * @public\n */\nexport class ContractFactory extends EthersContractFactory {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}