{"ast":null,"code":"/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber {\n  #provider;\n  #filter;\n  /**\n   *  The filter.\n   */\n  get filter() {\n    return JSON.parse(this.#filter);\n  }\n  #filterId;\n  #paused;\n  #emitPromise;\n  /**\n   *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n   *  to %%filter%%.\n   */\n  constructor(provider, filter) {\n    this.#provider = provider;\n    this.#filter = JSON.stringify(filter);\n    this.#filterId = null;\n    this.#paused = null;\n    this.#emitPromise = null;\n  }\n  start() {\n    this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      this.#provider._register(filterId, this);\n      return filterId;\n    });\n  }\n  stop() {\n    this.#filterId.then(filterId => {\n      this.#provider.send(\"eth_unsubscribe\", [filterId]);\n    });\n    this.#filterId = null;\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    this.#paused = !!dropWhilePaused;\n  }\n  resume() {\n    this.#paused = null;\n  }\n  /**\n   *  @_ignore:\n   */\n  _handleMessage(message) {\n    if (this.#filterId == null) {\n      return;\n    }\n    if (this.#paused === null) {\n      let emitPromise = this.#emitPromise;\n      if (emitPromise == null) {\n        emitPromise = this._emit(this.#provider, message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(this.#provider, message);\n        });\n      }\n      this.#emitPromise = emitPromise.then(() => {\n        if (this.#emitPromise === emitPromise) {\n          this.#emitPromise = null;\n        }\n      });\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to emit the events on the\n   *  provider.\n   */\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n  #logFilter;\n  /**\n   *  The filter.\n   */\n  get logFilter() {\n    return JSON.parse(this.#logFilter);\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    this.#logFilter = JSON.stringify(filter);\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n  #callbacks;\n  // Maps each filterId to its subscriber\n  #subs;\n  // If any events come in before a subscriber has finished\n  // registering, queue them\n  #pending;\n  /**\n   *  Creates a new **SocketProvider** connected to %%network%%.\n   *\n   *  If unspecified, the network will be discovered.\n   */\n  constructor(network, _options) {\n    // Copy the options\n    const options = Object.assign({}, _options != null ? _options : {});\n    // Support for batches is generally not supported for\n    // connection-base providers; if this changes in the future\n    // the _send should be updated to reflect this\n    assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n    options.batchMaxCount = 1;\n    // Socket-based Providers (generally) cannot change their network,\n    // since they have a long-lived connection; but let people override\n    // this if they have just cause.\n    if (options.staticNetwork == null) {\n      options.staticNetwork = true;\n    }\n    super(network, options);\n    this.#callbacks = new Map();\n    this.#subs = new Map();\n    this.#pending = new Map();\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Register a new subscriber. This is used internalled by Subscribers\n   *  and generally is unecessary unless extending capabilities.\n   */\n  _register(filterId, subscriber) {\n    this.#subs.set(filterId, subscriber);\n    const pending = this.#pending.get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      this.#pending.delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      this.#callbacks.set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  /**\n   *  Sub-classes **must** call this with messages received over their\n   *  transport to be processed and dispatched.\n   */\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (result && typeof result === \"object\" && \"id\" in result) {\n      const callback = this.#callbacks.get(result.id);\n      if (callback == null) {\n        this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n          reasonCode: \"UNKNOWN_ID\",\n          result\n        }));\n        return;\n      }\n      this.#callbacks.delete(result.id);\n      callback.resolve(result);\n    } else if (result && result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = this.#subs.get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = this.#pending.get(filterId);\n        if (pending == null) {\n          pending = [];\n          this.#pending.set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    } else {\n      this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n        reasonCode: \"UNEXPECTED_MESSAGE\",\n        result\n      }));\n      return;\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to send %%message%% over their\n   *  transport.\n   */\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}","map":{"version":3,"mappings":"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","names":["UnmanagedSubscriber","assert","assertArgument","makeError","JsonRpcApiProvider","SocketSubscriber","filter","JSON","parse","constructor","provider","stringify","start","send","then","filterId","_register","stop","pause","dropWhilePaused","operation","resume","_handleMessage","message","emitPromise","_emit","Error","SocketBlockSubscriber","emit","parseInt","number","SocketPendingSubscriber","SocketEventSubscriber","logFilter","_wrapLog","_network","SocketProvider","network","_options","options","Object","assign","batchMaxCount","staticNetwork","Map","_getSubscriber","sub","type","orphan","subscriber","set","pending","get","delete","_send","payload","Array","isArray","promise","Promise","resolve","reject","id","_waitUntilReady","_write","_processMessage","result","callback","reasonCode","method","params","subscription","push"],"sourceRoot":"","sources":["../../src.ts/providers/provider-socket.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}