{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Contract = exports.BaseContract = exports.resolveArgs = exports.copyOverrides = void 0;\nconst index_js_1 = require(\"../abi/index.js\");\nconst index_js_2 = require(\"../address/index.js\");\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nconst provider_js_1 = require(\"../providers/provider.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst wrappers_js_1 = require(\"./wrappers.js\");\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n  return value && typeof value.call === \"function\";\n}\nfunction canEstimate(value) {\n  return value && typeof value.estimateGas === \"function\";\n}\nfunction canResolve(value) {\n  return value && typeof value.resolveName === \"function\";\n}\nfunction canSend(value) {\n  return value && typeof value.sendTransaction === \"function\";\n}\nfunction getResolver(value) {\n  if (value != null) {\n    if (canResolve(value)) {\n      return value;\n    }\n    if (value.provider) {\n      return value.provider;\n    }\n  }\n  return undefined;\n}\nclass PreparedTopicFilter {\n  #filter;\n  fragment;\n  constructor(contract, fragment, args) {\n    (0, index_js_3.defineProperties)(this, {\n      fragment\n    });\n    if (fragment.inputs.length < args.length) {\n      throw new Error(\"too many arguments\");\n    }\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(contract.runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    this.#filter = async function () {\n      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n        const arg = args[index];\n        if (arg == null) {\n          return null;\n        }\n        return param.walkAsync(args[index], (type, value) => {\n          if (type === \"address\") {\n            if (Array.isArray(value)) {\n              return Promise.all(value.map(v => (0, index_js_2.resolveAddress)(v, resolver)));\n            }\n            return (0, index_js_2.resolveAddress)(value, resolver);\n          }\n          return value;\n        });\n      }));\n      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n    }();\n  }\n  getTopicFilter() {\n    return this.#filter;\n  }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction getRunner(value, feature) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value[feature] === \"function\") {\n    return value;\n  }\n  if (value.provider && typeof value.provider[feature] === \"function\") {\n    return value.provider;\n  }\n  return null;\n}\nfunction getProvider(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.provider || null;\n}\n/**\n *  @_ignore:\n */\nasync function copyOverrides(arg, allowed) {\n  // Make sure the overrides passed in are a valid overrides object\n  const _overrides = index_js_1.Typed.dereference(arg, \"overrides\");\n  (0, index_js_3.assertArgument)(typeof _overrides === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n  // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n  const overrides = (0, provider_js_1.copyRequest)(_overrides);\n  (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n  (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n  // Resolve any from\n  if (overrides.from) {\n    overrides.from = overrides.from;\n  }\n  return overrides;\n}\nexports.copyOverrides = copyOverrides;\n/**\n *  @_ignore:\n */\nasync function resolveArgs(_runner, inputs, args) {\n  // Recursively descend into args and resolve any addresses\n  const runner = getRunner(_runner, \"resolveName\");\n  const resolver = canResolve(runner) ? runner : null;\n  return await Promise.all(inputs.map((param, index) => {\n    return param.walkAsync(args[index], (type, value) => {\n      value = index_js_1.Typed.dereference(value, type);\n      if (type === \"address\") {\n        return (0, index_js_2.resolveAddress)(value, resolver);\n      }\n      return value;\n    });\n  }));\n}\nexports.resolveArgs = resolveArgs;\nfunction buildWrappedFallback(contract) {\n  const populateTransaction = async function (overrides) {\n    // If an overrides was passed in, copy it and normalize the values\n    const tx = await copyOverrides(overrides, [\"data\"]);\n    tx.to = await contract.getAddress();\n    if (tx.from) {\n      tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract.runner));\n    }\n    const iface = contract.interface;\n    const noValue = (0, index_js_3.getBigInt)(tx.value || BN_0, \"overrides.value\") === BN_0;\n    const noData = (tx.data || \"0x\") === \"0x\";\n    if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n      (0, index_js_3.assertArgument)(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n    }\n    (0, index_js_3.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n    // Only allow payable contracts to set non-zero value\n    const payable = iface.receive || iface.fallback && iface.fallback.payable;\n    (0, index_js_3.assertArgument)(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n    // Only allow fallback contracts to set non-empty data\n    (0, index_js_3.assertArgument)(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n    return tx;\n  };\n  const staticCall = async function (overrides) {\n    const runner = getRunner(contract.runner, \"call\");\n    (0, index_js_3.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await populateTransaction(overrides);\n    try {\n      return await runner.call(tx);\n    } catch (error) {\n      if ((0, index_js_3.isCallException)(error) && error.data) {\n        throw contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n  };\n  const send = async function (overrides) {\n    const runner = contract.runner;\n    (0, index_js_3.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await populateTransaction(overrides));\n    const provider = getProvider(contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);\n  };\n  const estimateGas = async function (overrides) {\n    const runner = getRunner(contract.runner, \"estimateGas\");\n    (0, index_js_3.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await populateTransaction(overrides));\n  };\n  const method = async overrides => {\n    return await send(overrides);\n  };\n  (0, index_js_3.defineProperties)(method, {\n    _contract: contract,\n    estimateGas,\n    populateTransaction,\n    send,\n    staticCall\n  });\n  return method;\n}\nfunction buildWrappedMethod(contract, key) {\n  const getFragment = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const fragment = contract.interface.getFunction(key, args);\n    (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\",\n      info: {\n        key,\n        args\n      }\n    });\n    return fragment;\n  };\n  const populateTransaction = async function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const fragment = getFragment(...args);\n    // If an overrides was passed in, copy it and normalize the values\n    let overrides = {};\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await copyOverrides(args.pop());\n      if (overrides.from) {\n        overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract.runner));\n      }\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n    }\n    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n    return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({\n      to: contract.getAddress(),\n      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n    }));\n  };\n  const staticCall = async function () {\n    const result = await staticCallResult(...arguments);\n    if (result.length === 1) {\n      return result[0];\n    }\n    return result;\n  };\n  const send = async function () {\n    const runner = contract.runner;\n    (0, index_js_3.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await populateTransaction(...arguments));\n    const provider = getProvider(contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);\n  };\n  const estimateGas = async function () {\n    const runner = getRunner(contract.runner, \"estimateGas\");\n    (0, index_js_3.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await populateTransaction(...arguments));\n  };\n  const staticCallResult = async function () {\n    const runner = getRunner(contract.runner, \"call\");\n    (0, index_js_3.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await populateTransaction(...arguments);\n    let result = \"0x\";\n    try {\n      result = await runner.call(tx);\n    } catch (error) {\n      if ((0, index_js_3.isCallException)(error) && error.data) {\n        throw contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n    const fragment = getFragment(...arguments);\n    return contract.interface.decodeFunctionResult(fragment, result);\n  };\n  const method = async function () {\n    const fragment = getFragment(...arguments);\n    if (fragment.constant) {\n      return await staticCall(...arguments);\n    }\n    return await send(...arguments);\n  };\n  (0, index_js_3.defineProperties)(method, {\n    name: contract.interface.getFunctionName(key),\n    _contract: contract,\n    _key: key,\n    getFragment,\n    estimateGas,\n    populateTransaction,\n    send,\n    staticCall,\n    staticCallResult\n  });\n  // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n  Object.defineProperty(method, \"fragment\", {\n    configurable: false,\n    enumerable: true,\n    get: () => {\n      const fragment = contract.interface.getFunction(key);\n      (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fragment\",\n        info: {\n          key\n        }\n      });\n      return fragment;\n    }\n  });\n  return method;\n}\nfunction buildWrappedEvent(contract, key) {\n  const getFragment = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const fragment = contract.interface.getEvent(key, args);\n    (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\",\n      info: {\n        key,\n        args\n      }\n    });\n    return fragment;\n  };\n  const method = function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return new PreparedTopicFilter(contract, getFragment(...args), args);\n  };\n  (0, index_js_3.defineProperties)(method, {\n    name: contract.interface.getEventName(key),\n    _contract: contract,\n    _key: key,\n    getFragment\n  });\n  // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n  Object.defineProperty(method, \"fragment\", {\n    configurable: false,\n    enumerable: true,\n    get: () => {\n      const fragment = contract.interface.getEvent(key);\n      (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fragment\",\n        info: {\n          key\n        }\n      });\n      return fragment;\n    }\n  });\n  return method;\n}\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n  internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n  return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n  return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n}\nasync function getSubInfo(contract, event) {\n  let topics;\n  let fragment = null;\n  // Convert named events to topicHash and get the fragment for\n  // events which need deconstructing.\n  if (Array.isArray(event)) {\n    const topicHashify = function (name) {\n      if ((0, index_js_3.isHexString)(name, 32)) {\n        return name;\n      }\n      const fragment = contract.interface.getEvent(name);\n      (0, index_js_3.assertArgument)(fragment, \"unknown fragment\", \"name\", name);\n      return fragment.topicHash;\n    };\n    // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n    topics = event.map(e => {\n      if (e == null) {\n        return null;\n      }\n      if (Array.isArray(e)) {\n        return e.map(topicHashify);\n      }\n      return topicHashify(e);\n    });\n  } else if (event === \"*\") {\n    topics = [null];\n  } else if (typeof event === \"string\") {\n    if ((0, index_js_3.isHexString)(event, 32)) {\n      // Topic Hash\n      topics = [event];\n    } else {\n      // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n      fragment = contract.interface.getEvent(event);\n      (0, index_js_3.assertArgument)(fragment, \"unknown fragment\", \"event\", event);\n      topics = [fragment.topicHash];\n    }\n  } else if (isDeferred(event)) {\n    // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n    topics = await event.getTopicFilter();\n  } else if (\"fragment\" in event) {\n    // ContractEvent; e.g. `contract.filter.Transfer`\n    fragment = event.fragment;\n    topics = [fragment.topicHash];\n  } else {\n    (0, index_js_3.assertArgument)(false, \"unknown event name\", \"event\", event);\n  }\n  // Normalize topics and sort TopicSets\n  topics = topics.map(t => {\n    if (t == null) {\n      return null;\n    }\n    if (Array.isArray(t)) {\n      const items = Array.from(new Set(t.map(t => t.toLowerCase())).values());\n      if (items.length === 1) {\n        return items[0];\n      }\n      items.sort();\n      return items;\n    }\n    return t.toLowerCase();\n  });\n  const tag = topics.map(t => {\n    if (t == null) {\n      return \"null\";\n    }\n    if (Array.isArray(t)) {\n      return t.join(\"|\");\n    }\n    return t;\n  }).join(\"&\");\n  return {\n    fragment,\n    tag,\n    topics\n  };\n}\nasync function hasSub(contract, event) {\n  const {\n    subs\n  } = getInternal(contract);\n  return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n  // Make sure our runner can actually subscribe to events\n  const provider = getProvider(contract.runner);\n  (0, index_js_3.assert)(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n  const {\n    fragment,\n    tag,\n    topics\n  } = await getSubInfo(contract, event);\n  const {\n    addr,\n    subs\n  } = getInternal(contract);\n  let sub = subs.get(tag);\n  if (!sub) {\n    const address = addr ? addr : contract;\n    const filter = {\n      address,\n      topics\n    };\n    const listener = log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = contract.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      // If fragment is null, we do not deconstruct the args to emit\n      if (foundFragment) {\n        const _foundFragment = foundFragment;\n        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n        emit(contract, event, args, listener => {\n          return new wrappers_js_1.ContractEventPayload(contract, listener, event, _foundFragment, log);\n        });\n      } else {\n        emit(contract, event, [], listener => {\n          return new wrappers_js_1.ContractUnknownEventPayload(contract, listener, event, log);\n        });\n      }\n    };\n    let starting = [];\n    const start = () => {\n      if (starting.length) {\n        return;\n      }\n      starting.push(provider.on(filter, listener));\n    };\n    const stop = async () => {\n      if (starting.length == 0) {\n        return;\n      }\n      let started = starting;\n      starting = [];\n      await Promise.all(started);\n      provider.off(filter, listener);\n    };\n    sub = {\n      tag,\n      listeners: [],\n      start,\n      stop\n    };\n    subs.set(tag, sub);\n  }\n  return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n  await lastEmit;\n  const sub = await hasSub(contract, event);\n  if (!sub) {\n    return false;\n  }\n  const count = sub.listeners.length;\n  sub.listeners = sub.listeners.filter(_ref => {\n    let {\n      listener,\n      once\n    } = _ref;\n    const passArgs = Array.from(args);\n    if (payloadFunc) {\n      passArgs.push(payloadFunc(once ? null : listener));\n    }\n    try {\n      listener.call(contract, ...passArgs);\n    } catch (error) {}\n    return !once;\n  });\n  if (sub.listeners.length === 0) {\n    sub.stop();\n    getInternal(contract).subs.delete(sub.tag);\n  }\n  return count > 0;\n}\nasync function emit(contract, event, args, payloadFunc) {\n  try {\n    await lastEmit;\n  } catch (error) {}\n  const resultPromise = _emit(contract, event, args, payloadFunc);\n  lastEmit = resultPromise;\n  return await resultPromise;\n}\nconst passProperties = [\"then\"];\nclass BaseContract {\n  /**\n   *  The target to connect to.\n   *\n   *  This can be an address, ENS name or any [[Addressable]], such as\n   *  another contract. To get the resovled address, use the ``getAddress``\n   *  method.\n   */\n  target;\n  /**\n   *  The contract Interface.\n   */\n  interface;\n  /**\n   *  The connected runner. This is generally a [[Provider]] or a\n   *  [[Signer]], which dictates what operations are supported.\n   *\n   *  For example, a **Contract** connected to a [[Provider]] may\n   *  only execute read-only operations.\n   */\n  runner;\n  /**\n   *  All the Events available on this contract.\n   */\n  filters;\n  /**\n   *  @_ignore:\n   */\n  [internal];\n  /**\n   *  The fallback or receive function if any.\n   */\n  fallback;\n  /**\n   *  Creates a new contract connected to %%target%% with the %%abi%% and\n   *  optionally connected to a %%runner%% to perform operations on behalf\n   *  of.\n   */\n  constructor(target, abi, runner, _deployTx) {\n    (0, index_js_3.assertArgument)(typeof target === \"string\" || (0, index_js_2.isAddressable)(target), \"invalid value for Contract target\", \"target\", target);\n    if (runner == null) {\n      runner = null;\n    }\n    const iface = index_js_1.Interface.from(abi);\n    (0, index_js_3.defineProperties)(this, {\n      target,\n      runner,\n      interface: iface\n    });\n    Object.defineProperty(this, internal, {\n      value: {}\n    });\n    let addrPromise;\n    let addr = null;\n    let deployTx = null;\n    if (_deployTx) {\n      const provider = getProvider(runner);\n      // @TODO: the provider can be null; make a custom dummy provider that will throw a\n      // meaningful error\n      deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);\n    }\n    let subs = new Map();\n    // Resolve the target as the address\n    if (typeof target === \"string\") {\n      if ((0, index_js_3.isHexString)(target)) {\n        addr = target;\n        addrPromise = Promise.resolve(target);\n      } else {\n        const resolver = getRunner(runner, \"resolveName\");\n        if (!canResolve(resolver)) {\n          throw (0, index_js_3.makeError)(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"resolveName\"\n          });\n        }\n        addrPromise = resolver.resolveName(target).then(addr => {\n          if (addr == null) {\n            throw (0, index_js_3.makeError)(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n              value: target\n            });\n          }\n          getInternal(this).addr = addr;\n          return addr;\n        });\n      }\n    } else {\n      addrPromise = target.getAddress().then(addr => {\n        if (addr == null) {\n          throw new Error(\"TODO\");\n        }\n        getInternal(this).addr = addr;\n        return addr;\n      });\n    }\n    // Set our private values\n    setInternal(this, {\n      addrPromise,\n      addr,\n      deployTx,\n      subs\n    });\n    // Add the event filters\n    const filters = new Proxy({}, {\n      get: (target, prop, receiver) => {\n        // Pass important checks (like `then` for Promise) through\n        if (typeof prop === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n          return Reflect.get(target, prop, receiver);\n        }\n        try {\n          return this.getEvent(prop);\n        } catch (error) {\n          if (!(0, index_js_3.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n            throw error;\n          }\n        }\n        return undefined;\n      },\n      has: (target, prop) => {\n        // Pass important checks (like `then` for Promise) through\n        if (passProperties.indexOf(prop) >= 0) {\n          return Reflect.has(target, prop);\n        }\n        return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n      }\n    });\n    (0, index_js_3.defineProperties)(this, {\n      filters\n    });\n    (0, index_js_3.defineProperties)(this, {\n      fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null\n    });\n    // Return a Proxy that will respond to functions\n    return new Proxy(this, {\n      get: (target, prop, receiver) => {\n        if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n          return Reflect.get(target, prop, receiver);\n        }\n        // Undefined properties should return undefined\n        try {\n          return target.getFunction(prop);\n        } catch (error) {\n          if (!(0, index_js_3.isError)(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n            throw error;\n          }\n        }\n        return undefined;\n      },\n      has: (target, prop) => {\n        if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n          return Reflect.has(target, prop);\n        }\n        return target.interface.hasFunction(prop);\n      }\n    });\n  }\n  /**\n   *  Return a new Contract instance with the same target and ABI, but\n   *  a different %%runner%%.\n   */\n  connect(runner) {\n    return new BaseContract(this.target, this.interface, runner);\n  }\n  /**\n   *  Return a new Contract instance with the same ABI and runner, but\n   *  a different %%target%%.\n   */\n  attach(target) {\n    return new BaseContract(target, this.interface, this.runner);\n  }\n  /**\n   *  Return the resolved address of this Contract.\n   */\n  async getAddress() {\n    return await getInternal(this).addrPromise;\n  }\n  /**\n   *  Return the deployed bytecode or null if no bytecode is found.\n   */\n  async getDeployedCode() {\n    const provider = getProvider(this.runner);\n    (0, index_js_3.assert)(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"getDeployedCode\"\n    });\n    const code = await provider.getCode(await this.getAddress());\n    if (code === \"0x\") {\n      return null;\n    }\n    return code;\n  }\n  /**\n   *  Resolve to this Contract once the bytecode has been deployed, or\n   *  resolve immediately if already deployed.\n   */\n  async waitForDeployment() {\n    // We have the deployement transaction; just use that (throws if deployement fails)\n    const deployTx = this.deploymentTransaction();\n    if (deployTx) {\n      await deployTx.wait();\n      return this;\n    }\n    // Check for code\n    const code = await this.getDeployedCode();\n    if (code != null) {\n      return this;\n    }\n    // Make sure we can subscribe to a provider event\n    const provider = getProvider(this.runner);\n    (0, index_js_3.assert)(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"waitForDeployment\"\n    });\n    return new Promise((resolve, reject) => {\n      const checkCode = async () => {\n        try {\n          const code = await this.getDeployedCode();\n          if (code != null) {\n            return resolve(this);\n          }\n          provider.once(\"block\", checkCode);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      checkCode();\n    });\n  }\n  /**\n   *  Return the transaction used to deploy this contract.\n   *\n   *  This is only available if this instance was returned from a\n   *  [[ContractFactory]].\n   */\n  deploymentTransaction() {\n    return getInternal(this).deployTx;\n  }\n  /**\n   *  Return the function for a given name. This is useful when a contract\n   *  method name conflicts with a JavaScript name such as ``prototype`` or\n   *  when using a Contract programatically.\n   */\n  getFunction(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    const func = buildWrappedMethod(this, key);\n    return func;\n  }\n  /**\n   *  Return the event for a given name. This is useful when a contract\n   *  event name conflicts with a JavaScript name such as ``prototype`` or\n   *  when using a Contract programatically.\n   */\n  getEvent(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    return buildWrappedEvent(this, key);\n  }\n  /**\n   *  @_ignore:\n   */\n  async queryTransaction(hash) {\n    throw new Error(\"@TODO\");\n  }\n  /*\n  // @TODO: this is a non-backwards compatible change, but will be added\n  //        in v7 and in a potential SmartContract class in an upcoming\n  //        v6 release\n  async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n      const provider = getProvider(this.runner);\n      assert(provider, \"contract runner does not have a provider\",\n          \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n       const receipt = await provider.getTransactionReceipt(hash);\n      if (receipt == null) { return null; }\n       return new ContractTransactionReceipt(this.interface, provider, receipt);\n  }\n  */\n  /**\n   *  Provide historic access to event data for %%event%% in the range\n   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n   *  inclusive.\n   */\n  async queryFilter(event, fromBlock, toBlock) {\n    if (fromBlock == null) {\n      fromBlock = 0;\n    }\n    if (toBlock == null) {\n      toBlock = \"latest\";\n    }\n    const {\n      addr,\n      addrPromise\n    } = getInternal(this);\n    const address = addr ? addr : await addrPromise;\n    const {\n      fragment,\n      topics\n    } = await getSubInfo(this, event);\n    const filter = {\n      address,\n      topics,\n      fromBlock,\n      toBlock\n    };\n    const provider = getProvider(this.runner);\n    (0, index_js_3.assert)(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"queryFilter\"\n    });\n    return (await provider.getLogs(filter)).map(log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = this.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      if (foundFragment) {\n        try {\n          return new wrappers_js_1.EventLog(log, this.interface, foundFragment);\n        } catch (error) {\n          return new wrappers_js_1.UndecodedEventLog(log, error);\n        }\n      }\n      return new provider_js_1.Log(log, provider);\n    });\n  }\n  /**\n   *  Add an event %%listener%% for the %%event%%.\n   */\n  async on(event, listener) {\n    const sub = await getSub(this, \"on\", event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n    sub.start();\n    return this;\n  }\n  /**\n   *  Add an event %%listener%% for the %%event%%, but remove the listener\n   *  after it is fired once.\n   */\n  async once(event, listener) {\n    const sub = await getSub(this, \"once\", event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n    sub.start();\n    return this;\n  }\n  /**\n   *  Emit an %%event%% calling all listeners with %%args%%.\n   *\n   *  Resolves to ``true`` if any listeners were called.\n   */\n  async emit(event) {\n    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      args[_key5 - 1] = arguments[_key5];\n    }\n    return await emit(this, event, args, null);\n  }\n  /**\n   *  Resolves to the number of listeners of %%event%% or the total number\n   *  of listeners if unspecified.\n   */\n  async listenerCount(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return 0;\n      }\n      return sub.listeners.length;\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let total = 0;\n    for (const {\n      listeners\n    } of subs.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  /**\n   *  Resolves to the listeners subscribed to %%event%% or all listeners\n   *  if unspecified.\n   */\n  async listeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return [];\n      }\n      return sub.listeners.map(_ref2 => {\n        let {\n          listener\n        } = _ref2;\n        return listener;\n      });\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let result = [];\n    for (const {\n      listeners\n    } of subs.values()) {\n      result = result.concat(listeners.map(_ref3 => {\n        let {\n          listener\n        } = _ref3;\n        return listener;\n      }));\n    }\n    return result;\n  }\n  /**\n   *  Remove the %%listener%% from the listeners for %%event%% or remove\n   *  all listeners if unspecified.\n   */\n  async off(event, listener) {\n    const sub = await hasSub(this, event);\n    if (!sub) {\n      return this;\n    }\n    if (listener) {\n      const index = sub.listeners.map(_ref4 => {\n        let {\n          listener\n        } = _ref4;\n        return listener;\n      }).indexOf(listener);\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n    if (listener == null || sub.listeners.length === 0) {\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    }\n    return this;\n  }\n  /**\n   *  Remove all the listeners for %%event%% or remove all listeners if\n   *  unspecified.\n   */\n  async removeAllListeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return this;\n      }\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    } else {\n      const {\n        subs\n      } = getInternal(this);\n      for (const {\n        tag,\n        stop\n      } of subs.values()) {\n        stop();\n        subs.delete(tag);\n      }\n    }\n    return this;\n  }\n  /**\n   *  Alias for [on].\n   */\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  }\n  /**\n   *  Alias for [off].\n   */\n  async removeListener(event, listener) {\n    return await this.off(event, listener);\n  }\n  /**\n   *  Create a new Class for the %%abi%%.\n   */\n  static buildClass(abi) {\n    class CustomContract extends BaseContract {\n      constructor(address) {\n        let runner = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        super(address, abi, runner);\n      }\n    }\n    return CustomContract;\n  }\n  /**\n   *  Create a new BaseContract with a specified Interface.\n   */\n  static from(target, abi, runner) {\n    if (runner == null) {\n      runner = null;\n    }\n    const contract = new this(target, abi, runner);\n    return contract;\n  }\n}\nexports.BaseContract = BaseContract;\nfunction _ContractBase() {\n  return BaseContract;\n}\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nclass Contract extends _ContractBase() {}\nexports.Contract = Contract;","map":{"version":3,"mappings":"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","names":["BN_0","BigInt","canCall","value","call","canEstimate","estimateGas","canResolve","resolveName","canSend","sendTransaction","getResolver","provider","undefined","PreparedTopicFilter","fragment","constructor","contract","args","inputs","length","Error","runner","getRunner","resolver","resolvedArgs","Promise","all","map","param","index","arg","walkAsync","type","Array","isArray","v","interface","encodeFilterTopics","getTopicFilter","feature","getProvider","copyOverrides","allowed","_overrides","index_js_1","dereference","overrides","to","indexOf","data","from","exports","resolveArgs","_runner","buildWrappedFallback","populateTransaction","tx","getAddress","iface","noValue","noData","fallback","payable","receive","staticCall","operation","error","makeError","send","wrappers_js_1","method","_contract","buildWrappedMethod","key","getFragment","getFunction","info","pop","Object","assign","encodeFunctionData","result","staticCallResult","decodeFunctionResult","constant","name","getFunctionName","_key","defineProperty","configurable","enumerable","get","buildWrappedEvent","getEvent","getEventName","internal","Symbol","for","internalValues","WeakMap","setInternal","values","set","getInternal","isDeferred","getSubInfo","event","topics","topicHashify","topicHash","e","t","items","Set","toLowerCase","sort","tag","join","hasSub","subs","getSub","addr","sub","address","filter","listener","log","foundFragment","_foundFragment","decodeEventLog","emit","starting","start","push","on","stop","started","off","listeners","lastEmit","resolve","_emit","payloadFunc","count","_ref","once","passArgs","delete","resultPromise","passProperties","BaseContract","target","filters","abi","_deployTx","addrPromise","deployTx","Map","then","Proxy","prop","receiver","Reflect","argument","has","hasEvent","String","hasFunction","connect","attach","getDeployedCode","code","getCode","waitForDeployment","deploymentTransaction","wait","reject","checkCode","format","func","queryTransaction","hash","queryFilter","fromBlock","toBlock","getLogs","provider_js_1","listenerCount","total","_ref2","concat","_ref3","_ref4","splice","removeAllListeners","addListener","removeListener","buildClass","CustomContract","_ContractBase","Contract"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\ethers\\src.ts\\contract\\contract.ts"],"sourcesContent":["import { Interface, Typed } from \"../abi/index.js\";\nimport { isAddressable, resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log, TransactionResponse } from \"../providers/provider.js\";\nimport {\n    defineProperties, getBigInt, isCallException, isHexString, resolveProperties,\n    isError, makeError, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport {\n    ContractEventPayload, ContractUnknownEventPayload,\n    ContractTransactionResponse,\n    EventLog, UndecodedEventLog\n} from \"./wrappers.js\";\n\nimport type { EventFragment, FunctionFragment, InterfaceAbi, ParamType, Result } from \"../abi/index.js\";\nimport type { Addressable, NameResolver } from \"../address/index.js\";\nimport type { EventEmitterable, Listener } from \"../utils/index.js\";\nimport type {\n    BlockTag, ContractRunner, Provider, TransactionRequest, TopicFilter\n} from \"../providers/index.js\";\n\nimport type {\n    BaseContractMethod,\n    ContractEventName,\n    ContractInterface,\n    ContractMethodArgs,\n    ContractMethod,\n    ContractEventArgs,\n    ContractEvent,\n    ContractTransaction,\n    DeferredTopicFilter,\n    WrappedFallback\n} from \"./types.js\";\n\nconst BN_0 = BigInt(0);\n\ninterface ContractRunnerCaller extends ContractRunner {\n    call: (tx: TransactionRequest) => Promise<string>;\n}\n\ninterface ContractRunnerEstimater extends ContractRunner {\n    estimateGas: (tx: TransactionRequest) => Promise<bigint>;\n}\n\ninterface ContractRunnerSender extends ContractRunner {\n    sendTransaction: (tx: TransactionRequest) => Promise<TransactionResponse>;\n}\n\ninterface ContractRunnerResolver extends ContractRunner {\n    resolveName: (name: string | Addressable) => Promise<null | string>;\n}\n\nfunction canCall(value: any): value is ContractRunnerCaller {\n    return (value && typeof(value.call) === \"function\");\n}\n\nfunction canEstimate(value: any): value is ContractRunnerEstimater {\n    return (value && typeof(value.estimateGas) === \"function\");\n}\n\nfunction canResolve(value: any): value is ContractRunnerResolver {\n    return (value && typeof(value.resolveName) === \"function\");\n}\n\nfunction canSend(value: any): value is ContractRunnerSender {\n    return (value && typeof(value.sendTransaction) === \"function\");\n}\n\nfunction getResolver(value: any): undefined | NameResolver {\n    if (value != null) {\n        if (canResolve(value)) { return value; }\n        if (value.provider) { return value.provider; }\n    }\n    return undefined;\n}\n\nclass PreparedTopicFilter implements DeferredTopicFilter {\n    #filter: Promise<TopicFilter>;\n    readonly fragment!: EventFragment;\n\n    constructor(contract: BaseContract, fragment: EventFragment, args: Array<any>) {\n        defineProperties<PreparedTopicFilter>(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner: null;\n        this.#filter = (async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) { return null; }\n\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        if (Array.isArray(value)) {\n                            return Promise.all(value.map((v) => resolveAddress(v, resolver)));\n                        }\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n\n    getTopicFilter(): Promise<TopicFilter> {\n        return this.#filter;\n    }\n}\n\n\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\n\nfunction getRunner<T extends ContractRunner>(value: any, feature: keyof ContractRunner): null | T {\n    if (value == null) { return null; }\n    if (typeof(value[feature]) === \"function\") { return value; }\n    if (value.provider && typeof(value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\n\nfunction getProvider(value: null | ContractRunner): null | Provider {\n    if (value == null) { return null; }\n    return value.provider || null;\n}\n\n/**\n *  @_ignore:\n */\nexport async function copyOverrides<O extends string = \"data\" | \"to\">(arg: any, allowed?: Array<string>): Promise<Omit<ContractTransaction, O>> {\n\n    // Make sure the overrides passed in are a valid overrides object\n    const _overrides = Typed.dereference(arg, \"overrides\");\n    assertArgument(typeof(_overrides) === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(_overrides);\n\n    assertArgument(overrides.to == null || (allowed || [ ]).indexOf(\"to\") >= 0,\n      \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || [ ]).indexOf(\"data\") >= 0,\n      \"cannot override data\", \"overrides.data\", overrides.data);\n\n    // Resolve any from\n    if (overrides.from) { overrides.from = overrides.from; }\n\n    return <Omit<ContractTransaction, O>>overrides;\n}\n\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner: null | ContractRunner, inputs: ReadonlyArray<ParamType>, args: Array<any>): Promise<Array<any>> {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner: null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") { return resolveAddress(value, resolver); }\n            return value;\n        });\n    }));\n}\n\nfunction buildWrappedFallback(contract: BaseContract): WrappedFallback {\n\n    const populateTransaction = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransaction> {\n        // If an overrides was passed in, copy it and normalize the values\n\n        const tx: ContractTransaction = <any>(await copyOverrides<\"data\">(overrides, [ \"data\" ]));\n        tx.to = await contract.getAddress();\n\n        if (tx.from) {\n            tx.from = await resolveAddress(tx.from, getResolver(contract.runner));\n        }\n\n        const iface = contract.interface;\n\n        const noValue = (getBigInt((tx.value || BN_0), \"overrides.value\") === BN_0);\n        const noData = ((tx.data || \"0x\") === \"0x\");\n\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n\n        assertArgument(iface.fallback || noData,\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || noValue,\n          \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || noData,\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        return tx;\n    }\n\n    const staticCall = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<string> {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await populateTransaction(overrides);\n\n        try {\n            return await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    }\n\n    const send = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransactionResponse> {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, <Provider>provider, tx);\n    }\n\n    const estimateGas = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<bigint> {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await populateTransaction(overrides));\n    }\n\n    const method = async (overrides?: Omit<TransactionRequest, \"to\">) => {\n        return await send(overrides);\n    };\n\n    defineProperties<any>(method, {\n        _contract: contract,\n\n        estimateGas,\n        populateTransaction,\n        send, staticCall\n    });\n\n    return <WrappedFallback>method;\n}\n\nfunction buildWrappedMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse>(contract: BaseContract, key: string): BaseContractMethod<A, R, D> {\n\n    const getFragment = function(...args: ContractMethodArgs<A>): FunctionFragment {\n        const fragment = contract.interface.getFunction(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n        return fragment;\n    }\n\n    const populateTransaction = async function(...args: ContractMethodArgs<A>): Promise<ContractTransaction> {\n        const fragment = getFragment(...args);\n\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides: Omit<ContractTransaction, \"data\" | \"to\"> = { };\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n\n            if (overrides.from) {\n                overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));\n            }\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n\n        return Object.assign({ }, overrides, await resolveProperties({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    }\n\n    const staticCall = async function(...args: ContractMethodArgs<A>): Promise<R> {\n        const result = await staticCallResult(...args);\n        if (result.length === 1) { return result[0]; }\n        return <R><unknown>result;\n    }\n\n    const send = async function(...args: ContractMethodArgs<A>): Promise<ContractTransactionResponse> {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, <Provider>provider, tx);\n    }\n\n    const estimateGas = async function(...args: ContractMethodArgs<A>): Promise<bigint> {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await populateTransaction(...args));\n    }\n\n    const staticCallResult = async function(...args: ContractMethodArgs<A>): Promise<Result> {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await populateTransaction(...args);\n\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n\n    const method = async (...args: ContractMethodArgs<A>) => {\n        const fragment = getFragment(...args);\n        if (fragment.constant) { return await staticCall(...args); }\n        return await send(...args);\n    };\n\n    defineProperties<any>(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract, _key: key,\n\n        getFragment,\n\n        estimateGas,\n        populateTransaction,\n        send, staticCall, staticCallResult,\n    });\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getFunction(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n            return fragment;\n        }\n    });\n\n    return <BaseContractMethod<A, R, D>>method;\n}\n\nfunction buildWrappedEvent<A extends Array<any> = Array<any>>(contract: BaseContract, key: string): ContractEvent<A> {\n\n    const getFragment = function(...args: ContractEventArgs<A>): EventFragment {\n        const fragment = contract.interface.getEvent(key, args);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n\n        return fragment;\n    }\n\n    const method = function(...args: ContractMethodArgs<A>): PreparedTopicFilter {\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n\n    defineProperties<any>(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract, _key: key,\n\n        getFragment\n    });\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getEvent(key);\n\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n\n            return fragment;\n        }\n    });\n\n    return <ContractEvent<A>><unknown>method;\n}\n\ntype Sub = {\n    tag: string;\n    listeners: Array<{ listener: Listener, once: boolean }>,\n    start: () => void;\n    stop: () => void;\n};\n\n\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\n\nconst internal = Symbol.for(\"_ethersInternal_contract\");\ntype Internal = {\n    addrPromise: Promise<string>;\n    addr: null | string;\n\n    deployTx: null | ContractTransactionResponse;\n\n    subs: Map<string, Sub>;\n};\n\nconst internalValues: WeakMap<BaseContract, Internal> = new WeakMap();\n\nfunction setInternal(contract: BaseContract, values: Internal): void {\n    internalValues.set(contract[internal], values);\n}\n\nfunction getInternal(contract: BaseContract): Internal {\n    return internalValues.get(contract[internal]) as Internal;\n}\n\nfunction isDeferred(value: any): value is DeferredTopicFilter {\n    return (value && typeof(value) === \"object\" && (\"getTopicFilter\" in value) &&\n      (typeof(value.getTopicFilter) === \"function\") && value.fragment);\n}\n\nasync function getSubInfo(contract: BaseContract, event: ContractEventName): Promise<{ fragment: null | EventFragment, tag: string, topics: TopicFilter }> {\n    let topics: Array<null | string | Array<string>>;\n    let fragment: null | EventFragment = null;\n\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n\n    if (Array.isArray(event)) {\n        const topicHashify = function(name: string): string {\n            if (isHexString(name, 32)) { return name; }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        }\n\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) { return null; }\n            if (Array.isArray(e)) { return e.map(topicHashify); }\n            return topicHashify(e);\n        });\n\n    } else if (event === \"*\") {\n        topics = [ null ];\n\n    } else if (typeof(event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [ event ];\n        } else {\n           // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [ fragment.topicHash ];\n        }\n\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [ fragment.topicHash ];\n\n    } else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) { return null; }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) { return items[0]; }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n\n    const tag = topics.map((t) => {\n        if (t == null) { return \"null\"; }\n        if (Array.isArray(t)) { return t.join(\"|\"); }\n        return t;\n    }).join(\"&\");\n\n    return { fragment, tag, topics }\n}\n\nasync function hasSub(contract: BaseContract, event: ContractEventName): Promise<null | Sub> {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\n\nasync function getSub(contract: BaseContract, operation: string, event: ContractEventName): Promise<Sub> {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\",\n        \"UNSUPPORTED_OPERATION\", { operation });\n\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n\n    const { addr, subs } = getInternal(contract);\n\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address: string | Addressable = (addr ? addr: contract);\n        const filter = { address, topics };\n        const listener = (log: Log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            // If fragment is null, we do not deconstruct the args to emit\n\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics): [ ];\n                emit(contract, event, args, (listener: null | Listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [ ], (listener: null | Listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n\n        let starting: Array<Promise<any>> = [ ];\n        const start = () => {\n            if (starting.length) { return; }\n            starting.push(provider.on(filter, listener));\n        };\n\n        const stop = async () => {\n            if (starting.length == 0) { return; }\n\n            let started = starting;\n            starting = [ ];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n\n        sub = { tag, listeners: [ ], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit: Promise<any> = Promise.resolve();\n\ntype PayloadFunc = (listener: null | Listener) => ContractUnknownEventPayload;\n\nasync function _emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    await lastEmit;\n\n    const sub = await hasSub(contract, event);\n    if (!sub) { return false; }\n\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null: listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) { }\n        return !once;\n    });\n\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n\n    return (count > 0);\n}\n\nasync function emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    try {\n        await lastEmit;\n    } catch (error) { }\n\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\n\nconst passProperties = [ \"then\" ];\nexport class BaseContract implements Addressable, EventEmitterable<ContractEventName> {\n    /**\n     *  The target to connect to.\n     *\n     *  This can be an address, ENS name or any [[Addressable]], such as\n     *  another contract. To get the resovled address, use the ``getAddress``\n     *  method.\n     */\n    readonly target!: string | Addressable;\n\n    /**\n     *  The contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The connected runner. This is generally a [[Provider]] or a\n     *  [[Signer]], which dictates what operations are supported.\n     *\n     *  For example, a **Contract** connected to a [[Provider]] may\n     *  only execute read-only operations.\n     */\n    readonly runner!: null | ContractRunner;\n\n    /**\n     *  All the Events available on this contract.\n     */\n    readonly filters!: Record<string, ContractEvent>;\n\n    /**\n     *  @_ignore:\n     */\n    readonly [internal]: any;\n\n    /**\n     *  The fallback or receive function if any.\n     */\n    readonly fallback!: null | WrappedFallback;\n\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */\n    constructor(target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner, _deployTx?: null | TransactionResponse) {\n        assertArgument(typeof(target) === \"string\" || isAddressable(target),\n            \"invalid value for Contract target\", \"target\", target);\n\n        if (runner == null) { runner = null; }\n        const iface = Interface.from(abi);\n        defineProperties<BaseContract>(this, { target, runner, interface: iface });\n\n        Object.defineProperty(this, internal, { value: { } });\n\n        let addrPromise;\n        let addr: null | string = null;\n\n        let deployTx: null | ContractTransactionResponse = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, <Provider>provider, _deployTx);\n        }\n\n        let subs = new Map();\n\n        // Resolve the target as the address\n        if (typeof(target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) {\n                        throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) { throw new Error(\"TODO\"); }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n\n        // Add the event filters\n        const filters = new Proxy({ }, {\n            get: (target, prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (typeof(prop) === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n\n                try {\n                    return this.getEvent(prop);\n                } catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n\n                return undefined;\n            },\n            has: (target, prop) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(<string>prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        defineProperties<BaseContract>(this, { filters });\n\n        defineProperties<BaseContract>(this, {\n            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)): null)\n        });\n\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n\n                // Undefined properties should return undefined\n                try {\n                    return target.getFunction(prop);\n                } catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n\n                return undefined;\n            },\n            has: (target, prop) => {\n                if (typeof(prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n\n                return target.interface.hasFunction(prop);\n            }\n        });\n\n    }\n\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */\n    connect(runner: null | ContractRunner): BaseContract {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */\n    attach(target: string | Addressable): BaseContract {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n\n    /**\n     *  Return the resolved address of this Contract.\n     */\n    async getAddress(): Promise<string> { return await getInternal(this).addrPromise; }\n\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */\n    async getDeployedCode(): Promise<null | string> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") { return null; }\n        return code;\n    }\n\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */\n    async waitForDeployment(): Promise<this> {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) { return this; }\n\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) { return resolve(this); }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */\n    deploymentTransaction(): null | ContractTransactionResponse {\n        return getInternal(this).deployTx;\n    }\n\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        const func = buildWrappedMethod(this, key);\n        return <T>func;\n    }\n\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getEvent(key: string | EventFragment): ContractEvent {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return buildWrappedEvent(this, key);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    async queryTransaction(hash: string): Promise<Array<EventLog>> {\n        throw new Error(\"@TODO\");\n    }\n\n    /*\n    // @TODO: this is a non-backwards compatible change, but will be added\n    //        in v7 and in a potential SmartContract class in an upcoming\n    //        v6 release\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n\n        const receipt = await provider.getTransactionReceipt(hash);\n        if (receipt == null) { return null; }\n\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\n    }\n    */\n\n    /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */\n    async queryFilter(event: ContractEventName, fromBlock?: BlockTag, toBlock?: BlockTag): Promise<Array<EventLog | Log>> {\n        if (fromBlock == null) { fromBlock = 0; }\n        if (toBlock == null) { toBlock = \"latest\"; }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr: (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            if (foundFragment) {\n                try {\n                    return new EventLog(log, this.interface, foundFragment);\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return new Log(log, provider);\n        });\n    }\n\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */\n    async on(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */\n    async once(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */\n    async emit(event: ContractEventName, ...args: Array<any>): Promise<boolean> {\n        return await emit(this, event, args, null);\n    }\n\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */\n    async listenerCount(event?: ContractEventName): Promise<number> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        const { subs } = getInternal(this);\n\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */\n    async listeners(event?: ContractEventName): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n\n        const { subs } = getInternal(this);\n\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */\n    async off(event: ContractEventName, listener?: Listener): Promise<this> {\n        const sub = await hasSub(this, event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */\n    async removeAllListeners(event?: ContractEventName): Promise<this> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return this; }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     *  Alias for [on].\n     */\n    async addListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.on(event, listener);\n    }\n\n    /**\n     *  Alias for [off].\n     */\n    async removeListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.off(event, listener);\n    }\n\n    /**\n     *  Create a new Class for the %%abi%%.\n     */\n    static buildClass<T = ContractInterface>(abi: Interface | InterfaceAbi): new (target: string, runner?: null | ContractRunner) => BaseContract & Omit<T, keyof BaseContract> {\n        class CustomContract extends BaseContract {\n            constructor(address: string, runner: null | ContractRunner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract as any;\n    };\n\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */\n    static from<T = ContractInterface>(target: string, abi: Interface | InterfaceAbi, runner?: null | ContractRunner): BaseContract & Omit<T, keyof BaseContract> {\n        if (runner == null) { runner = null; }\n        const contract = new this(target, abi, runner );\n        return contract as any;\n    }\n}\n\nfunction _ContractBase(): new (target: string, abi: Interface | InterfaceAbi, runner?: null | ContractRunner) => BaseContract & Omit<ContractInterface, keyof BaseContract> {\n    return BaseContract as any;\n}\n\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nexport class Contract extends _ContractBase() { }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}