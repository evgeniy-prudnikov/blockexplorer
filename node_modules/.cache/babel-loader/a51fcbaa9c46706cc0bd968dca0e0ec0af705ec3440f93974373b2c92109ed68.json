{"ast":null,"code":"\"use strict\";\n\n// utils/base64-browser\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBase64 = exports.decodeBase64 = void 0;\nconst data_js_1 = require(\"./data.js\");\nfunction decodeBase64(textData) {\n  textData = atob(textData);\n  const data = new Uint8Array(textData.length);\n  for (let i = 0; i < textData.length; i++) {\n    data[i] = textData.charCodeAt(i);\n  }\n  return (0, data_js_1.getBytes)(data);\n}\nexports.decodeBase64 = decodeBase64;\nfunction encodeBase64(_data) {\n  const data = (0, data_js_1.getBytes)(_data);\n  let textData = \"\";\n  for (let i = 0; i < data.length; i++) {\n    textData += String.fromCharCode(data[i]);\n  }\n  return btoa(textData);\n}\nexports.encodeBase64 = encodeBase64;","map":{"version":3,"mappings":";;AACA;;;;;AAEA;AAKA,SAAgBA,YAAYA,CAACC,QAAgB;EACzCA,QAAQ,GAAGC,IAAI,CAACD,QAAQ,CAAC;EACzB,MAAME,IAAI,GAAG,IAAIC,UAAU,CAACH,QAAQ,CAACI,MAAM,CAAC;EAC5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtCH,IAAI,CAACG,CAAC,CAAC,GAAGL,QAAQ,CAACM,UAAU,CAACD,CAAC,CAAC;;EAEpC,OAAO,sBAAQ,EAACH,IAAI,CAAC;AACzB;AAPAK;AASA,SAAgBC,YAAYA,CAACC,KAAgB;EACzC,MAAMP,IAAI,GAAG,sBAAQ,EAACO,KAAK,CAAC;EAC5B,IAAIT,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IAClCL,QAAQ,IAAIU,MAAM,CAACC,YAAY,CAACT,IAAI,CAACG,CAAC,CAAC,CAAC;;EAE5C,OAAOO,IAAI,CAACZ,QAAQ,CAAC;AACzB;AAPAO","names":["decodeBase64","textData","atob","data","Uint8Array","length","i","charCodeAt","exports","encodeBase64","_data","String","fromCharCode","btoa"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\ethers\\src.ts\\utils\\base64-browser.ts"],"sourcesContent":["\n// utils/base64-browser\n\nimport { getBytes } from \"./data.js\";\n\nimport type { BytesLike } from \"./data.js\";\n\n\nexport function decodeBase64(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = new Uint8Array(textData.length);\n    for (let i = 0; i < textData.length; i++) {\n        data[i] = textData.charCodeAt(i);\n    }\n    return getBytes(data);\n}\n\nexport function encodeBase64(_data: BytesLike): string {\n    const data = getBytes(_data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}