{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance) {\n  let checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\nexports.output = output;\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output\n};\nexports.default = assert;","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAMA,CAACC,CAAS;EACvB,IAAI,CAACC,MAAM,CAACC,aAAa,CAACF,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,2BAA2BH,CAAC,EAAE,CAAC;AACxF;AAqCSI;AAnCT,SAASC,IAAIA,CAACC,CAAU;EACtB,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE,MAAM,IAAIH,KAAK,CAAC,yBAAyBG,CAAC,EAAE,CAAC;AAC3E;AAiCiBF;AA/BjB,SAASG,KAAKA,CAACD,CAAyB,EAAsB;EAC5D,IAAI,EAAEA,CAAC,YAAYE,UAAU,CAAC,EAAE,MAAM,IAAIL,KAAK,CAAC,qBAAqB,CAAC;EAAC,kCAD5BM,OAAiB;IAAjBA,OAAiB;EAAA;EAE5D,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,IAAI,CAACD,OAAO,CAACE,QAAQ,CAACL,CAAC,CAACI,MAAM,CAAC,EACnD,MAAM,IAAIP,KAAK,CAAC,iCAAiCM,OAAO,mBAAmBH,CAAC,CAACI,MAAM,EAAE,CAAC;AAC1F;AA2BuBN;AAnBvB,SAASQ,IAAIA,CAACA,IAAU;EACtB,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAI,OAAOA,IAAI,CAACC,MAAM,KAAK,UAAU,EACjE,MAAM,IAAIV,KAAK,CAAC,iDAAiD,CAAC;EACpEJ,MAAM,CAACa,IAAI,CAACE,SAAS,CAAC;EACtBf,MAAM,CAACa,IAAI,CAACG,QAAQ,CAAC;AACvB;AAc8BX;AAZ9B,SAASY,MAAMA,CAACC,QAAa,EAAsB;EAAA,IAApBC,aAAa,uEAAG,IAAI;EACjD,IAAID,QAAQ,CAACE,SAAS,EAAE,MAAM,IAAIhB,KAAK,CAAC,kCAAkC,CAAC;EAC3E,IAAIe,aAAa,IAAID,QAAQ,CAACG,QAAQ,EAAE,MAAM,IAAIjB,KAAK,CAAC,uCAAuC,CAAC;AAClG;AASoCC;AARpC,SAASiB,MAAMA,CAACC,GAAQ,EAAEL,QAAa;EACrCV,KAAK,CAACe,GAAG,CAAC;EACV,MAAMC,GAAG,GAAGN,QAAQ,CAACH,SAAS;EAC9B,IAAIQ,GAAG,CAACZ,MAAM,GAAGa,GAAG,EAAE;IACpB,MAAM,IAAIpB,KAAK,CAAC,yDAAyDoB,GAAG,EAAE,CAAC;;AAEnF;AAE4CnB;AAE5C,MAAMoB,MAAM,GAAG;EAAEzB,MAAM;EAAEM,IAAI;EAAEE,KAAK;EAAEK,IAAI;EAAEI,MAAM;EAAEK;AAAM,CAAE;AAC5DjB,kBAAeoB,MAAM","names":["number","n","Number","isSafeInteger","Error","exports","bool","b","bytes","Uint8Array","lengths","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\@noble\\hashes\\src\\_assert.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}