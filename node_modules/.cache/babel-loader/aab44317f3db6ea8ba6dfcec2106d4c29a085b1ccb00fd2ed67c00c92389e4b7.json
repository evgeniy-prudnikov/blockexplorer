{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractEventPayload = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.UndecodedEventLog = exports.EventLog = void 0;\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nconst provider_js_1 = require(\"../providers/provider.js\");\nconst index_js_1 = require(\"../utils/index.js\");\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nclass EventLog extends provider_js_1.Log {\n  /**\n   *  The Contract Interface.\n   */\n  interface;\n  /**\n   *  The matching event.\n   */\n  fragment;\n  /**\n   *  The parsed arguments passed to the event by ``emit``.\n   */\n  args;\n  /**\n   * @_ignore:\n   */\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    (0, index_js_1.defineProperties)(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n  /**\n   *  The name of the event.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The signature of the event.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\nexports.EventLog = EventLog;\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nclass UndecodedEventLog extends provider_js_1.Log {\n  /**\n   *  The error encounted when trying to decode the log.\n   */\n  error;\n  /**\n   * @_ignore:\n   */\n  constructor(log, error) {\n    super(log, log.provider);\n    (0, index_js_1.defineProperties)(this, {\n      error\n    });\n  }\n}\nexports.UndecodedEventLog = UndecodedEventLog;\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nclass ContractTransactionReceipt extends provider_js_1.TransactionReceipt {\n  #iface;\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    this.#iface = iface;\n  }\n  /**\n   *  The parsed logs for any [[Log]] which has a matching event in the\n   *  Contract ABI.\n   */\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n      if (fragment) {\n        try {\n          return new EventLog(log, this.#iface, fragment);\n        } catch (error) {\n          return new UndecodedEventLog(log, error);\n        }\n      }\n      return log;\n    });\n  }\n}\nexports.ContractTransactionReceipt = ContractTransactionReceipt;\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nclass ContractTransactionResponse extends provider_js_1.TransactionResponse {\n  #iface;\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    this.#iface = iface;\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(confirms) {\n    const receipt = await super.wait(confirms);\n    if (receipt == null) {\n      return null;\n    }\n    return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n  }\n}\nexports.ContractTransactionResponse = ContractTransactionResponse;\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nclass ContractUnknownEventPayload extends index_js_1.EventPayload {\n  /**\n   *  The log with no matching events.\n   */\n  log;\n  /**\n   *  @_event:\n   */\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    (0, index_js_1.defineProperties)(this, {\n      log\n    });\n  }\n  /**\n   *  Resolves to the block the event occured in.\n   */\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n  /**\n   *  Resolves to the transaction the event occured in.\n   */\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n  /**\n   *  Resolves to the transaction receipt the event occured in.\n   */\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n}\nexports.ContractUnknownEventPayload = ContractUnknownEventPayload;\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nclass ContractEventPayload extends ContractUnknownEventPayload {\n  /**\n   *  @_ignore:\n   */\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    (0, index_js_1.defineProperties)(this, {\n      args,\n      fragment\n    });\n  }\n  /**\n   *  The event name.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The event signature.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\nexports.ContractEventPayload = ContractEventPayload;","map":{"version":3,"mappings":"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","names":["EventLog","provider_js_1","interface","fragment","args","constructor","log","iface","provider","decodeEventLog","data","topics","eventName","name","eventSignature","format","exports","UndecodedEventLog","error","ContractTransactionReceipt","tx","logs","map","length","getEvent","ContractTransactionResponse","wait","confirms","receipt","ContractUnknownEventPayload","index_js_1","contract","listener","filter","getBlock","getTransaction","getTransactionReceipt","ContractEventPayload","_log"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\ethers\\src.ts\\contract\\wrappers.ts"],"sourcesContent":["// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport {\n    Block, Log, TransactionReceipt, TransactionResponse\n} from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n\nimport type { EventFragment, Interface, Result } from \"../abi/index.js\";\nimport type { Listener } from \"../utils/index.js\";\nimport type {\n    Provider\n} from \"../providers/index.js\";\n\nimport type { BaseContract } from \"./contract.js\";\nimport type { ContractEventName } from \"./types.js\";\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The matching event.\n     */\n    readonly fragment!: EventFragment;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    readonly args!: Result;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, iface: Interface, fragment: EventFragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties<EventLog>(this, { args, fragment, interface: iface });\n    }\n\n    /**\n     *  The name of the event.\n     */\n    get eventName(): string { return this.fragment.name; }\n\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature(): string { return this.fragment.format(); }\n}\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    readonly error!: Error;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, error: Error) {\n        super(log, log.provider);\n        defineProperties<UndecodedEventLog>(this, { error });\n    }\n}\n\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionReceipt) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs(): Array<EventLog | Log> {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]): null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment)\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return log;\n        });\n    }\n\n}\n\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionResponse) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms?: number): Promise<null | ContractTransactionReceipt> {\n        const receipt = await super.wait(confirms);\n        if (receipt == null) { return null; }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport  class ContractUnknownEventPayload extends EventPayload<ContractEventName> {\n    /**\n     *  The log with no matching events.\n     */\n    readonly log!: Log;\n\n    /**\n     *  @_event:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, log: Log) {\n        super(contract, listener, filter);\n        defineProperties<ContractUnknownEventPayload>(this, { log });\n    }\n\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock(): Promise<Block> {\n        return await this.log.getBlock();\n    }\n\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        return await this.log.getTransaction();\n    }\n\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        return await this.log.getTransactionReceipt();\n    }\n}\n\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n\n    /**\n     *  The matching event.\n     */\n    declare readonly fragment: EventFragment;\n\n    /**\n     *  The log, with parsed properties.\n     */\n    declare readonly log: EventLog;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    declare readonly args: Result;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, fragment: EventFragment, _log: Log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties<ContractEventPayload>(this, { args, fragment });\n    }\n\n    /**\n     *  The event name.\n     */\n    get eventName(): string {\n        return this.fragment.name;\n    }\n\n    /**\n     *  The event signature.\n     */\n    get eventSignature(): string {\n        return this.fragment.format();\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}