{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmac = exports.HMAC = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    (0, _assert_js_1.hash)(hash);\n    const key = (0, utils_js_1.toBytes)(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf) {\n    (0, _assert_js_1.exists)(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out) {\n    (0, _assert_js_1.exists)(this);\n    (0, _assert_js_1.bytes)(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"mappings":"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","names":["HMAC","utils_js_1","constructor","hash","_key","key","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","buf","digestInto","out","finished","destroy","_cloneInto","to","Object","getPrototypeOf","destroyed","exports","hmac","message"],"sources":["D:\\Alchemy\\blockexplorer\\node_modules\\@noble\\hashes\\src\\hmac.ts"],"sourcesContent":["import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}