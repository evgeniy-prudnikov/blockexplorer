{"ast":null,"code":"// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create the necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n  #data;\n  #checksum;\n  /**\n   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n   *  and validated against the %%checksum%%.\n   */\n  constructor(locale, data, checksum) {\n    super(locale);\n    this.#data = data;\n    this.#checksum = checksum;\n    this.#words = null;\n  }\n  /**\n   *  The OWL-encoded data.\n   */\n  get _data() {\n    return this.#data;\n  }\n  /**\n   *  Decode all the words for the wordlist.\n   */\n  _decodeWords() {\n    return decodeOwl(this.#data);\n  }\n  #words;\n  #loadWords() {\n    if (this.#words == null) {\n      const words = this._decodeWords();\n      // Verify the computed list matches the official list\n      const checksum = id(words.join(\"\\n\") + \"\\n\");\n      /* c8 ignore start */\n      if (checksum !== this.#checksum) {\n        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n      }\n      /* c8 ignore stop */\n      this.#words = words;\n    }\n    return this.#words;\n  }\n  getWord(index) {\n    const words = this.#loadWords();\n    assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n    return words[index];\n  }\n  getWordIndex(word) {\n    return this.#loadWords().indexOf(word);\n  }\n}","map":{"version":3,"mappings":"AACA;AACA;AAEA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,cAAc,QAAQ,mBAAmB;AAElD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,eAAe;AAExC;;;;;;;;;;;;AAYA,OAAM,MAAOC,WAAY,SAAQD,QAAQ;EACrC,KAAK;EACL,SAAS;EAET;;;;EAIAE,YAAYC,MAAc,EAAEC,IAAY,EAAEC,QAAgB;IACtD,KAAK,CAACF,MAAM,CAAC;IACb,IAAI,CAAC,KAAK,GAAGC,IAAI;IACjB,IAAI,CAAC,SAAS,GAAGC,QAAQ;IACzB,IAAI,CAAC,MAAM,GAAG,IAAI;EACtB;EAEA;;;EAGA,IAAIC,KAAKA;IAAa,OAAO,IAAI,CAAC,KAAK;EAAE;EAEzC;;;EAGAC,YAAYA;IACR,OAAOR,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;EAChC;EAEA,MAAM;EACN,UAAUS;IACN,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;MACrB,MAAMC,KAAK,GAAG,IAAI,CAACF,YAAY,EAAE;MAEjC;MACA,MAAMF,QAAQ,GAAGR,EAAE,CAACY,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MAC5C;MACA,IAAIL,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;QAC7B,MAAM,IAAIM,KAAK,CAAC,sBAAuB,IAAI,CAACR,MAAO,SAAS,CAAC;;MAEjE;MAEA,IAAI,CAAC,MAAM,GAAGM,KAAK;;IAEvB,OAAO,IAAI,CAAC,MAAM;EACtB;EAEAG,OAAOA,CAACC,KAAa;IACjB,MAAMJ,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE;IAC/BX,cAAc,CAACe,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGJ,KAAK,CAACK,MAAM,EAAE,uBAAwBD,KAAM,EAAE,EAAE,OAAO,EAAEA,KAAK,CAAC;IACpG,OAAOJ,KAAK,CAACI,KAAK,CAAC;EACvB;EAEAE,YAAYA,CAACC,IAAY;IACrB,OAAO,IAAI,CAAC,UAAU,EAAE,CAACC,OAAO,CAACD,IAAI,CAAC;EAC1C","names":["id","assertArgument","decodeOwl","Wordlist","WordlistOwl","constructor","locale","data","checksum","_data","_decodeWords","#loadWords","words","join","Error","getWord","index","length","getWordIndex","word","indexOf"],"sourceRoot":"","sources":["../../src.ts/wordlists/wordlist-owl.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}